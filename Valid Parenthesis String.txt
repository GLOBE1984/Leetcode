Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
Example 1:
Input: "()"
Output: True
Example 2:
Input: "(*)"
Output: True
Example 3:
Input: "(*))"
Output: True
Note:
The string size will be in the range [1, 100].





class Solution {
    public boolean checkValidString(String s) {
        if(s != null && s.length() > 0) {
            Stack<Integer> leftStack = new Stack<>();
            Stack<Integer> starStack = new Stack<>();
            
            for(int i = 0; i < s.length(); ++i) {
                char c = s.charAt(i);
                if(c == '(') {
                    leftStack.push(i);
                } else if(c == '*') {
                    starStack.push(i);
                } else {
                    if(!leftStack.empty()) {
                        leftStack.pop();
                    } else if(!starStack.empty()) {
                        starStack.pop();
                    } else {
                        return false;
                    }
                }
            }
            
            while (!leftStack.empty() && !starStack.empty()) {
                if (leftStack.peek().intValue() > starStack.peek().intValue()) {
                    return false;
                }
                leftStack.pop(); 
                starStack.pop();
            }
            return leftStack.empty();
            
        } else {
            return true;
        }
    }
}