Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?




class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if not nums or len(nums) == 0: 
            return -1
        
        xor1 = nums[0]
        xor2 = 0
        
        index = 0
        for num in nums:
            if index == 0: 
                index = index + 1
                continue
            xor1 = xor1 ^ num
        
        index = 0
        for num in range(len(nums)+1): 
            if index == 0: 
                index = index + 1
                continue
            xor2 = xor2 ^ num
        
        return xor1 ^ xor2