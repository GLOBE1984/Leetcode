In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:
The size of the input 2D-array will be between 3 and 1000.
Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.

Update (2017-09-26):
We have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused.




class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        if(edges != null && edges.length > 0 && edges[0].length > 0) {
            int index = 0;
            Map<Integer, Integer> nodeConnections = new HashMap<>();
            Map<Integer, Set<Integer>> connectedSystems = new HashMap<>();
            
            int[] result = new int[2];
            for(int[] edge : edges) {
                int start = edge[0];
                int end = edge[1];
                if(nodeConnections.containsKey(start) && nodeConnections.containsKey(end)) {
                    int index1 = nodeConnections.get(start).intValue();
                    int index2 = nodeConnections.get(end).intValue();
                    if(index1 == index2) {
                        result = edge;
                        break;
                    } else {
                        int smaller = index1 < index2 ? index1 : index2;
                        int larger = index1 > index2 ? index1 : index2;
                        Set<Integer> nodes_smaller = connectedSystems.get(smaller);
                        Set<Integer> nodes_larger = connectedSystems.get(larger);
                        
                        for(Integer node : nodes_larger) {
                            nodes_smaller.add(node);
                            nodeConnections.put(node, smaller);
                        }
                        connectedSystems.remove(larger);
                        
                    }
                } else if(nodeConnections.containsKey(start) || nodeConnections.containsKey(end)) {
                    if(nodeConnections.containsKey(start)) {
                        nodeConnections.put(end, nodeConnections.get(start));
                        connectedSystems.get(nodeConnections.get(start)).add(end);
                    } else {
                        nodeConnections.put(start, nodeConnections.get(end));
                        connectedSystems.get(nodeConnections.get(end)).add(start);
                    }
                } else {
                    index++;
                    nodeConnections.put(start, index);
                    nodeConnections.put(end, index);
                    Set<Integer> nodes = new HashSet<>();
                    nodes.add(start);
                    nodes.add(end);
                    connectedSystems.put(index, nodes);
                }
            }
            
            return result;
        } else {
            return new int[0];
        }
    }
}
