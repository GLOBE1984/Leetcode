You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null || l2 == null) {
            return null;
        }
        
        ListNode root = new ListNode(-1);
        ListNode current = root;
        int carry = 0;
        
        while(l1 != null && l2 != null) {
            int tmp = l1.val + l2.val + carry;
            if(tmp >= 10) {
                tmp = tmp - 10;
                carry = 1;
            }
            else {
                carry = 0;
            }
            
            ListNode node = new ListNode(tmp);
            current.next = node;
            current = node;
            
            l1 = l1.next;
            l2 = l2.next;
        }
        
        while(l1 != null) {
            int tmp = l1.val + carry;
            if(tmp >= 10) {
                tmp = tmp - 10;
                carry = 1;
            }
            else {
                carry = 0;
            }
            
            ListNode node = new ListNode(tmp);
            current.next = node;
            current = node;
            
            l1 = l1.next;
        }
        
        while(l2 != null) {
            int tmp = l2.val + carry;
            if(tmp >= 10) {
                tmp = tmp - 10;
                carry = 1;
            }
            else {
                carry = 0;
            }
            
            ListNode node = new ListNode(tmp);
            current.next = node;
            current = node;
            
            l2 = l2.next;
        }
        
        if(carry == 1) {
            ListNode node = new ListNode(1);
            current.next = node;
        }
        
        return root.next;
    }
}