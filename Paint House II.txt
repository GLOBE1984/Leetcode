There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[1,5,3],[2,9,4]]
Output: 5
Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. 
Follow up:
Could you solve it in O(nk) runtime?





class Solution {
    public int minCostII(int[][] costs) {
        if(costs != null && costs.length > 0 && costs[0].length > 0) {
            int[] prev = null;
            int[] current = new int[costs[0].length];
            for(int i = 0; i < costs[0].length; ++i) {
                current[i] = costs[0][i];
            }
            
            for(int i = 1; i < costs.length; ++i) {
                prev = current;
                current = new int[costs[i].length];
                
                int minCost = Integer.MAX_VALUE;
                int minIndex = Integer.MAX_VALUE;
                int secMinCost = Integer.MAX_VALUE;
                int secMinIndex = Integer.MAX_VALUE;
                for(int j = 0; j < prev.length; ++j) {
                    if(prev[j] < minCost) {
                        secMinCost = minCost;
                        secMinIndex = minIndex;
                        minCost = prev[j];
                        minIndex = j;
                    } else if(prev[j] < secMinCost) {
                        secMinCost = prev[j];
                        secMinIndex = j;
                    }
                }
                
                for(int j = 0; j < current.length; ++j) {
                    if(j != minIndex) {
                        current[j] = minCost + costs[i][j];
                    } else {
                        current[j] = secMinCost + costs[i][j];
                    }
                }
            }
            
            int min = Integer.MAX_VALUE;
            for(int tmp : current) {
                min = Math.min(min, tmp);
            }
            
            return min;
        } else {
            return 0;
        }
    }
    
}