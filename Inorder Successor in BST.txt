Given a binary search tree and a node in it, find the in-order successor of that node in the BST.

Note: If the given node has no in-order successor in the tree, return null.




# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderSuccessor(self, root, p):
        """
        :type root: TreeNode
        :type p: TreeNode
        :rtype: TreeNode
        """
        stack = []
        
        if p.right: 
            current = p.right
            prev = current
            while current: 
                prev = current
                current = current.left
            return prev
                
        
        if self.dfs(root, stack, p):
            current = p
            prev = p
            while len(stack) > 0: 
                prev = current
                current = stack[-1]
                if current.left == prev: 
                    return current
                else: 
                    del stack[-1]
            return None
        else :
            return None
        
    def dfs(self, root, stack, p): 
        if not root: 
            return False
        if root == p: 
            return True
        
        stack.append(root)
        if self.dfs(root.left, stack, p): 
            return True
        elif self.dfs(root.right, stack, p): 
            return True
        else: 
            del stack[-1]
            return False