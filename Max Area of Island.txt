Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
Example 2:

[[0,0,0,0,0,0,0,0]]
Given the above grid, return 0.
Note: The length of each dimension in the given grid does not exceed 50.





class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        if(grid != null && grid.length > 0 && grid[0].length > 0) {
            Set<Point> visited = new HashSet<>();
            
            int max = 0;
            for(int i = 0; i < grid.length; ++i) {
                for(int j = 0; j < grid[0].length; ++j) {
                    if(grid[i][j] == 1) {
                        Point point = new Point(i, j);
                        if(!visited.contains(point)) {
                            max = Math.max(max, dfs(point, grid, visited));
                        }
                    }
                }
            }
            
            return max;
        } else {
            return 0;
        }
    }
    
    private int dfs(Point root, int[][] grid, Set<Point> visited) {
        Queue<Point> queue = new LinkedList<>();
        queue.offer(root);
        visited.add(root);
        int area = 1;
        
        while(!queue.isEmpty()) {
            Point point = queue.poll();
            if(point.row > 0 && grid[point.row-1][point.col] == 1) {
                Point newPoint = new Point(point.row-1, point.col);
                if(!visited.contains(newPoint)) {
                    queue.offer(newPoint);
                    visited.add(newPoint);
                    area++;
                }
            }
            if(point.row < grid.length-1 && grid[point.row+1][point.col] == 1) {
                Point newPoint = new Point(point.row+1, point.col);
                if(!visited.contains(newPoint)) {
                    queue.offer(newPoint);
                    visited.add(newPoint);
                    area++;
                }
            }
            if(point.col > 0 && grid[point.row][point.col-1] == 1) {
                Point newPoint = new Point(point.row, point.col-1);
                if(!visited.contains(newPoint)) {
                    queue.offer(newPoint);
                    visited.add(newPoint);
                    area++;
                }
            }
            if(point.col < grid[0].length-1 && grid[point.row][point.col+1] == 1) {
                Point newPoint = new Point(point.row, point.col+1);
                if(!visited.contains(newPoint)) {
                    queue.offer(newPoint);
                    visited.add(newPoint);
                    area++;
                }
            }
        }
        
        return area;
    }
    
    private class Point {
        
        private final int row;
        
        private final int col;
        
        private Point(int row, int col) {
            this.row = row;
            this.col = col;
        }
        
        public boolean equals(Object object) {
            if(!(object instanceof Point)) {
                return false;
            }
            
            Point point = (Point)object;
            return this.row == point.row && this.col == point.col;
        }
        
        public int hashCode() {
            return (this.row + " " + this.col).hashCode();
        }
        
    }
}