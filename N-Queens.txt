The n-queens puzzle is the problem of placing n queens on an n¡Án chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]




class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> results = new ArrayList<>();
        
        if(n > 0) {
            int[] rows = new int[n];
            for(int i = 0; i < rows.length; ++i) {
                rows[i] = -1;
            }
            findSolution(rows, 0, results);
        }
        
        return results;
    }
    
    private void findSolution(int[] rows, int row, List<List<String>> results) {
        if(row == rows.length) {
            List<String> result = new ArrayList<>();
            for(int k : rows) {
                StringBuilder builder = new StringBuilder();
                for(int i = 0; i < rows.length; ++i) {
                    if(i != k) {
                        builder.append(".");
                    } else {
                        builder.append("Q");
                    }
                }
                result.add(builder.toString());
            }
            results.add(result);
            return;
        }
        
        for(int col = 0; col < rows.length; ++col) {
            if(isValid(rows, row, col)) {
                rows[row] = col;
                findSolution(rows, row + 1, results);
                rows[row] = -1;
            }
        }
    }
    
    private boolean isValid(int[] rows, int row, int col) {
        for(int i = 0; i < row; ++i) {
            if(rows[i] == col || Math.abs(i - row) == Math.abs(rows[i] - col)) {
                return false;
            }
        }
        
        return true;
    }
}