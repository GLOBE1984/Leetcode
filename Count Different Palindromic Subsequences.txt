Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.

A subsequence of a string S is obtained by deleting 0 or more characters from S.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences A_1, A_2, ... and B_1, B_2, ... are different if there is some i for which A_i != B_i.

Example 1:
Input: 
S = 'bccb'
Output: 6
Explanation: 
The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.

Example 2:
Input: 
S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'
Output: 104860361
Explanation: 
There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.

Note:
The length of S will be in the range [1, 1000].
Each character S[i] will be in the set {'a', 'b', 'c', 'd'}.





class Solution {
    public int countPalindromicSubsequences(String S) {
        if(S != null && S.length() > 0) {
            int length = S.length();
            int constant = (int)(Math.pow(10, 9) + 7);
            int[][] dp = new int[length][length];
            
            for(int i = 0; i < length; ++i) {
                dp[i][i] = 1;
            }
            
            for(int i = 1; i < length; ++i) {
                for(int j = 0; j < length-i; ++j) {
                    int k = i + j;
                    if (S.charAt(j) == S.charAt(k)) {
                        int left = j + 1, right = k - 1;
                        while (left <= right && S.charAt(left) != S.charAt(j)) {
                            ++left;
                        }
                        while (left <= right && S.charAt(right) != S.charAt(j)) {
                            --right;
                        }
                        if (left > right) {
                            dp[j][k] = dp[j + 1][k - 1] * 2 + 2;
                        }
                        else if (left == right) {
                            dp[j][k] = dp[j + 1][k - 1] * 2 + 1;
                        } 
                        else {
                            dp[j][k] = dp[j + 1][k - 1] * 2 - dp[left + 1][right - 1];
                        }
                    } 
                    else {
                        dp[j][k] = dp[j][k - 1] + dp[j + 1][k] - dp[j + 1][k - 1];
                    }
                    dp[j][k] = (dp[j][k] < 0) ? dp[j][k] + constant : dp[j][k] % constant;
                }
            }
            
            return dp[0][length-1];
        }
        else {
            return 0;
        }
    }
}