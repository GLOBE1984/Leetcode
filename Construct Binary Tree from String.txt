You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.

Example:
Input: "4(2(3)(1))(6(5))"
Output: return the tree root node representing the following tree:

       4
     /   \
    2     6
   / \   / 
  3   1 5   
Note:
There will only be '(', ')', '-' and '0' ~ '9' in the input string.
An empty tree is represented by "" instead of "()".





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode str2tree(String s) {
        if(s == null || s.length() == 0) {
            return null;
        }
        
        int length = s.length();
        Stack<TreeNode> nodes = new Stack<TreeNode>();
        TreeNode root = new TreeNode(-1);
        str2tree(s, 0, length, root);
        
        return root.left;
    }
    
    private int str2tree(String s, int index, int length, TreeNode root) {
        if(index >= length) {
            return -1;
        }
        
        int val = 0;
        int multi = 1;
        char c = '*';
        while(index < length) {
            c = s.charAt(index);
            if(c != '(' && c != ')') {
                if(c == '-') {
                    multi = -1;
                }
                else if(c == '+') {
                    multi = -1;
                }
                else if(c >= '0' && c <= '9') {
                    val = 10 * val + multi * (c - '0');
                }
            }
            else {
                break;
            }
            index++;
        }
        
        TreeNode node = new TreeNode(val);
        if(root.left == null) {
            root.left = node;
        }
        else if(root.right == null) {
            root.right = node;
        }
        
        if(c == '(') {
            index = str2tree(s, index+1, length, node);
            if(index == -1) {
                return -1;
            }
            if(index < length) {
                c = s.charAt(index);
                if(c == '(') {
                    index = str2tree(s, index+1, length, node);
                }
            }
        }
        if(index == -1 || index >= length) {
            return -1;
        }
        else {
            return index + 1;
        }
    }
}