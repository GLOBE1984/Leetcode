Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.

Letters also wrap around. For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.

Examples:
Input:
letters = ["c", "f", "j"]
target = "a"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "c"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "d"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "g"
Output: "j"

Input:
letters = ["c", "f", "j"]
target = "j"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "k"
Output: "c"

Note:
letters has a length in range [2, 10000].
letters consists of lowercase letters, and contains at least 2 unique letters.
target is a lowercase letter.





class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        int length = letters.length;
        if(target < letters[length-1]) {
            int position = Arrays.binarySearch(letters, target);
            if(position >= 0) {
                position = binarySearch(letters, target, position, length-1);
                return letters[position+1];
            }
            else {
                return letters[-1*position-1];
            }
        }
        else {
            return letters[0];
        }
    }
    
    private int binarySearch(char[] letters, char target, int index1, int index2) {
        int start = index1;
        int end = index2;
        
        int position = -1;
        while(start <= end) {
            int mid = (start + end)/2;
            if(letters[mid] < target) {
                start = mid + 1;
            }
            else if(letters[mid] > target) {
                end = mid - 1;
            }
            else {
                position = mid;
                start = mid + 1;
            }
        }
        
        return position;
    }
}