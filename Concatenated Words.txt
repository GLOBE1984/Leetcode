Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.





class Solution {
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> results = new ArrayList<String>();
        
        if(words != null && words.length > 0) {
            TreeMap<Integer, Set<String>> lengthMap = new TreeMap<>();
            for(String word : words) {
                int length = word.length();
                Set<String> set = lengthMap.get(length);
                if(set == null) {
                    set = new HashSet<>();
                }
                set.add(word);
                lengthMap.put(length, set);
            }
            
            Map.Entry<Integer, Set<String>> baseEntry = lengthMap.firstEntry();
            Map<String, Boolean> records = new HashMap<>();
            Set<String> indexedWords = new HashSet<>();
            TrieNode root = new TrieNode();
            for(String word : baseEntry.getValue()) {
                indexWord(root, word);
                indexedWords.add(word);
            }
            
            Integer key = baseEntry.getKey();
            Map.Entry<Integer, Set<String>> entry = lengthMap.higherEntry(key);
            while(entry != null) {
                for(String word : entry.getValue()) {
                    if(!baseEntry.getValue().contains(word)) {
                        boolean result = isConcatenated(root, word, records, indexedWords);
                        if(result) {
                            results.add(word);
                        } else {
                            indexWord(root, word);
                            indexedWords.add(word);
                        }
                    }
                }
                key = entry.getKey();
                entry = lengthMap.higherEntry(key);
            }
        }
        
        return results;
    }
    
    private boolean isConcatenated(TrieNode root, String word, Map<String, Boolean> records, Set<String> indexedWords) {
        TrieNode current = root;
        
        for(int i = 0; i < word.length(); ++i) {
            char c = word.charAt(i);
            
            TrieNode node = current.children[c-'a'];
            if(node == null) {
                return false;
            }
            if(node.isEnd && i != word.length() - 1) {
                String subWord = word.substring(i + 1);
                if((records.containsKey(subWord) && records.get(subWord)) || indexedWords.contains(subWord)) {
                    return true;
                }
                boolean subResult = isConcatenated(root, subWord, records, indexedWords);
                records.put(subWord, subResult);
                if(subResult) {
                    return subResult;
                }
            }
            
            current = node;
        }
        
        return current.isEnd;
    }
    
    private void indexWord(TrieNode root, String word) {
        TrieNode current = root;
        
        for(int i = 0; i < word.length(); ++i) {
            char c = word.charAt(i);            
            TrieNode node = current.children[c-'a'];
            if(node == null) {
                node = new TrieNode();
            }
            current.children[c-'a'] = node;
            current = node;
        }
        
        current.isEnd = true;
    }
    
    private class TrieNode {
        
        private TrieNode[] children;
        
        private boolean isEnd;
        
        private TrieNode() {
            this.children = new TrieNode[26];
            this.isEnd = false;
        }
        
    }
}