Given a binary tree, find the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

For example,
   1
    \
     3
    / \
   2   4
        \
         5
Longest consecutive sequence path is 3-4-5, so return 3.
   2
    \
     3
    / 
   2    
  / 
 1
Longest consecutive sequence path is 2-3,not3-2-1, so return 2.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int longestConsecutive(TreeNode root) {
        if(root == null) {
            return 0;
        }
        
        Length length_max = new Length(1);
        Length length_current = new Length(1);
        
        longestConsecutive(root, length_max, length_current);
        
        return length_max.getLength();
    }
    
    private void longestConsecutive(TreeNode root, Length length_max, Length length_current) {
        if(root.left == null && root.right == null) {
            if(length_max.getLength() < length_current.getLength()) {
                length_max.setLength(length_current.getLength());
            }
        }
        
        if(root.left != null) {
            if(root.left.val-root.val == 1) {
                longestConsecutive(root.left, length_max, new Length(length_current.getLength() + 1));
            }
            else {
                if(length_max.getLength() < length_current.getLength()) {
                    length_max.setLength(length_current.getLength());
                }
                longestConsecutive(root.left, length_max, new Length(1));
            }
        }
        if(root.right != null) {
            if(root.right.val-root.val == 1) {
                longestConsecutive(root.right, length_max, new Length(length_current.getLength() + 1));
            }
            else {
                if(length_max.getLength() < length_current.getLength()) {
                    length_max.setLength(length_current.getLength());
                }
                longestConsecutive(root.right, length_max, new Length(1));
            }
        }
    }
    
    private static class Length {
        private int length;
        
        public Length(int length) {
            this.length = length;
        }
        
        public int getLength() {
            return this.length;
        }
        
        public void setLength(int length) {
            this.length = length;
        }
    }
}
