Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].





class Solution {
    // sum = left + middle + right
    // 4 conditions: sum = k, left = k, right = k, middle = k
    public int subarraySum(int[] nums, int k) {
        if(nums != null && nums.length > 1) {
            int sum = 0;
            Map<Integer, Integer> leftSumMap = new HashMap<>();
            int count = 0;
            for(int i = 0; i < nums.length - 1; ++i) {
                sum += nums[i];
                // left = k
                if(sum == k) {
                    count++;
                }
                Integer integer = leftSumMap.get(sum);
                if(integer == null) {
                    integer = Integer.valueOf(0);
                }
                leftSumMap.put(sum, integer.intValue()+1);
            }
            
            // sum = k
            sum += nums[nums.length-1];
            if(sum == k) {
                count++;
            }
            
            int rightSum = 0;
            for(int i = nums.length - 1; i >= 2; --i) {
                rightSum += nums[i];
                // right = k
                if(rightSum == k) {
                    count++;
                }
                int leftSum = sum - rightSum;
                leftSumMap.put(leftSum, leftSumMap.get(leftSum).intValue()-1);
                // middle = k
                count += leftSumMap.get(sum-k-rightSum) == null ? 0 : leftSumMap.get(sum-k-rightSum).intValue();
            }
            
            rightSum += nums[1];
            if(rightSum == k) {
                count++;
            }
            
            return count;
        } else if(nums != null && nums.length == 1) {
            return nums[0] == k ? 1 : 0;
        } else {
            return 0;
        }
    }
}