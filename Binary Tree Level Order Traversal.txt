Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        
        if(root != null) {
            Queue<TreeNode> queue = new LinkedList<TreeNode>();
            queue.offer(root);
            while(!queue.isEmpty()) {
                List<Integer> result = new ArrayList<Integer>();
                Queue<TreeNode> level = new LinkedList<TreeNode>();
                while(!queue.isEmpty()) {
                    TreeNode node = queue.poll();
                    result.add(node.val);
                    if(node.left != null) {
                        level.offer(node.left);
                    }
                    if(node.right != null) {
                        level.offer(node.right);
                    }
                }
                results.add(result);
                queue = level;
            }
        }
        
        return results;
    }
}