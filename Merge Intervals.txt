Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].





/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> list = new ArrayList<Interval>();
        
        if(intervals != null && intervals.size() > 0) {
            Collections.sort(intervals, new Comparator<Interval>() {
                @Override
				public int compare(Interval interval1, Interval interval2) {
					// TODO Auto-generated method stub
                    if(interval1.start < interval2.start) {
                        return -1;
                    }
                    else if(interval1.start > interval2.start) {
                        return 1;
                    }
                    else if(interval1.end < interval2.end) {
                        return -1;
                    }
                    else if(interval1.end > interval2.end) {
                        return 1;
                    }
                    else {
                        return 0;
                    }
				}
            });
            
            Interval current = null;
            for(Interval interval : intervals) {
                if(current != null) {
                    if(current.end >= interval.start) {
                        current = new Interval(current.start, Math.max(current.end, interval.end));
                    }
                    else {
                        list.add(current);
                        current = interval;
                    }
                }
                else {
                    current = interval;
                }
            }
            list.add(current);
        }
        
        return list;
    }
}