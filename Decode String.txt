Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".





public class Solution {
    public String decodeString(String s) {
        if(s == null || s.isEmpty()) {
            return "";
        }
        
        StringBuilder builder = new StringBuilder();
        Stack<Code> stack = new Stack<Code>();
        Code root = new Code(1);
        Code current = root;
        int times = 0;
        
        int length = s.length();
        for(int i = 0; i < length; ++i) {
            char c = s.charAt(i);
            if(c >= '0' && c <= '9') {
                times = 10 * times + (c - '0');
            }
            else if(c == '[') {
                stack.push(current);
                current = new Code(times);
                times = 0;
            }
            else if(c == ']') {
                Code tmp = stack.pop();
                tmp.getBuilder().append(current.getStr());
                current = tmp;
            }
            else {
                current.getBuilder().append(c);
            }
        }
        
        return root.getStr();
    }
    
    private static class Code {
        private final int times;
        private final StringBuilder builder;
        
        public Code(int times, StringBuilder builder) {
            this.times = times;
            this.builder = builder;
        }
        
        public Code(int times) {
            this(times, new StringBuilder());
        }
        
        public int getTimes() {
            return this.times;
        }
        
        public StringBuilder getBuilder() {
            return this.builder;
        }
        
        public String getStr() {
            String str = "";
            for(int i = 0; i < times; ++i) {
                str = str + builder.toString();
            }
            return str;
        }
    }
}
