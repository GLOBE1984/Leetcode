Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Consider the following binary search tree: 

     5
    / \
   2   6
  / \
 1   3
Example 1:

Input: [5,2,6,1,3]
Output: false
Example 2:

Input: [5,2,1,3,6]
Output: true
Follow up:
Could you do it using only constant space complexity?





class Solution {
    public boolean verifyPreorder(int[] preorder) {
        if(preorder != null && preorder.length > 0) {
            int current = 1;
            while(current <= preorder.length-1 && preorder[current] < preorder[0]) {
                current++;
            }
            
            boolean result = true;
            if(current > 1) {
                result = result & verifySubTree(preorder, 1, current-1, Integer.MIN_VALUE, preorder[0]);
            }
            if(current <= preorder.length-1) {
                result = result & verifySubTree(preorder, current, preorder.length-1, preorder[0], Integer.MAX_VALUE);
            }
            return result;
        } else {
            return true;
        }
    }
    
    private boolean verifySubTree(int[] preorder, int start, int end, int lowThres, int highThres) {
        if(start == end) {
            return preorder[start] > lowThres && preorder[start] < highThres;            
        }
        
        if(preorder[start] < lowThres || preorder[start] > highThres) {
            return false;
        }
        
        int current = start + 1;
        while(current <= end && preorder[current] < preorder[start]) {
            current++;
        }
        
        boolean result = true;
        if(current > start + 1) {
            result = result & verifySubTree(preorder, start+1, current-1, lowThres, preorder[start]);
        }
        if(current <= end) {
            result = result & verifySubTree(preorder, current, end, preorder[start], highThres);
        }
        return result;
    }
}