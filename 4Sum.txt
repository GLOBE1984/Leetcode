4Sum My Submissions Question Solution 
Total Accepted: 47000 Total Submissions: 215440 Difficulty: Medium
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ¡Ü b ¡Ü c ¡Ü d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)




public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        if(nums == null) {
            return null;
        }
        
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        if(nums.length == 0) {
            return results;
        }
        
        Arrays.sort(nums);
        
        int previous1 = Integer.MAX_VALUE;
        int previous2 = Integer.MAX_VALUE;
        
        for(int i = 0; i < nums.length; ++i) {
            if(i != 0) {
                if(previous1 == nums[i]) {
                    continue;
                }
            }
            
            for(int j = (i+1); j < nums.length; ++j) {
                if(j != (i+1)) {
                    if(previous2 == nums[j]) {
                        continue;
                    }
                }
                
                int m = j + 1;
                int n = nums.length - 1;
                while(m < n) {
                    if((nums[i]+nums[j]+nums[m]+nums[n]) < target) {
                        m++;
                    }
                    else if((nums[i]+nums[j]+nums[m]+nums[n]) > target) {
                        n--;
                    }
                    else {
                        List<Integer> result = Arrays.asList(Integer.valueOf(nums[i]), Integer.valueOf(nums[j]), Integer.valueOf(nums[m]                                 ), Integer.valueOf(nums[n]));
                        results.add(result);
                        m++;
                        n--;
                        while((m < n) && (nums[m] == nums[m-1]) && (nums[n] == nums[n+1])) {
                            m++;
                            n--;
                        }
                    }
                }
                
                previous2 = nums[j];
            }
            
            previous1 = nums[i];
        }
        
        return results;
    }
}