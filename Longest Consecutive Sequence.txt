Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.





class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums != null && nums.length > 0) {
            Map<Integer, Interval> map = new HashMap<Integer, Interval>();
            Set<Integer> set = new HashSet<Integer>();
            for(int num : nums) {
                if(!set.contains(num)) {
                    if(map.containsKey(num - 1) && map.containsKey(num + 1)) {
                        Interval interval1 = map.get(num - 1);
                        Interval interval2 = map.get(num + 1);
                        map.remove(interval1.start);
                        map.remove(interval1.end);
                        map.remove(interval2.start);
                        map.remove(interval2.end);
                        Interval interval = new Interval();
                        interval.start = interval1.start;
                        interval.end = interval2.end;
                        map.put(interval.start, interval);
                        map.put(interval.end, interval);
                    }
                    else if(map.containsKey(num - 1)) {
                        Interval interval = map.get(num - 1);
                        interval.end = num;
                        if(interval.start != num - 1) {
                            map.remove(num - 1);
                        }
                        map.put(num, interval);
                    }
                    else if(map.containsKey(num + 1)) {
                        Interval interval = map.get(num + 1);
                        interval.start = num;
                        if(interval.end != num + 1) {
                            map.remove(num + 1);
                        }
                        map.put(num, interval);
                    }
                    else {
                        Interval interval = new Interval();
                        interval.start = num;
                        interval.end = num;
                        map.put(num, interval);
                    }
                    set.add(num);
                }
            }
            
            int max = 0;
            Set<Integer> keys = map.keySet();
            for(Integer key : keys) {
                max = Math.max(map.get(key).end - map.get(key).start + 1, max);
            }
            return max;
        }
        else {
            return 0;
        }
    }
    
    private class Interval {
        public int start;
        public int end;
    }
}