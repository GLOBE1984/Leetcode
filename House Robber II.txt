Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Credits:
Special thanks to @Freezen for adding this problem and creating all test cases.





class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0: 
            return 0
        if len(nums) == 1: 
            return nums[0]
        
        length = len(nums)
        nums1 = nums[1:]
        nums2 = nums[0:length-1]
        
        val = 0
        if self.robNoCircle(nums1) >= self.robNoCircle(nums2): 
            val = self.robNoCircle(nums1)
        else: 
            val = self.robNoCircle(nums2)
        
        return val
        
    def robNoCircle(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0: 
            return 0
        dps = []
        dps.append(nums[0])
        adjacent = True
        
        n = 1
        length = len(nums)
        
        while n < length: 
            if adjacent:
                if n >= 2: 
                    if dps[n-2]+nums[n] > dps[n-1]: 
                        dps.append(dps[n-2]+nums[n])
                    else: 
                        dps.append(dps[n-1])
                        adjacent = False
                else: 
                    if nums[1] > nums[0]: 
                        dps.append(nums[1])
                    else: 
                        dps.append(nums[0])
                        adjacent = False
            else: 
                dps.append(dps[n-1] + nums[n])
                adjacent = True
            n = n + 1
        
        return dps[length-1]