You would like to set a password for a bank account. However, there are three restrictions on the format of the password:

it has to contain only alphanumerical characters (a?z, A?Z, 0?9);
there should be an even number of letters;
there should be an odd number of digits.
You are given a string S consisting of N characters. String S can be divided into words by splitting it at, and removing, the spaces. The goal is to choose the longest word that is a valid password. You can assume that if there are K spaces in string S then there are exactly K + 1 words.

For example, given "test 5 a0A pass007 ?xy1", there are five words and three of them are valid passwords: "5", "a0A" and "pass007". Thus the longest password is "pass007" and its length is 7. Note that neither "test" nor "?xy1" is a valid password, because "?" is not an alphanumerical character and "test" contains an even number of digits (zero).

Write a function:

class Solution { public int solution(String S); }
that, given a non-empty string S consisting of N characters, returns the length of the longest word from the string that is a valid password. If there is no such word, your function should return ?1.

For example, given S = "test 5 a0A pass007 ?xy1", your function should return 7, as explained above.

Assume that:

N is an integer within the range [1..200];
string S consists only of printable ASCII characters and spaces.
In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.





// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(String S) {
        // write your code in Java SE 8
        int length_total = S.length();
        int length_max = -1;
        int length_current = 0;
        
        int num_letters = 0;
        int num_digits = 0;
        boolean valid = true;
        
        for(int i = 0; i < length_total; ++i) {
            char c = S.charAt(i);
            if(c == ' ') {
                if(valid) {
                    if(num_letters%2 == 0 && num_digits%2 != 0) {
                        if(length_max < length_current) {
                            length_max = length_current;
                        }
                    }
                }
                valid = true;
                length_current = 0;
                num_letters = 0;
                num_digits = 0;
            }
            else {
                if(valid) {
                    if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
                        length_current++;
                        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
                            num_letters++;
                        }
                        else {
                            num_digits++;
                        }
                    }
                    else {
                        valid = false;
                    }
                }
            }
        }
        if(valid) {
            if(num_letters%2 == 0 && num_digits%2 != 0) {
                if(length_max < length_current) {
                    length_max = length_current;
                }
            }
        }
        
        return length_max;
    }
}