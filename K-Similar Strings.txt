K-Similar Strings
Hard

271

29

Add to List

Share
Strings A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K times so that the resulting string equals B.

Given two anagrams A and B, return the smallest K for which A and B are K-similar.

Example 1:

Input: A = "ab", B = "ba"
Output: 1
Example 2:

Input: A = "abc", B = "bca"
Output: 2
Example 3:

Input: A = "abac", B = "baca"
Output: 2
Example 4:

Input: A = "aabc", B = "abca"
Output: 2





class Solution {
    public int kSimilarity(String A, String B) {
        if(A != null && B != null && !A.equals(B) && A.length() == B.length()) {
            Set<String> visited = new HashSet<>();
            visited.add(A);
            char[] chars = A.toCharArray();
            
            Queue<char[]> queue = new LinkedList<>();
            queue.offer(chars);
            int steps = 0;
            boolean found = false;
            
            while(!found) {
                Queue<char[]> newQueue = new LinkedList<>();
                while(!queue.isEmpty()) {
                    chars = queue.poll();
                    int index = 0;
                    // find first character which does not equal
                    while(index < chars.length) {
                        if(chars[index] != B.charAt(index)) {
                            break;
                        }
                        index++;
                    }
                    for(int i = index + 1; i < chars.length; ++i) {
                        if(chars[i] == B.charAt(i) || chars[i] != B.charAt(index)) {
                            continue;
                        }
                        char[] newChars = Arrays.copyOf(chars, chars.length);
                        char tmp = newChars[index];
                        newChars[index] = newChars[i];
                        newChars[i] = tmp;
                        String str = new String(newChars);
                        if(str.equals(B)) {
                            found = true;
                        } else if(!visited.contains(str)) {
                            newQueue.offer(newChars);
                            visited.add(str);
                        }
                    }
                }
                queue = newQueue;
                steps++;
            }
            
            return steps;
        } else {
            return 0;
        }
    }
}