Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.




class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        
        List<Integer> results = new ArrayList<>();
        
        Map<Integer, Integer> counts = new HashMap<>();
        
        for(int num : nums) {
            if(counts.containsKey(num)) {
                int count = counts.get(num).intValue();
                count++;
                counts.put(num, count);
            } else {
                counts.put(num, 1);
            }
        }
        
        List<List<Integer>> records = new ArrayList<>();
        for(int i = 0; i < nums.length; ++i) {
            records.add(new ArrayList<>());
        }
        for (int key : counts.keySet()) {
            int frequency = counts.get(key);
            records.get(frequency - 1).add(key);
        }
        
        
        int tmp = k;
        for(int i = nums.length-1; i >= 0; --i) {
            List<Integer> integers = records.get(i);
            for(Integer integer : integers) {
                results.add(integer);
                tmp--;
                if(tmp == 0) {
                    break;
                }
            }
            if(tmp == 0) {
                break;
            }
        }
        
        return results;
    }
}
