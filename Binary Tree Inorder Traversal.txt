Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        
        if(root != null) {
            Stack<TreeNode> stack = new Stack<TreeNode>();
            
            TreeNode current = root;
            while(current != null) {
                stack.push(current);
                current = current.left;
            }
            
            while(!stack.empty()) {
                TreeNode tmp = stack.pop();
                list.add(Integer.valueOf(tmp.val));
                if(tmp.right != null) {
                    tmp = tmp.right;
                    while(tmp != null) {
                        stack.push(tmp);
                        tmp= tmp.left;
                    }
                }
            }
        }
        
        return list;
    }
}