Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)

Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)

Follow Up:
Can you do it in O(n) time?





class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        if(nums != null && nums.length > 0) {
            int length = nums.length;
            int[] sums = new int[length];
            sums[0] = nums[0];
            int max = (nums[0] == k)? 1 : 0;
            for(int i = 1; i < length; ++i) {
                sums[i] = sums[i-1] + nums[i];
                if(sums[i] == k) {
                    max = i + 1;
                }
                else if(nums[i] == k && max == 0) {
                    max = 1;
                }
            }
            
            Map<Integer, Integer> sums_indexes = new HashMap<Integer, Integer>();
            for(int i = 0; i < length; ++i) {
                if(sums_indexes.get(sums[i]) == null) {
                    sums_indexes.put(sums[i], i);
                }
            }
            
            for(int i = 0; i < length; ++i) {
                if(sums_indexes.containsKey(sums[i]-k)) {
                    max = Math.max(max, i-sums_indexes.get(sums[i]-k));
                }
            }
            return max;
        }
        else {
            return 0;
        }
    }
}