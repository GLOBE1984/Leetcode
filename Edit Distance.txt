Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character




public class Solution {
    public int minDistance(String word1, String word2) {
        int length1 = word1.length();
        int length2 = word2.length();
        
        if(length1 == 0 || length2 == 0) {
            if(length1 == 0 && length2 == 0) {
                return 0;
            }
            else {
                return Math.max(length1, length2);
            }
        }
        
        int[][] results = new int[length1][length2];
        char c1;
        char c2;
        for(int i = 0; i < length1; ++i) {
            c1 = word1.charAt(i);
            for(int j = 0; j < length2; ++j) {
                c2 = word2.charAt(j);
                if(i == 0 || j == 0) {
                    if(i == 0 && j == 0) {
                        results[i][j] = (c1 == c2)? 0 : 1;
                    }
                    else {
                        if(i == 0) {
                            if((j-1-i) < results[i][j-1]) {
                                results[i][j] = results[i][j-1] + ((c1 == c2)? 0 : 1);
                            }
                            else {
                                results[i][j] = results[i][j-1] + 1;
                            }
                        }
                        else {
                            if((i-1-j) < results[i-1][j]) {
                                results[i][j] = results[i-1][j] + ((c1 == c2)? 0 : 1);
                            }
                            else {
                                results[i][j] = results[i-1][j] + 1;
                            }
                        }
                    }
                }
                else {
                    int result = results[i-1][j-1] + ((c1 == c2)? 0 : 1);
                    result = Math.min(result, results[i-1][j] + 1);
                    result = Math.min(result, results[i][j-1] + 1);
                    
                    results[i][j] = result;
                }
            }
        }
        
        return results[length1-1][length2-1];
    }
}
