Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: ¡°The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).¡±

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || p == null || q == null) {
            return null;
        }
        
        TreeNodeWrapper ancestor = new TreeNodeWrapper();
        
        lowestCommonAncestor(root, p, q, ancestor);
        
        return ancestor.getNode();
    }
    
    private int lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q, TreeNodeWrapper ancestor) {
        if(root == p && root == q) {
            ancestor.setNode(p);
            return 3;
        }
        else if(root == p) {
            if(root.left != null) {
                if(lowestCommonAncestor(root.left, p, q, ancestor) == 2) {
                    ancestor.setNode(root);
                    return 3;
                }
            }
            if(root.right != null) {
                if(lowestCommonAncestor(root.right, p, q, ancestor) == 2) {
                    ancestor.setNode(root);
                    return 3;
                }
            }
            return 1;
        }
        else if(root == q) {
            if(root.left != null) {
                if(lowestCommonAncestor(root.left, p, q, ancestor) == 1) {
                    ancestor.setNode(root);
                    return 3;
                }
            }
            if(root.right != null) {
                if(lowestCommonAncestor(root.right, p, q, ancestor) == 1) {
                    ancestor.setNode(root);
                    return 3;
                }
            }
            return 2;
        }
        else {
            int result = 0;
            if(root.left != null) {
                result = result + lowestCommonAncestor(root.left, p, q, ancestor);
            }
            if(result == 3) {
                if(ancestor.getNode() == null) {
                    ancestor.setNode(root);
                }
                return 3;
            }
            if(root.right != null) {
                result = result + lowestCommonAncestor(root.right, p, q, ancestor);
            }
            if(result == 3) {
                if(ancestor.getNode() == null) {
                    ancestor.setNode(root);
                }
                return 3;
            }
            
            return result;
        }
    }
    
    private class TreeNodeWrapper {
        private TreeNode node;          
            
        public void setNode(TreeNode node) {
            this.node = node;
        }
        
        public TreeNode getNode() {
            return this.node;
        }
    }
}