A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

Note:
S will have length in range [1, 500].
S will consist of lowercase letters ('a' to 'z') only.





class Solution {
    public List<Integer> partitionLabels(String S) {
        List<Integer> result = new ArrayList<Integer>();
        
        if(S != null && S.length() > 0) {
            int length = S.length();
            Map<Character, Interval> map = new HashMap<Character, Interval>();
            for(int i = 0; i < length; ++i) {
                char c = S.charAt(i);
                Interval interval = map.get(c);
                if(interval == null) {
                    interval = new Interval();
                    interval.start = i;
                }
                interval.end = i;
                map.put(c, interval);
            }
            
            List<Interval> list = new ArrayList<Interval>();
            list.addAll(map.values());
            Collections.sort(list, new Comparator<Interval>() {
                public int compare(Interval i1, Interval i2) {
                    if(i1.start != i2.start) {
                        return i1.start - i2.start;
                    }
                    else {
                        return i1.end - i2.end;
                    }
                }
            });
            
            int size = list.size();
            int start = 0;
            int end = 0;
            for(int i = 0; i < size; ++i) {
                Interval interval = list.get(i);
                if(interval.start > end) {
                    result.add(interval.start - start);
                    start = interval.start;
                    end = interval.end;
                }
                else if(interval.end > end) {
                    end = interval.end;
                }
            }
            result.add(length - start);
        }
        
        return result;
    }
    
    private class Interval {
        public int start;
        public int end;
    }
}