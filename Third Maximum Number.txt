Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.





public class Solution {
    public int thirdMax(int[] nums) {
        if(nums == null || nums.length == 0) {
            return Integer.MAX_VALUE;
        }
        
        int length = nums.length;
        int max1 = Integer.MIN_VALUE;
        int max2 = max1;
        int max3 = max2;
        int counter = 0;
        
        for(int i = 0; i < length; ++i) {
            int val = nums[i];
            if(counter == 0) {
                max1 = val;
                counter++;
            }
            else if(counter == 1) {
                if(val != max1) {
                    if(val > max2) {
                        max2 = val;
                    }
                    if(val > max1) {
                        max2 = max1;
                        max1 = val;
                    }
                    counter++;
                }
                else {
                    continue;
                }
            }
            else if(counter == 2) {
                if(val != max1 && val != max2) {
                    if(val > max3) {
                        max3 = val;
                    }
                    if(val > max2) {
                        max3 = max2;
                        max2 = val;
                    }
                    if(val > max1) {
                        max2 = max1;
                        max1 = val;
                    }
                    counter++;
                }
                else {
                    continue;
                }
            }
            else if(max1 == val || max2 == val || max3 == val) {
                continue;
            }
            else {
                if(val > max3) {
                    max3 = val;
                }
                if(val > max2) {
                    max3 = max2;
                    max2 = val;
                }
                if(val > max1) {
                    max2 = max1;
                    max1 = val;
                }
                counter++;
            }
        }
        
        if(counter < 3) {
            return max1;
        }
        else {
            return max3;
        }
    }
}