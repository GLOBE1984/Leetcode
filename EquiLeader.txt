A non-empty zero-indexed array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ¡Ü S < N ? 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N ? 1] have leaders of the same value.

For example, given array A such that:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
we can find two equi leaders:

0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
The goal is to count the number of equi leaders.

Write a function:

class Solution { public int solution(int[] A); }
that, given a non-empty zero-indexed array A consisting of N integers, returns the number of equi leaders.

For example, given:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
the function should return 2, as explained above.

Assume that:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [?1,000,000,000..1,000,000,000].
Complexity:

expected worst-case time complexity is O(N);
expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.





// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        if(A.length == 0) {
            return -1;
        }
        
        int length = A.length;
        
        int size = 0;
        int candidate_index = -1;
        for(int i = 0; i < length; ++i) {
            if(candidate_index == -1) {
                candidate_index = i;
                size++;
            }
            else {
                if(A[candidate_index] != A[i]) {
                    size--;
                    if(size == 0) {
                        candidate_index = -1;
                    }
                }
                else {
                    size++;
                }
            }
        }
        
        if(candidate_index == -1) {
            return 0;
        }
        
        size = 0;
        for(int i = 0; i < length; ++i) {
            if(A[candidate_index] == A[i]) {
                size++;
            }
        }
        if(size <= length/2) {
            return 0;
        }
        
        int count = 0;
        int count_domi = 0;
        for(int i = 0; i < length; ++i) {
            if(A[candidate_index] == A[i]) {
                count_domi++;
            }
            if(count_domi > (i+1)/2 && (size-count_domi) > (length-1-i)/2) {
                count++;
            }
        }
        
        return count;
    }
}