Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges.

For example, given [0, 1, 3, 50, 75], lower = 0 and upper = 99, return ["2", "4->49", "51->74", "76->99"].





class Solution(object):
    def findMissingRanges(self, nums, lower, upper):
        """
        :type nums: List[int]
        :type lower: int
        :type upper: int
        :rtype: List[str]
        """
        res = []
        if lower > upper: 
            return res
        if not nums or len(nums) == 0: 
            if lower < upper: 
                res.append(str(lower) + "->" + str(upper))
            else: 
                res.append(str(lower))
            return res
        
        prev = lower

        for num in nums: 
            if prev < num and num <= upper: 
                if (num - prev) > 1: 
                    res.append(str(prev) + "->" + str((num-1)))
                else: 
                    res.append(str(prev))
                prev = num + 1
            elif prev == num and num <= upper:
                prev = num + 1
            elif num > upper:
                if pre < upper: 
                    res.append(str(prev) + "->" + str((upper)))
                break;
        
        if nums[-1] < upper: 
            if upper - nums[-1] > 1: 
                res.append(str((nums[-1]+1)) + "->" + str(upper))
            else: 
                res.append(str(upper))
        
        return res