Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null) {
            return true;
        }
        
        if(root.left == null && root.right == null) {
            return true;
        }
        
        if(!isBalanced(root.left) || !isBalanced(root.right)) {
            return false;
        }
        
        int left = getMaxHeight(root.left);
        int right = getMaxHeight(root.right);
        
        return (Math.abs(left-right) <= 1);
    }
    
    private int getMaxHeight(TreeNode node) {
        if(node == null) {
            return 0;
        }
        
        int left = getMaxHeight(node.left);
        int right = getMaxHeight(node.right);
        
        int height = Math.max(left, right) + 1;
        
        return height;
    }
}