Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder builder = new StringBuilder();
        serialize(root, builder);
        if(builder.length()-1 > 0) {
            builder.setLength(builder.length() - 1);
        }
        return builder.toString();
    }
    
    private void serialize(TreeNode root, StringBuilder builder) {
        if(root != null) {
            builder.append(root.val + ";");
            serialize(root.left, builder);
            serialize(root.right, builder);
        }
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(!data.isEmpty()) {
            String[] parts = data.split(";");
            return deserialize(parts, 0, parts.length-1);
        }
        else {
            return null;
        }
    }
    
    private TreeNode deserialize(String[] parts, int start, int end) {
        if(start > end) {
            return null;
        }
        
        int val = Integer.valueOf(parts[start]).intValue(); 
        TreeNode root = new TreeNode(val);
        int split = start + 1;
        while(split <= end) {
            int tmp = Integer.valueOf(parts[split]).intValue();
            if(tmp > val) {
                break;
            }
            else {
                split++;
            }
        }
        
        root.left = deserialize(parts, start+1, split-1);
        root.right = deserialize(parts, split, end);
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));