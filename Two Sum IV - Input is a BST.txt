Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
Example 2:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root != null) {
            List<TreeNode> list = new ArrayList<TreeNode>();
            serializeBST(root, list);
            int left = 0;
            int right = list.size() - 1;
            while(left < right) {
                if(list.get(left).val + list.get(right).val > k) {
                    right--;
                }
                else if(list.get(left).val + list.get(right).val < k) {
                    left++;
                }
                else {
                    return true;
                }
            }
            
            return false;
        }
        else {
            return false;
        }
    }
    
    private void serializeBST(TreeNode root, List<TreeNode> list) {
        if(root == null) {
            return;
        }
        
        serializeBST(root.left, list);
        list.add(root);
        serializeBST(root.right, list);
    }
}