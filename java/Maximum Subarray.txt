Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.





// Solution 1:
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums != null && nums.length != 0) {
            int max = Integer.MIN_VALUE;
            int index = 0;
            int length = nums.length;
            int sum = 0;
            while(index < length) {
                sum = sum + nums[index];
                if(sum > max) {
                    max = sum;
                }
                if(sum < 0) {
                    sum = 0;
                }
                index++;
            }
            return max;
        }
        else {
            return 0;
        }
    }
}


// Solution 2: 
// divide and conquer
class Solution {
    public int maxSubArray(int[] nums) {
        return divide(nums, 0, nums.length-1);
    }
    
    private int divide(int nums[], int low, int high) {  
        if(low == high)
            return nums[low];  
        if(low == high-1)  {
            return Math.max(nums[low]+nums[high], Math.max(nums[low], nums[high]));
        }
            
        int mid = (low + high)/2;  
        int lmax = divide(nums, low, mid-1);  
        int rmax = divide(nums, mid+1, high); 
        
        int mmax = nums[mid];  
        int tmp = mmax;  
        for(int i = mid-1; i >=low; i--){  
            tmp += nums[i];  
            if(tmp > mmax) {
                mmax = tmp; 
            }
        }  
        tmp = mmax;  
        for(int i = mid+1; i <= high; i++){  
            tmp += nums[i];  
            if(tmp > mmax) {
                mmax = tmp;
            }
        }  
  
        return Math.max(mmax, Math.max(lmax, rmax));   
    }
}


// Solution 3:
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums != null && nums.length > 0) {
            int[] prefix = new int[nums.length+1];
            prefix[0] = 0;
            for(int i = 1; i <= nums.length; ++i) {
                prefix[i] = prefix[i-1] + nums[i-1];
            }
            
            int max = Integer.MIN_VALUE;
            int min = prefix[0];
            for(int i = 1; i <= nums.length; ++i) {
                max = Math.max(max, prefix[i]-min);
                min = Math.min(min, prefix[i]);
            }
            
            return max;
        } else {
            return 0;
        }
    }        
}


// Solution 4: 
// Kadane algorithm
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums != null && nums.length > 0) {
            int currentMax = nums[0];
            int allMax = nums[0];
            
            for(int i = 1; i < nums.length; ++i) {
                int num = nums[i];
                currentMax = Math.max(num, currentMax+num);
                allMax = Math.max(allMax, currentMax);
            }
            
            return allMax;
        } else {
            return 0;
        }
    }        
}