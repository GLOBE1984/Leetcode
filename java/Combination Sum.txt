Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 




class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(candidates != null && candidates.length > 0) {
            Arrays.sort(candidates);
                        
            Node node = new Node(0, 0);
            dfs(node, candidates, target, results);
        }
        
        return results;
    }
    
    private void dfs(Node node, int[] candidates, int target, List<List<Integer>> results) {
        if(node.getSum() == target) {
            results.add(node.getPath());
            return;
        }
        
        for(int candidate : candidates) {
            if(candidate >= node.getMin() && candidate+node.getSum() <= target) {
                Node next = new Node(candidate+node.getSum(), candidate, node.getPath());
                next.getPath().add(candidate);
                dfs(next, candidates, target, results);
            }
        }
    }
    
    private class Node {
        
        private final List<Integer> path;
        
        private final int sum;
        
        private final int min;
                
        public Node(int sum, int min) {
            this(sum, min, new ArrayList<>());
        }
        
        public Node(int sum, int min, List<Integer> path) {
            this.sum = sum;
            this.min = min;
            this.path = new ArrayList<>(path);
        }
        
        public List<Integer> getPath() {
            return this.path;
        }
        
        public int getSum() {
            return this.sum;
        }
        
        public int getMin() {
            return this.min;
        }
        
    }
}
