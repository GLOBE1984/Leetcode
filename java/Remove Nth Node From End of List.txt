Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null || head.next == null) {
            return null;
        }

        ListNode faster = head;
        ListNode slower = head;

        for(int i = 0; i < n; i++) {
            faster = faster.next;
        }
        
        
        if(faster == null){
            head = head.next;
            return head;
        }
        
        while(faster.next != null){
            slower = slower.next;
            faster = faster.next;
        }
        
        slower.next = slower.next.next;
        
        return head;
    }
}