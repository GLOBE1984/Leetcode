Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647].

Some examples:

"1 + 1" = 2
" 6-4 / 2 " = 4
"2*(5+5*2)/3+(6/2+8)" = 21
"(2+6* 3+5- (3*14/7+2)*5)+3"=-12
 

Note: Do not use the eval built-in library function.




// Solution 1:
class Solution {
    public int calculate(String s) {
        if(s != null && s.length() > 0) {
            s = s.trim();
            long res = 0;
            long currentRes = 0;
            long num = 0;
            char op = '+';
            
            for(int i = 0; i < s.length(); ++i) {
                char c = s.charAt(i);
                if(c >= '0' && c <= '9') {
                    num = num * 10 + (c - '0');
                } else if(c == '(') {
                    int j = i, cnt = 0;
                    for (; i < s.length(); ++i) {
                        if (s.charAt(i) == '(') {
                            ++cnt;
                        }
                        if (s.charAt(i) == ')') {
                            --cnt;
                        }
                        if (cnt == 0) {
                            break;
                        }
                    }
                    num = calculate(s.substring(j + 1, i));
                }
                
                if(c == '+' || c == '-' || c == '*' || c == '/' || i == s.length() - 1) {
                    switch (op) {
                        case '+': currentRes += num; break;
                        case '-': currentRes -= num; break;
                        case '*': currentRes *= num; break;
                        case '/': currentRes /= num; break;
                    }
                    if (c == '+' || c == '-' || i == s.length() - 1) {
                        res += currentRes;
                        currentRes = 0;
                    }
                    op = c;
                    num = 0;
                }
            }
            
            return (int)res;
        } else {
            return 0;
        }
    }
}


// Solution 2: 
class Solution {
    public int calculate(String s) {
        if(s != null && s.length() > 0) {
            Result result = calculate(s, 0);
            return result.result;
        } else {
            return 0;
        }
    }
    
    private Result calculate(String s, int start) {
        int num = 0;
        int result = 0;
        int signed = 1;
        int multi = 1;
        char operator = 'a';
        int index = start;
            
        while(index < s.length()) {
            char c = s.charAt(index);
            if(Character.isDigit(c)) {
                num = 10 * num + (c - '0');
            } else {
                if(c == '+' || c == '-') {
                    if(operator == '+') {
                        result = result + num;
                    } else if(operator == '-') {
                        result = result - num;
                    } else if(operator == '*') {
                        multi = multi * num;
                        result = result + signed * multi;
                        multi = 1;
                    } else if(operator == '/') {
                        multi = multi / num;
                        result = result + signed * multi;
                        multi = 1;
                    } else {
                        result = num;
                    }
                    num = 0;
                    operator = c;
                } else if(c == '*' || c == '/') {
                    if(operator == '+' || operator == '-') {
                        multi = num;
                        signed = operator == '+' ? 1 : -1;
                    } else if(operator == '*') {
                        multi = multi * num;
                    } else if(operator == '/') {
                        multi = multi / num;
                    } else {
                        multi = num;
                    }
                    num = 0;
                    operator = c;
                } else if(c == '(') {
                    Result braceResult = calculate(s, index+1);
                    index = braceResult.index;
                    num = braceResult.result;
                } else if(c == ')') {
                    break;
                }
            }
            index++;
        }
            
        if(operator == '+') {
            result = result + num;
        } else if(operator == '-') {
            result = result - num;
        } else if(operator == '*') {
            multi = multi * num;
            result = result + signed * multi;
            multi = 1;
        } else if(operator == '/') {
            multi = multi / num;
            result = result + signed * multi;
            multi = 1;
        } else {
            result = num;
        }
            
        return new Result(result, index);
    }
    
    private class Result {
        private int result;
        private int index;
        
        private Result(int result, int index) {
            this.result = result;
            this.index = index;
        }
    }
}