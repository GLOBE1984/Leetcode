Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.

You may assume the array's length is at most 10,000.

Example:

Input:
[1,2,3]

Output:
2

Explanation:
Only two moves are needed (remember each move increments or decrements one element):

[1,2,3]  =>  [2,2,3]  =>  [2,2,2]





class Solution {
    public int minMoves2(int[] nums) {
        if(nums != null && nums.length > 0) {
            int length = nums.length;
            PriorityQueue<Integer> queue_min = new PriorityQueue<Integer>(length/2+1, new Comparator<Integer>(){
                public int compare(Integer a, Integer b) {
                    return b.compareTo(a);
                }
            });
            PriorityQueue<Integer> queue_max = new PriorityQueue<Integer>(length/2+1, new Comparator<Integer>(){
                public int compare(Integer a, Integer b) {
                    return a.compareTo(b);
                }
            });
            for(int num : nums) {
                if(!queue_min.isEmpty() && !queue_max.isEmpty()) {
                    int max_min = queue_min.peek();
                    if(num <= max_min) {
                        queue_min.offer(num);
                        if(queue_min.size()-queue_max.size() > 1) {
                            queue_max.offer(queue_min.poll());
                        }
                    }
                    else {
                        queue_max.offer(num);
                        if(queue_max.size() > queue_min.size()) {
                            queue_min.offer(queue_max.poll());
                        }
                    }
                }
                else if(queue_min.isEmpty() && queue_max.isEmpty()) {
                    queue_min.offer(num);
                }
                else if(!queue_min.isEmpty()) {
                    queue_min.offer(num);
                    queue_max.offer(queue_min.poll());
                }
                else {
                    queue_max.offer(num);
                    queue_min.offer(queue_max.poll());
                }
            }
            int mid = queue_min.poll().intValue();
            
            int count = 0;
            for(int i = 0; i < length; ++i) {
                count = count + Math.abs(mid - nums[i]);
            }
            return count;
        }
        else {
            return -1;
        }
    }
}