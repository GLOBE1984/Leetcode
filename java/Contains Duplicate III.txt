Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.




public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(nums == null || nums.length == 0 || k == 0 || t < 0) {
            return false;
        }
        
        SortedSet<Long> set = new TreeSet<Long>();
 
	    for (int j = 0; j < nums.length; j++) {
		    long leftBoundary = (long) nums[j] - t;
		    long rightBoundary = (long) nums[j] + t + 1;
		    SortedSet<Long> subSet = set.subSet(leftBoundary, rightBoundary);
 
		    if (!subSet.isEmpty()) {
		        return true;
		    }

		    set.add((long) nums[j]);
 
		    if (j >= k) {
			    set.remove((long) nums[j - k]);
		    }
	    }
 
	    return false;
    }
}