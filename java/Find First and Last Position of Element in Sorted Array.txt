Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109





class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length == 0) {
            return new int[]{-1, -1};
        }
        
        return searchRange(nums, target, 0, nums.length-1);
    }
    
    private int[] searchRange(int[] nums, int target, int left, int right) {
        if(left == right) {
            return nums[left] == target ? new int[]{left, left} : new int[]{-1, -1};
        }
        
        int mid = (left + right) / 2;
        
        if(nums[mid] < target) {
            return searchRange(nums, target, mid+1, right);
        } else if(nums[mid] > target) {
            return searchRange(nums, target, left, mid);
        } else {
            int[] part1 = searchRange(nums, target, left, mid);
            int[] part2 = searchRange(nums, target, mid+1, right);
            
            int[] result = new int[2];
            result[0] = part1[0] == -1 ? mid : part1[0];
            result[1] = part2[1] == -1 ? mid : part2[1];
            
            return result;
        }
    }
}