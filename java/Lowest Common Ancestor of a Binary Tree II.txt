Given the root of a binary tree, return the lowest common ancestor (LCA) of two given nodes, p and q. If either node p or q does not exist in the tree, return null. All values of the nodes in the tree are unique.

According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a binary tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)". A descendant of a node x is a node y that is on the path from node x to some leaf node.

 

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.

Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
Output: null
Explanation: Node 10 does not exist in the tree, so return null.
 

Constraints:
The number of nodes in the tree is in the range [1, 104].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
 

Follow up: Can you find the LCA traversing the tree, without checking nodes existence?





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root != null) {
            Result result = findLCA(root, p, q);
            if(result.isFound) {
                return result.node;
            } else {
                return null;
            }
        } else {
            return null;
        }
    }
    
    private Result findLCA(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) {
            return new Result();
        }
        
        Result leftResult = findLCA(root.left, p, q);
        Result rightResult = findLCA(root.right, p, q);
        
        if(leftResult.isFound || rightResult.isFound) {
            return leftResult.isFound ? leftResult : rightResult;
        }
        
        if(root != p && root != q) {
            if(leftResult.node != null && rightResult.node != null) {
                return new Result(root, true); 
            } else if(leftResult.node != null || rightResult.node != null) {
                return leftResult.node != null ? leftResult : rightResult;
            } else {
                return new Result();
            }
        } else {
            if(leftResult.node != null || rightResult.node != null) {
                return new Result(root, true);
            } else {
                return new Result(root, false);
            }
        }
    }
    
    private class Result {
        private TreeNode node;
        private boolean isFound;
        
        private Result(TreeNode node, boolean isFound) {
            this.node = node;
            this.isFound = isFound;
        }
        
        private Result() {
            this(null, false);
        }
    }
}