Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.





class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix != null && matrix.length > 0 && matrix[0].length > 0) {
            return searchMatrix(matrix, 0, matrix.length-1, 0, matrix[0].length-1, target);
        } else {
            return false;
        }
    }
    
    private boolean searchMatrix(int[][] matrix, int minRow, int maxRow, int minCol, int maxCol, int target) {
        if(minRow == maxRow && minCol == maxCol) {
            return matrix[minRow][minCol] == target;
        }
        
        if(minRow > maxRow || minCol > maxCol) {
	    return false;
	}
        
        int midRow = (minRow + maxRow) / 2;
        int midCol = (minCol + maxCol) / 2;
        
        if(matrix[midRow][midCol] > target) {
            return searchMatrix(matrix, minRow, midRow, minCol, midCol, target) || searchMatrix(matrix, minRow, midRow, midCol+1, maxCol, target) || searchMatrix(matrix, midRow+1, maxRow, minCol, midCol, target);
        } else if(matrix[midRow][midCol] < target) {
            return searchMatrix(matrix, midRow+1, maxRow, midCol+1, maxCol, target) || searchMatrix(matrix, minRow, midRow, midCol+1, maxCol, target) || searchMatrix(matrix, midRow+1, maxRow, minCol, midCol, target);
        } else {
            return true;
        }
        
    }
}