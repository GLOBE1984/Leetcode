Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).




class Solution {
    public int threeSumClosest(int[] nums, int target) {
        if(nums != null && nums.length > 0) {
            int diff = Integer.MAX_VALUE;
            int sum = 0;
            Arrays.sort(nums);
            
            for(int i = 0; i < nums.length; ++i) {
                int left = i + 1;
                int right = nums.length - 1;
                boolean foundEqual = false;
                
                while(left < right) {
                    if(nums[i]+nums[left]+nums[right] < target) {
                        if(Math.abs(target-nums[i]-nums[left]-nums[right]) < diff) {
                            diff = Math.abs(target-nums[i]-nums[left]-nums[right]);
                            sum = nums[i] + nums[left] + nums[right];
                        }
                        left++;
                    } else if(nums[i]+nums[left]+nums[right] > target) {
                        if(Math.abs(target-nums[i]-nums[left]-nums[right]) < diff) {
                            diff = Math.abs(target-nums[i]-nums[left]-nums[right]);
                            sum = nums[i] + nums[left] + nums[right];
                        }
                        right--;
                    } else {
                        sum = target;
                        foundEqual = true;
                        break;
                    }
                }
                
                if(foundEqual) {
                    break;
                }
            }
            
            return sum;
        } else {
            return Integer.MIN_VALUE;
        }
    }
}