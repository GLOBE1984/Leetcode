Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].

Example 2:
Given the list [1,[4,[6]]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].




// Solution 1: 
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    Iterator<Integer> iter;
    
    public NestedIterator(List<NestedInteger> nestedList) {
        List<Integer> list = flatten(nestedList);
        this.iter = list.iterator();
    }

    @Override
    public Integer next() {
        return this.iter.next();
    }

    @Override
    public boolean hasNext() {
        return this.iter.hasNext();
    }
    
    private List<Integer> flatten(List<NestedInteger> nestedList) {
        List<Integer> results = new ArrayList<Integer>();
        
        int size = nestedList.size();
        for(int i = 0; i < size; ++i) {
            flatten(nestedList.get(i), results);
        }
        
        return results;
    }
    
    private void flatten(NestedInteger nestedInteger, List<Integer> results) {
        if(nestedInteger.isInteger()) {
            results.add(nestedInteger.getInteger());
        } else {
            List<NestedInteger> nestedList = nestedInteger.getList();
            int size = nestedList.size();
            for(int i = 0; i < size; ++i) {
                flatten(nestedList.get(i), results);
            }
        }
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */


// Solution 2: 
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return empty list if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {

    private Stack<Iterator<NestedInteger>> stack;
    private NestedInteger current;
    
    public NestedIterator(List<NestedInteger> nestedList) {
        this.stack = new Stack<>();
        this.stack.push(nestedList.iterator());
        this.current = null;
    }

    @Override
    public Integer next() {
        return this.current.getInteger();    
    }

    @Override
    public boolean hasNext() {
        Iterator<NestedInteger> iterator = this.stack.peek();
        while(!iterator.hasNext()) {
            this.stack.pop();
            if(this.stack.empty()) {
                return false; 
            }
            iterator = this.stack.peek();
        }
        
        NestedInteger nestedInteger = iterator.next();
        while(!nestedInteger.isInteger()) {
            if(!nestedInteger.getList().isEmpty()) {
                iterator = nestedInteger.getList().iterator();
                nestedInteger = iterator.next();
                this.stack.push(iterator);
            } else {
                if(!iterator.hasNext()) {
                    while(!iterator.hasNext()) {
                        this.stack.pop();
                        if(this.stack.empty()) {
                            return false; 
                        }
                        iterator = this.stack.peek();
                    }
                }
                nestedInteger = iterator.next();
            }
        }
        
        this.current = nestedInteger;
        return true;
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */