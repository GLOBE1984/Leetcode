Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)





class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums != null && nums.length > 1) {
            int[] results = new int[nums.length];
            results[0] = 1;
            
            int prefix = 1;
            int index = 1;
            while(index < nums.length) {
                prefix *= nums[index-1];
                results[index] = prefix;
                index++;
            }
            
            int suffix = 1;
            index = nums.length - 2;
            while(index >= 0) {
                suffix *= nums[index+1];
                results[index] *= suffix;
                index--;
            }
            
            return results;
        } else if(nums != null && nums.length == 1) {
            return new int[]{0};
        } else {
            return new int[0];
        }
    }
}