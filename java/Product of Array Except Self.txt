Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)





public class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums == null) {
            return null;
        }
        
        int length = nums.length;
        int[] results = new int[length];
        results[0] = 1;
        results[length-1] = 1;
        
        int i = 1;
        int j = length - 2;
        while(i < j) {
            results[i] = results[i-1] * nums[i-1];
            results[j] = results[j+1] * nums[j+1];
            
            i++;
            j--;
        }
        
        int product = 1;
        if(i == j) {
            results[i] = results[i-1] * nums[i-1] * results[i+1] * nums[i+1];
            product = nums[i];
        }
        i--;
        j++;
        while(i >= 0) {
            int tmp = results[i];
            results[i] = results[i] * results[length-1-i] * product * nums[length-1-i];
            results[length-1-i] = tmp * results[length-1-i] * product * nums[i];
            
            product = product * nums[i] * nums[length-1-i];
            
            i--;
            j++;
        }
        
        return results;
    }
}