Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

You may assume that the given expression is always valid.

Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23
Note: Do not use the eval built-in library function.





// Solution 1:
class Solution {
    public int calculate(String s) {        
        Stack<Integer> stack = new Stack<>();  
        int res = 0;
        int sign = 1;
        for (int i = 0; i < s.length(); ++i) {  
            char c = s.charAt(i);  
            if (Character.isDigit(c)) {  
                int num = c - '0';  
                int j = i + 1;  
                while (j < s.length() && Character.isDigit(s.charAt(j))) {  
                    num = 10 * num + (s.charAt(j) - '0');  
                    j++;  
                }  
                res = res + sign * num;  
                i = j - 1;  
            } else if (c == '+') {  
                sign = 1;  
            } else if (c == '(') {
                stack.push(res);
                stack.push(sign);
                res = 0;
                sign = 1;
            } else if (c == '-') {  
                sign = -1;  
            } else if (c == ')') {  
                res = res * stack.pop().intValue();
                res += stack.pop().intValue();
            }  
        }  
        return res;
    }
}


// Solution 2: 
class Solution {
    public int calculate(String s) {
        if(s != null && s.length() > 0) {
            Result result = calculate(s, 0);
            return result.result;
        } else {
            return 0;
        }
    }
    
    private Result calculate(String s, int start) {
        int num = 0;
        int result = 0;
        int signed = 1;
        int multi = 1;
        char operator = 'a';
        int index = start;
            
        while(index < s.length()) {
            char c = s.charAt(index);
            if(Character.isDigit(c)) {
                num = 10 * num + (c - '0');
            } else {
                if(c == '+' || c == '-') {
                    if(operator == '+') {
                        result = result + num;
                    } else if(operator == '-') {
                        result = result - num;
                    } else {
                        result = num;
                    }
                    num = 0;
                    operator = c;
                } else if(c == '(') {
                    Result braceResult = calculate(s, index+1);
                    index = braceResult.index;
                    num = braceResult.result;
                } else if(c == ')') {
                    break;
                }
            }
            index++;
        }
            
        if(operator == '+') {
            result = result + num;
        } else if(operator == '-') {
            result = result - num;
        } else {
            result = num;
        }
            
        return new Result(result, index);
    }
    
    private class Result {
        private int result;
        private int index;
        
        private Result(int result, int index) {
            this.result = result;
            this.index = index;
        }
    }
}