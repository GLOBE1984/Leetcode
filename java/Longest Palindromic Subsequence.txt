Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:
"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".

Example 2:
Input:
"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".





public class Solution {
    /*
     * dp[i][j] is the longest palindromic subsequence in s[i...j] 
     * dp[i][j] = dp[i + 1][j - 1] + 2 if s[i] == s[j]
     * dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])    otherwise
     */
    public int longestPalindromeSubseq(String s) {
        int length = s.length();
        int[][] dp = new int[length][length];
        for (int i = length - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < length; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } 
                else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][length - 1];
    }
}

// better solution
public int longestPalindromeSubseq(String s) {
    int length = s.length();
    int result = 0;
    int[] dp = new int[length];
    for(int i = 0; i < length; ++i) {
        dp[i] = 1;
    }
     
    for(int i = length-1; i >= 0; --i) {
        int len = 0;
        for(int j = i + 1; j < length; ++j) {
            int t = dp[j];
            if(s.charAt(i) == s.charAt(j)) {
                dp[j] = len + 2;
            }
            len = Math.max(len, t);
        }
    }
        
    for(int i = 0; i < length; ++i) {
        result = Math.max(result, dp[i]);
    }
        
    return result;
}