Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head != null && head.next != null) {
            ListNode virtual = new ListNode();
            virtual.next = head;
            ListNode anchor = virtual;
            ListNode prev = head;
            ListNode current = head.next;
            
            int index = 1;
            while(index < n) {
                if(index < m) {
                    anchor = prev;
                    prev = current;
                    current = current.next;
                } else {
                    ListNode tmp = current.next;
                    current.next = prev;
                    prev = current;
                    current = tmp;
                }
                
                index++;
            }
            
            ListNode node = anchor.next;
            anchor.next = prev;
            node.next = current;
            
            return virtual.next;
        } else if(head != null) {
            return head;
        } else {
            return null;
        }
    }
}