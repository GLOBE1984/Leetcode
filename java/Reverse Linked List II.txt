Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head != null && head.next != null && m < n) {
            ListNode prev = null;
            ListNode current = head;
            int i = 1;
            while(i < m) {
                prev = current;
                current = current.next;
                i++;
            }
            
            // prev points to the node before m, and current points to the node m
            ListNode start = prev;
            ListNode first = current;
            prev = current;
            current = current.next;
            i++;
            while(i <= n) {
                ListNode next = current.next;
                current.next = prev;
                prev = current;
                current = next;
                i++;
            }
            
            // prev points to the node n, and current points to the node after n
            if(start != null) {
                start.next = prev;
            }
            first.next = current;
            
            // if the first node is not reversed, return previous head; otherwise, return the node n
            if(m > 1) {
                return head;
            } else {
                return prev;
            }
        } else {
            return head;
        }
    }
}