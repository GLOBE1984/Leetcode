We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

 

Example 1:
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

Example 2:
Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.

Example 3:
Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6
 

Constraints:

1 <= startTime.length == endTime.length == profit.length <= 5 * 104
1 <= startTime[i] < endTime[i] <= 109
1 <= profit[i] <= 104





class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        if(startTime != null && startTime.length > 0 && endTime != null && endTime.length > 0 && profit != null && profit.length > 0) {
            Job[] jobs = new Job[startTime.length];
            
            for(int i = 0; i < startTime.length; ++i) {
                Job job = new Job();
                job.start = startTime[i];
                job.end = endTime[i];
                job.profit = profit[i];
                jobs[i] = job;
            }
            
            Arrays.sort(jobs, new Comparator<Job>(){
                public int compare(Job j1, Job j2) {
                    if(j1.start != j2.start) {
                        return j1.start - j2.start;
                    } else if(j1.end != j2.end) {
                        return j1.end - j2.end;
                    } else {
                        return j2.profit - j1.profit;
                    }
                }
            });
            
            Map<Integer, Integer> records = new HashMap<>();            
            return jobScheduling(jobs, 0, 0, records);
        } else {
            return 0;
        }
    }
    
    private int jobScheduling(Job[] jobs, int index, int time, Map<Integer, Integer> records) {
        if(index == jobs.length) {
            return 0;
        }
        
        if(records.containsKey(time)) {
            return records.get(time).intValue();
        }
        
        int first = index;
        while(first < jobs.length && jobs[first].start < time) {
            first++;
        }
        
        int max = 0;
        for(int i = first; i < jobs.length && jobs[i].start < jobs[first].end; ++i) {
            if(jobs[i].start >= time) {
                max = Math.max(max, jobs[i].profit+jobScheduling(jobs, i+1, jobs[i].end, records));
            }
        }
        records.put(time, max);
        return max;
    }
    
    private class Job {
        private int start;
        private int end;
        private int profit;
    }
}