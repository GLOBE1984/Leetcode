You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 != null && l2 != null) {
            Stack<Integer> stack1 = new Stack<>();
            ListNode current = l1;
            while(current != null) {
                stack1.push(current.val);
                current = current.next;
            }
            Stack<Integer> stack2 = new Stack<>();
            current = l2;
            while(current != null) {
                stack2.push(current.val);
                current = current.next;
            }
            
            ListNode previous = null;
            int carry = 0;
            while(!stack1.empty() || !stack2.empty()) {
                int i1 = stack1.empty() ? 0 : stack1.pop();
                int i2 = stack2.empty() ? 0 : stack2.pop();
                int sum = i1 + i2 + carry;
                if(sum >= 10) {
                    sum = sum - 10;
                    carry = 1;
                } else {
                    carry = 0;
                }
                current = new ListNode(sum);
                current.next = previous;
                previous = current;
            }
            if(carry == 1) {
                current = new ListNode(1);
                current.next = previous;
            }
            
            return current;
        } else {
            return null;
        }
    }
}