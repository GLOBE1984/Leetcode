Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.





class Solution {
    public int search(int[] nums, int target) {
        int pivotIndex = 0;
        for(int i = 1; i < nums.length; ++i) {
            if(nums[i] < nums[i-1]) {
                pivotIndex = i;
                break;
            }
        }
        
        if(pivotIndex == 0) {
            return binarySearch(nums, target, 0, nums.length-1);
        } else {
            return Math.max(binarySearch(nums, target, 0, pivotIndex-1), 
                        binarySearch(nums, target, pivotIndex, nums.length-1));
        }
        
    }
    
    private int binarySearch(int[] nums, int target, int start, int end) {
        if(start == end) {
            return nums[start] == target ? start : -1;
        }
        
        int mid = (start + end)/2;
        
        if(nums[mid] > target) {
            return binarySearch(nums, target, start, mid);
        } else if(nums[mid] < target) {
            return binarySearch(nums, target, mid+1, end);
        } else {
            return mid;
        }
    }
}