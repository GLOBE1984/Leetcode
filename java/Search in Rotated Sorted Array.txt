Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.





class Solution {
    public int search(int[] nums, int target) {
        if(nums != null && nums.length > 0) {
            return search(nums, target, 0, nums.length-1);
        }
        else {
            return -1;
        }
    }
    
    private int search(int[] nums, int target, int start, int end) {
        if(start == end) {
            if(nums[start] == target) {
                return start;
            }
            else {
                return -1;
            }
        }
        
        int mid = (start + end)/2;
        if(nums[mid] > target) {
            int result = search(nums, target, start, mid);
            if(result == -1 && (nums[mid] < nums[start] || nums[mid] > nums[end])) {
                result = Math.max(result, search(nums, target, mid+1, end));
            }
            return result;
        }
        else if(nums[mid] < target) {
            int result = search(nums, target, mid+1, end);
            if(result == -1 && (nums[mid] < nums[start] || nums[mid] > nums[end])) {
                result = Math.max(result, search(nums, target, start, mid));
            }
            return result;
        }
        else {
            return mid;
        }
    }
}