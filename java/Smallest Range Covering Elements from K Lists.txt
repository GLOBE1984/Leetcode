You have k lists of sorted integers in ascending order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a,b] is smaller than range [c,d] if b-a < d-c or a < c if b-a == d-c.

 

Example 1:

Input: [[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
 

Note:

The given list may contain duplicates, so ascending order means >= here.
1 <= k <= 3500
-105 <= value of elements <= 105.





// like sliding window
class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        if(nums != null && nums.size() > 0) {
            PriorityQueue<Span> pq = new PriorityQueue<>((a, b) -> (a.x - b.x));
            int size = nums.size();
            int[] idxArr = new int[size];
            int max = 0;
            for (int i = 0; i < size; i++) {
                int num = nums.get(i).get(0);
                pq.add(new Span(num, i));
                max = Math.max(max, num);
            }
            int start = -1, end = -1, gap = Integer.MAX_VALUE;
            while (pq.size() == size) {
                Span first = pq.poll();
                int min = first.x, idx = first.y;
                if (max - min < gap) {
                    gap = max - min;
                    start = min;
                    end = max;
                }
                if (++idxArr[idx] < nums.get(idx).size()) {
                    first.x = nums.get(idx).get(idxArr[idx]);
                    pq.add(first);
                    max = Math.max(max, first.x);
                }
            }
            return new int[]{start, end};
        } else {
            return new int[0];
        }
    }
    
    private class Span {
        private int x;
        private int y;
        
        private Span(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}