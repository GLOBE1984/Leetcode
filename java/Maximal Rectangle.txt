Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 6.





class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix != null && matrix.length > 0 && matrix[0].length > 0) {
            int[][] accumulated = new int[matrix.length][matrix[0].length];
            int count = 0;
            // Create the histogram to count the continuous one in the same row in the previous columns
            for(int i = 0; i < accumulated.length; ++i) {
                count = 0;
                for(int j = 0; j < accumulated[0].length; ++j) {
                    if(matrix[i][j] == '1') {
                        count++;
                        accumulated[i][j] = count;
                    } else {
                        count = 0;
                    }
                }
            }
            
            int max = 0;
            for(int i = 0; i < accumulated[0].length; ++i) {
                max = Math.max(max, maximalRectangle(accumulated, i));
            }
            return max;
        } else {
            return 0;
        }
    }
    
    private int maximalRectangle(int[][] accumulated, int col) {
        int max = 0;
        Stack<Integer> stack = new Stack<>();
        
        for(int i = 0; i < accumulated.length; ++i) {
            while(!stack.empty() && accumulated[stack.peek().intValue()][col] >= accumulated[i][col]) {
                int index = stack.pop();
                max = Math.max(max, accumulated[index][col]*(stack.empty() ? i : i-stack.peek().intValue()-1));
            }
            stack.push(i);
        }
        
        while(!stack.empty()) {
            int index = stack.pop();
            max = Math.max(max, accumulated[index][col]*(stack.empty() ? accumulated.length : accumulated.length-stack.peek().intValue()-1));
        }
        
        return max;
    }
}