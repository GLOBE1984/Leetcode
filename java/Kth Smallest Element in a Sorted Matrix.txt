Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.
Note: 
You may assume k is always valid, 1 ¡Ü k ¡Ü n2




class Solution {
    
    public int kthSmallest(int[][] matrix, int k) {
        if(matrix != null && matrix.length > 0 && matrix[0].length > 0) {
            return kthSmallest(matrix, matrix[0][0], matrix[matrix.length-1][matrix[0].length-1], k);
        } else {
            return -1;
        }
    }
    
    private int kthSmallest(int[][] matrix, int start, int end, int k) {
        if(start == end) {
            return start;
        }
        
        int mid = start + (end - start) / 2;
        
        int leftCount = 0;
        int leftLargest = start;
        int rightSmallest = end;
        
        int row = matrix.length - 1;
        int col = 0;
        while(row >= 0 && col < matrix[0].length) {
            if(matrix[row][col] <= mid) {
                leftCount = leftCount + row + 1;
                leftLargest = Math.max(leftLargest, matrix[row][col]);
                col++;
            } else {
                rightSmallest = Math.min(rightSmallest, matrix[row][col]);
                row--;
            }
        }
        
        if(leftCount < k) {
            return kthSmallest(matrix, rightSmallest, end, k);
        } else if(leftCount > k) {
            return kthSmallest(matrix, start, leftLargest, k);
        } else {
            return leftLargest;
        }
    }
    
}