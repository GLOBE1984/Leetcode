Given a string s, return the length of the longest repeating substrings. If no repeating substring exists, return 0.

 

Example 1:
Input: s = "abcd"
Output: 0
Explanation: There is no repeating substring.

Example 2:
Input: s = "abbaba"
Output: 2
Explanation: The longest repeating substrings are "ab" and "ba", each of which occurs twice.

Example 3:
Input: s = "aabcaabdaab"
Output: 3
Explanation: The longest repeating substring is "aab", which occurs 3 times.
 

Constraints:
1 <= s.length <= 2000
s consists of lowercase English letters.





class Solution {
    public int longestRepeatingSubstring(String s) {
        if(s != null && s.length() > 0) {
            int left = 1;
            int right = s.length();
            
            while(left < right) {
                int length = (left + right) / 2;
                if(binarySearch(s, length) != -1) {
                    left = length + 1;
                } else {
                    right = length;
                }
            }
            
            return left - 1;
        } else {
            return 0;
        }
    }
    
    private int binarySearch(String s, int length) {
        Set<String> visited = new HashSet<>();
        
        for(int start = 0; start <= s.length()-length; ++start) {
            String tmp = s.substring(start, start+length);
            if(visited.contains(tmp)) {
                return start;
            }
            visited.add(tmp);
        }
        
        return -1;
    }
}