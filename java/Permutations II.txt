Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10





// Solution 1: 
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(nums.length > 0) {
            permuteUnique(nums, new HashSet<>(), new ArrayList<>(), results);
        }
        
        return results;
    }
    
    private void permuteUnique(int[] nums, Set<Integer> indexRecords, List<Integer> permutation, List<List<Integer>> results) {
        if(permutation.size() == nums.length) {
            results.add(permutation);
        }
        
        Set<Integer> numRecords = new HashSet<>();
        for(int i = 0; i < nums.length; ++i) {
            if(!indexRecords.contains(i) && !numRecords.contains(nums[i])) {
                indexRecords.add(i);
                List<Integer> tmp = new ArrayList<>(permutation);
                tmp.add(nums[i]);
                permuteUnique(nums, indexRecords, tmp, results);
                indexRecords.remove(i);
                numRecords.add(nums[i]);
            }
        }
    }
}


// Solution 2: 
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(nums.length > 0) {
            Node node = new Node();
            dfs(nums, node, results);
        }
        
        return results;
    }
    
    private void dfs(int[] nums, Node node, List<List<Integer>> results) {
        if(node.list.size() == nums.length) {
            results.add(node.list);
        } else {
            Set<Integer> set = new HashSet<>();
            for(int i = 0; i < nums.length; ++i) {
                if(!set.contains(nums[i]) && !node.indexes.contains(i)) {
                    Node copy = new Node(node);
                    copy.list.add(nums[i]);
                    copy.indexes.add(i);
                    dfs(nums, copy, results);
                    set.add(nums[i]);
                }
            }
        }
    }
    
    private class Node {
        private List<Integer> list;
        private Set<Integer> indexes;
        
        private Node() {
            this.list = new ArrayList<>();
            this.indexes = new HashSet<>();
        }
        
        private Node(Node node) {
            this.list = new ArrayList<>(node.list);
            this.indexes = new HashSet<>(node.indexes);
        }
    }
}