The set [1,2,3,бн,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note: Given n will be between 1 and 9 inclusive.




class Solution {
    public String getPermutation(int n, int k) {
        if(n > 1) {
            List<String> nonUsedNums = new ArrayList<>();
            Map<Integer, Integer> factorials = new HashMap<Integer, Integer>();
            factorials.put(0, 1);
            int factorial = 1;
            for(int i = 1; i <= n; ++i) {
                nonUsedNums.add(i+"");
                factorial = factorial * i;
                factorials.put(i, factorial);
            }
            
            return getPermutation(nonUsedNums, k-1, factorials);
        } else {
            return "1";
        }
    }
    
    private String getPermutation(List<String> nonUsedNums, int k, Map<Integer, Integer> factorials) {
        if(k == 0) {
            StringBuilder builder = new StringBuilder();
            for(String num : nonUsedNums) {
                builder.append(num);
            }
            return builder.toString();
        }
        if(nonUsedNums.size() == 1) {
            return nonUsedNums.get(0);
        }
        
        int totalSubCombination = factorials.get(nonUsedNums.size()-1).intValue();
        int division = k / totalSubCombination;
        int remainder = k % totalSubCombination;
        
        String num = nonUsedNums.get(division);
        nonUsedNums.remove(num);
        
        return num + getPermutation(nonUsedNums, remainder, factorials);
    }
    
}