The set [1,2,3,бн,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note: Given n will be between 1 and 9 inclusive.





class Solution {
    public String getPermutation(int n, int k) {
        if(n > 0 && k > 0) {
            Set<Integer> nums = new HashSet<Integer>();
            Map<Integer, Integer> factorials = new HashMap<Integer, Integer>();
            factorials.put(0, 1);
            int factorial = 1;
            for(int i = 1; i <= n; ++i) {
                nums.add(i);
                factorial = factorial * i;
                factorials.put(i, factorial);
            }
            
            StringBuilder builder = new StringBuilder();
            int i = 1;
            int newK = k;
            while(i <= n) {
                int divider = factorials.get(n - i);
                int quotient = (newK-1)/divider;
                int remainder = (newK-1)%divider;
                
                Iterator<Integer> iterator = nums.iterator();
                int count = 0;
                while(iterator.hasNext() && count < quotient) {
                    iterator.next();
                    count++;
                }
                
                Integer integer = iterator.next();
                nums.remove(integer);
                builder.append(integer);
                
                newK = remainder + 1;
                
                i++;
            }
            
            return builder.toString();
        }
        else {
            return "";
        }
    }
}