You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:
1 <= nums.length <= 100
0 <= nums[i] <= 400





// Solution 1: 
class Solution {
    public int rob(int[] nums) {
        if(nums != null && nums.length > 0) {
            Map<Integer, Integer> records = new HashMap<>();
            
            return Math.max(rob(nums, 0, records), rob(nums, 1, records));
        } else {
            return 0;
        }
    }
    
    private int rob(int[] nums, int index, Map<Integer, Integer> records) {
        if(index >= nums.length) {
            return 0;
        }
        
        if(records.containsKey(index)) {
            return records.get(index).intValue();
        }
        
        int num = nums[index] + Math.max(rob(nums, index+2, records), rob(nums, index+3, records));
        
        records.put(index, num);
        
        return num;
    }
}


// Solution 2: 
class Solution {
    public int rob(int[] nums) {
        if(nums != null && nums.length > 0) {
            if(nums.length == 1) {
                return nums[0];
            }
            
            // robFrom(i)=max(robFrom(i+1),robFrom(i+2)+nums(i))
            // To calculate the current value, we just need to rely on the next two consecutive values/recursive calls.
            // t1 is the max[i-1]
            int t1 = 0;
            // t2 is the max[i-2]
            int t2 = 0;

            for(int i = 0; i < nums.length; ++i) {
                int temp = t1;
                int current = nums[i];
                t1 = Math.max(current + t2, t1);
                t2 = temp;
            }

            return t1;
        } else {
            return 0;
        }
    }
}