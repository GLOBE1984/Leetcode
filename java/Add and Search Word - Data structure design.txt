Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.




class WordDictionary {

    private Trie root;
    
    /** Initialize your data structure here. */
    public WordDictionary() {
        this.root = new Trie();
    }
    
    public void addWord(String word) {
        if(word == null || word.length() == 0) {
            return;
        }
        
        Trie current = this.root;
        for(int i = 0; i < word.length(); ++i) {
            char c = word.charAt(i);
            if(current.children[c-'a'] == null) {
                current.children[c-'a'] = new Trie();
                current.children[c-'a'].index = i;
            }
            current = current.children[c-'a'];
        }
        current.isEnd = true;
    }
    
    public boolean search(String word) {
        if(word == null || word.length() == 0) {
            return false;
        }
        
        Queue<Trie> queue = new LinkedList<>();
        if(word.charAt(0) == '.') {
            for(Trie trie : this.root.children) {
                if(trie != null) {
                    queue.offer(trie);
                }
            }
        } else {
            if(this.root.children[word.charAt(0)-'a'] != null) {
                queue.offer(this.root.children[word.charAt(0)-'a']);
            } else {
                return false;
            }
        }
        
        while(!queue.isEmpty()) {
            Trie trie = queue.poll();
            
            if(trie.index < word.length()-1) {
                char c = word.charAt(trie.index+1);
                if(c == '.') {
                    for(Trie tmp : trie.children) {
                        if(tmp != null) {
                            queue.offer(tmp);
                        }
                    }
                } else {
                    if(trie.children[c-'a'] != null) {
                        queue.add(trie.children[c-'a']);
                    }
                }
            } else {
                if(trie.isEnd) {
                    return true;
                }
            }
        }
        
        return false;        
    }
    
    private class Trie {
        private int index;
        private Trie[] children = new Trie[26];
        private boolean isEnd;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");