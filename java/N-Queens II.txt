Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.





class Solution {
    public int totalNQueens(int n) {
        int count = 0;
        
        if(n > 0) {
            int[] records = new int[n];
            count = totalNQueens(records, 0);
        }
        
        return count;
    }
    
    private int totalNQueens(int[] records, int row) {
        if(row == records.length) {
            return 1;
        }
        
        int count = 0;
        for(int col = 0; col < records.length; ++col) {
            records[row] = col;
            if(isValid(records, row)) {
                count = count + totalNQueens(records, row+1);
            }
        }
        
        return count;
    }
    
    private boolean isValid(int[] records, int row) {
        for(int i = 0; i < row; ++i) {
            int index = 1;
            if(records[row] == records[i] || Math.abs(records[row]-records[i]) == row-i) {
                return false;
            }
        }
        
        return true;
    }

}



