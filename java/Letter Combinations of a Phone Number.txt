Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.




class Solution {
    public List<String> letterCombinations(String digits) {
        LinkedList<String> results = new LinkedList<>();
        
        if(digits != null && digits.length() > 0) {
            String[] strs = new String[9];
            strs[1] = "abc";
            strs[2] = "def";
            strs[3] = "ghi";
            strs[4] = "jkl";
            strs[5] = "mno";
            strs[6] = "pqrs";
            strs[7] = "tuv";
            strs[8] = "wxyz";
            
            String str = strs[digits.charAt(0)-'1'];
            for(int i = 0; i < str.length(); ++i) {
                results.offer(str.charAt(i)+"");
            }
            
            for(int i = 1; i < digits.length(); ++i) {
                str = strs[digits.charAt(i)-'1'];
                int size = results.size();
                LinkedList<String> tmp = new LinkedList<>();
                for(int j = 0; j < str.length(); ++j) {
                    int times = 0;
                    while(times < size) {
                        String old = results.poll();
                        tmp.offer(old+str.charAt(j));
                        results.offer(old);
                        times++;
                    }
                }
                results = tmp;
            }
        }
        
        return results;
    }
}