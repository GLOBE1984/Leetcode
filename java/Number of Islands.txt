Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

11110
11010
11000
00000
Answer: 1

Example 2:

11000
11000
00100
00011
Answer: 3





class Solution {
    public int numIslands(char[][] grid) {
        if(grid != null && grid.length > 0 && grid[0].length > 0) {
            int count = 0;
            
            for(int i = 0; i < grid.length; ++i) {
                for(int j = 0; j < grid[0].length; ++j) {
                    if(grid[i][j] == '1') {
                        bfs(grid, i, j);
                        count++;
                    }
                }
            }
            
            return count;
        } else {
            return 0;
        }
    }
    
    private void bfs(char[][] grid, int row, int col) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{row, col});
        grid[row][col] = '2';
        
        while(!queue.isEmpty()) {
            int[] pos = queue.poll();
            if(pos[0] > 0 && grid[pos[0]-1][pos[1]] == '1') {
                queue.offer(new int[]{pos[0]-1, pos[1]});
                grid[pos[0]-1][pos[1]] = '2';
            }
            if(pos[0] < grid.length-1 && grid[pos[0]+1][pos[1]] == '1') {
                queue.offer(new int[]{pos[0]+1, pos[1]});
                grid[pos[0]+1][pos[1]] = '2';
            }
            if(pos[1] > 0 && grid[pos[0]][pos[1]-1] == '1') {
                queue.offer(new int[]{pos[0], pos[1]-1});
                grid[pos[0]][pos[1]-1] = '2';
            }
            if(pos[1] < grid[0].length-1 && grid[pos[0]][pos[1]+1] == '1') {
                queue.offer(new int[]{pos[0], pos[1]+1});
                grid[pos[0]][pos[1]+1] = '2';
            }
        }
    }
}




public class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        int count = 0;
        List<Integer> list = new ArrayList<Integer>();
        List<Integer> sizes = new ArrayList<Integer>();
        Set<Integer> set = new HashSet<Integer>();
        int length_v = grid.length;
        int length_h = grid[0].length;
        
        int[][] islands = new int[length_v][length_h];
        for(int i = 0; i < length_v; ++i) {
            for(int j = 0; j < length_h; ++j) {
                if(grid[i][j] != '0') {
                    if(i != 0 && j != 0) {
                        if(islands[i][j-1] > 0 && islands[i-1][j] > 0) {
                            if(islands[i][j-1] == islands[i-1][j]) {
                                islands[i][j] = islands[i][j-1];
                                sizes.set(islands[i][j]-1, sizes.get(root(list, islands[i][j])-1)+1);
                            }
                            else if(islands[i][j-1] < islands[i-1][j]) {
                                connectIslands(islands, i, j, set, list, sizes);
                            }
                            else {
                                connectIslands(islands, i, j, set, list, sizes);
                            }
                        }
                        else if(islands[i][j-1] == 0 && islands[i-1][j] == 0) {
                            count = addNewIsland(count, islands, i, j, set, list, sizes);
                        }
                        else if(islands[i][j-1] > 0) {
                            islands[i][j] = islands[i][j-1];
                            sizes.set(islands[i][j]-1, sizes.get(root(list, islands[i][j])-1)+1);
                        }
                        else {
                            islands[i][j] = islands[i-1][j];
                            sizes.set(islands[i][j]-1, sizes.get(root(list, islands[i][j])-1)+1);
                        }
                    }
                    else if(i == 0 && j == 0) {
                        count = addNewIsland(count, islands, i, j, set, list, sizes);
                    }
                    else if(i == 0) {
                        if(islands[i][j-1] > 0) {
                            islands[i][j] = islands[i][j-1];
                            sizes.set(islands[i][j]-1, sizes.get(root(list, islands[i][j])-1)+1);
                        }
                        else {
                            count = addNewIsland(count, islands, i, j, set, list, sizes);
                        }
                    }
                    else {
                        if(islands[i-1][j] > 0) {
                            islands[i][j] = islands[i-1][j];
                            sizes.set(islands[i][j]-1, sizes.get(root(list, islands[i][j])-1)+1);
                        }
                        else {
                            count = addNewIsland(count, islands, i, j, set, list, sizes);
                        }
                    }
                }
                else {
                    islands[i][j] = 0;
                }
            }
        }
        
        return set.size();
    }
    
    private int addNewIsland(int count, int[][] islands, int i, int j, Set<Integer> set, List<Integer> list, List<Integer> sizes) {
        count++;
        islands[i][j] = count;
        list.add(-1);
        sizes.add(1);
        set.add(count);
        
        return count;
    }
    
    private void connectIslands(int[][] islands, int i, int j, Set<Integer> set, List<Integer> list, List<Integer> sizes) {
        int root1 = root(list, islands[i][j-1]);
        int root2 = root(list, islands[i-1][j]);
        
        if(sizes.get(root1-1) > sizes.get(root2-1)) {
            set.remove(root2);
            list.set(root2-1, root1);
            sizes.set(root1-1, sizes.get(root1-1)+sizes.get(root2-1)+1);
            islands[i][j] = root1;
        }
        else if(sizes.get(root1-1) < sizes.get(root2-1)) {
            set.remove(root1);
            list.set(root1-1, root2);
            sizes.set(root2-1, sizes.get(root1-1)+sizes.get(root2-1)+1);
            islands[i][j] = root2;
        }
        else {
            if(root1 < root2) {
                set.remove(root2);
                list.set(root2-1, root1);
                sizes.set(root1-1, sizes.get(root1-1)+sizes.get(root2-1)+1);
                islands[i][j] = root1;
            }
            else if(root1 > root2) {
                set.remove(root1);
                list.set(root1-1, root2);
                sizes.set(root2-1, sizes.get(root1-1)+sizes.get(root2-1)+1);
                islands[i][j] = root2;
            }
            else {
                sizes.set(root1-1, sizes.get(root1-1)+1);
                islands[i][j] = root1;
            }
        }
    }
    
    private int root(List<Integer> list, int num) {
        int index = num;        
        while(list.get(index-1) != -1) {
            index = list.get(index-1);
        }
        
        return index;
    }
}