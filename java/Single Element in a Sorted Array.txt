You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 10^5
0 <= nums[i] <= 10^5





class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums != null && nums.length > 0) {
            int l = 0;
            int r = nums.length - 1;
            
            while(l < r) {
                int mid = l + (r - l) / 2;
                if(mid == 0) {
                    return 0;
                } else {
                    if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1]) {
                        return nums[mid];
                    } else if(nums[mid] == nums[mid-1]) {
                        if(mid%2 == 0) {
                            r = mid;
                        } else {
                            l = mid + 1;
                        }
                    } else {
                        if(mid%2 == 0) {
                            l = mid;
                        } else {
                            r = mid - 1;
                        }
                    }
                }
            }
            
            return nums[l];
        } else {
            return -1;
        }
    }
}