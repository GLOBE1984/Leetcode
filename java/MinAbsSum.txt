For a given array A of N integers and a sequence S of N integers from the set {?1, 1}, we define val(A, S) as follows:

val(A, S) = |sum{ A[i]*S[i] for i = 0..N?1 }|

(Assume that the sum of zero elements equals zero.)

For a given array A, we are looking for such a sequence S that minimizes val(A,S).

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A of N integers, computes the minimum value of val(A,S) from all possible values of val(A,S) for all possible sequences S of N integers from the set {?1, 1}.

For example, given array:

  A[0] =  1
  A[1] =  5
  A[2] =  2
  A[3] = -2
your function should return 0, since for S = [?1, 1, ?1, 1], val(A, S) = 0, which is the minimum possible value.

Assume that:

N is an integer within the range [0..20,000];
each element of array A is an integer within the range [?100..100].
Complexity:

expected worst-case time complexity is O(N*max(abs(A))2);
expected worst-case space complexity is O(N+sum(abs(A))), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.




// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        if(A.length == 0) {
            return 0;
        }
        
        int length = A.length;
        int max = 0;
        int sum = 0;
        for(int i = 0; i < length; ++i) {
            A[i] = Math.abs(A[i]);
            max = Math.max(max, A[i]);
            sum = sum + A[i];
        }
        
        int[] count = new int[max+1];
        for(int i = 0; i < length; ++i) {
            count[A[i]]++;
        }
        
        int[] dp = new int[sum+1];
        for(int i = 0; i <= sum; ++i) {
            dp[i] = -1;
        }
        dp[0] = 0;
        
        for(int i = 1; i <= max; ++i) {
            if(count[i] > 0) {
                for(int j = 0; j < sum; ++j) {
                    if(dp[j] >= 0) {
                        dp[j] = count[i];
                    }
                    else if(j >= i && dp[j-i] > 0) {
                        dp[j] = dp[j-i] - 1;
                    }
                }
            }
        }
        
        int result = sum;
        for(int i = 0; i < sum/2+1; ++i) {
            if(dp[i] >= 0) {
                result = Math.min(result, sum-2*i);
            }
        }
        
        return result;
    }
}

solution-min-abs-sum.pdf