You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:
Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3

Return: [1,2],[1,4],[1,6]

The first 3 pairs are returned from the sequence:
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:
Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2

Return: [1,1],[1,1]

The first 2 pairs are returned from the sequence:
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:
Given nums1 = [1,2], nums2 = [3],  k = 3 

Return: [1,3],[2,3]

All possible pairs are returned from the sequence:
[1,3],[2,3]





// Time: O(KlogK), Space: O(K)
public class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        LinkedList<List<Integer>> results = new LinkedList<>();  
        
        if(k > 0 && nums1 != null && nums1.length > 0 && nums2 != null && nums2.length > 0) {
            PriorityQueue<int[]> pq = new PriorityQueue<>((i1, i2) -> nums1[i1[0]] + nums2[i1[1]] - nums1[i2[0]] - nums2[i2[1]]);
            pq.offer(new int[]{0, 0});
            Set<Integer> visited = new HashSet<>();
            visited.add(hashCode(0, 0));
            int count = 0;
            
            while(count < k && !pq.isEmpty()) {
                int[] pair = pq.poll();
                List<Integer> result = new ArrayList<>();
                result.add(nums1[pair[0]]);
                result.add(nums2[pair[1]]);
                results.add(result);
                count++;
                
                
                if(pair[0] < nums1.length-1) {
                    int hash = hashCode(pair[0]+1, pair[1]);
                    if(!visited.contains(hash)) {
                        visited.add(hash);
                        pq.offer(new int[]{pair[0]+1, pair[1]});
                    }
                }
                
                if(pair[1] < nums2.length-1) {
                    int hash = hashCode(pair[0], pair[1]+1);
                    if(!visited.contains(hash)) {
                        visited.add(hash);
                        pq.offer(new int[]{pair[0], pair[1]+1});
                    }
                }
            }
        }
        
        return results;
    }
    
    private int hashCode(int i, int j) {
        return Integer.toString(i).concat("_").concat(Integer.toString(j)).hashCode();
    }
}