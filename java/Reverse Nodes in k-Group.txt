Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k == 1 || head == null) {
            return head;
        }
        
        ListNode virtual = new ListNode();
        virtual.next = head;
        ListNode prev = virtual;
        ListNode first = head;
        ListNode anchor = findAnchor(head, k);
        
        while(anchor != null) {
            ListNode tmp = anchor.next;
            reverseList(first, anchor);
            prev.next = anchor;
            prev = first;
            first.next = tmp;
            first = tmp;
            anchor = findAnchor(first, k);
        }
        
        return virtual.next;
    }
    
    private void reverseList(ListNode head, ListNode tail) {        
        if(head == tail) {
            return;
        }
        
        ListNode prev = head;
        ListNode current = head.next;
        
        while(prev != tail) {
            ListNode tmp = current.next;
            current.next = prev;
            prev = current;
            current = tmp;
        }
    }
    
    private ListNode findAnchor(ListNode head, int k) {
        ListNode anchor = head;
        int i = 1;
        while(anchor != null && i < k) {
            anchor = anchor.next;
            i++;
        }
        return anchor;
    }
}