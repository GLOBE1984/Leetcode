Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.

Example:
nums = [1, 2, 3]
target = 4
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.
Follow up:
What if negative numbers are allowed in the given array?
How does it change the problem?
What limitation we need to add to the question to allow negative numbers?




// Solution 1: 
class Solution {
    private HashMap<Integer, Integer> memo;

    public int combinationSum4(int[] nums, int target) {
        // minor optimization
        // Arrays.sort(nums);
        memo = new HashMap<>();
        return combs(nums, target);
    }

    private int combs(int[] nums, int remain) {
        if (remain == 0)
            return 1;
        if (memo.containsKey(remain))
            return memo.get(remain);

        int result = 0;
        for (int num : nums) {
            if (remain - num >= 0)
                result += combs(nums, remain - num);
            // minor optimizaton, early stopping
            // else
            //     break;
        }
        memo.put(remain, result);
        return result;
    }
}


// Solution 2: 
class Solution {
    public int combinationSum4(int[] nums, int target) {
        Arrays.sort(nums);
        
        int[] dp = new int[target + 1];
        dp[0] = 1;

        for (int combSum = 1; combSum < target + 1; ++combSum) {
            for (int num : nums) {
                if (combSum - num >= 0) {
                    dp[combSum] += dp[combSum - num];
                } else {
                    break;
                }
            }
        }
        return dp[target];
    }
}


// Solution 3: 
class Solution {
    public int combinationSum4(int[] nums, int target) {
        if(nums != null && nums.length > 0) {
            int count = 0;
            
            Map<Integer, Integer> map = new HashMap<>();
            for(int num : nums) {
                map.put(num, 1);
            }
            
            Arrays.sort(nums);
            
            while(!map.isEmpty()) {
                count += map.getOrDefault(target, 0);
                Map<Integer, Integer> tmp = new HashMap<>();
                Iterator<Map.Entry<Integer, Integer>> iterator = map.entrySet().iterator();
                while(iterator.hasNext()) {
                    Map.Entry<Integer, Integer> entry = iterator.next();
                    for(int num : nums) {
                        int sum = entry.getKey().intValue() + num;
                        if(entry.getKey().intValue()+num <= target) {
                            int current = tmp.getOrDefault(sum, 0);
                            current += entry.getValue().intValue();
                            tmp.put(sum, current);
                        }
                    }
                }
                map = tmp;
            }
            
            return count;
        } else {
            return 0;
        }
    }
}