Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!





public class Solution {
    public int trap(int[] height) {
        if(height == null || height.length == 0) {
            return 0;
        }
        
        int length = height.length;
        int max = 0;
        int amount = 0;
        int amount_tmp = 0;
        for(int i = 0; i < length; ++i) {
            if(max <= height[i]) {
                amount = amount + amount_tmp;
                max = height[i];
                amount_tmp = 0;
            }
            else {
                amount_tmp = amount_tmp + max - height[i];
            }
        }
        max = 0;
        amount_tmp = 0;
        for(int i = length-1; i >= 0; --i) {
            if(max < height[i]) {
                amount = amount + amount_tmp;
                max = height[i];
                amount_tmp = 0;
            }
            else {
                amount_tmp = amount_tmp + max - height[i];
            }
        }
        
        return amount;
    }
}


// Solution with monotone decreasing stack
class Solution {
    public int trap(int[] height) {
        int count = 0;
        
        if(height != null && height.length > 0) {
            Stack<Integer> stack = new Stack<>();
            
            for(int i = 0; i < height.length; ++i) {
                if(height[i] > 0) {
                    int prevHeight = 0;
                    while(!stack.empty() && height[stack.peek().intValue()] <= height[i]) {
                        int index = stack.pop().intValue();
                        if(i-index > 1) {
                            count += (i - index - 1) * (height[index] - prevHeight);
                        }
                        prevHeight = height[index];
                    }
                    if(!stack.empty() && prevHeight < height[i]) {
                        int index = stack.peek().intValue();
                        count += (i - index - 1) * (height[i] - prevHeight);
                    }
                    stack.push(i);
                } else {
                    if(!stack.empty() && height[stack.peek().intValue()] > 0) {
                        stack.push(i);
                    }
                }
            }
        }
        
        return count;
    }
}