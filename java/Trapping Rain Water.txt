Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!





public class Solution {
    public int trap(int[] height) {
        if(height == null || height.length == 0) {
            return 0;
        }
        
        int length = height.length;
        int max = 0;
        int amount = 0;
        int amount_tmp = 0;
        for(int i = 0; i < length; ++i) {
            if(max <= height[i]) {
                amount = amount + amount_tmp;
                max = height[i];
                amount_tmp = 0;
            }
            else {
                amount_tmp = amount_tmp + max - height[i];
            }
        }
        max = 0;
        amount_tmp = 0;
        for(int i = length-1; i >= 0; --i) {
            if(max < height[i]) {
                amount = amount + amount_tmp;
                max = height[i];
                amount_tmp = 0;
            }
            else {
                amount_tmp = amount_tmp + max - height[i];
            }
        }
        
        return amount;
    }
}


// Solution with monotone decreasing stack
class Solution {
    public int trap(int[] height) {
        if(height != null && height.length >= 3) {
            Stack<Integer> stack = new Stack<>();
            
            int count = 0;
            for(int i = 0; i < height.length; ++i) {
                while(!stack.isEmpty() && height[stack.peek().intValue()] < height[i]) {
                    int index = stack.pop().intValue();
                    
                    if(!stack.isEmpty() && height[stack.peek().intValue()] > height[index]) {
                        count += (Math.min(height[stack.peek().intValue()], height[i]) - height[index]) 
                            * (i - stack.peek().intValue() - 1);
                    }
                    
                }
                stack.push(i);
            }
            
            return count;
        } else {
            return 0;
        }
    }
}