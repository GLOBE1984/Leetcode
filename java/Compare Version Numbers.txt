Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37





public class Solution {
    public int compareVersion(String version1, String version2) {
        if(version1 == null || version2 == null || version1.length() == 0 || version2.length() == 0) {
            return 0;
        }
        
        String[] version1Strs = version1.split("\\.");
        String[] version2Strs = version2.split("\\.");
        
        int index = 0;
        
        while(index < version1Strs.length && index < version2Strs.length) {
            try {
                if(Integer.valueOf(version1Strs[index]).intValue() > Integer.valueOf(version2Strs[index]).intValue()) {
                    return 1;
                }
                else {
                    if(Integer.valueOf(version1Strs[index]).intValue() < Integer.valueOf(version2Strs[index]).intValue()) {
                        return -1;
                    }
                    else {
                        index++;
                    }
                }
            } catch(Exception e) {
                return 0;
            }
        }
        
        if(index == version1Strs.length && index == version2Strs.length) {
            return 0;
        }
        else {
            if(index < version1Strs.length) {
                while(index < version1Strs.length) {
                    if(Integer.valueOf(version1Strs[index]).intValue() != 0) {
                        return 1;
                    }
                    else {
                        index++;
                    }
                }
            }
            else {
                while(index < version2Strs.length) {
                    if(Integer.valueOf(version2Strs[index]).intValue() != 0) {
                        return -1;
                    }
                    else {
                        index++;
                    }
                }
            }
            return 0;
        }
    }
}