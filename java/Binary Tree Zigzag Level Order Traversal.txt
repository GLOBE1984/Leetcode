Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        
        if(root != null) {
            boolean left_to_right = true;
            
            Stack<TreeNode> thisLevel = new Stack<TreeNode>();
            thisLevel.push(root);
            
            while(!thisLevel.isEmpty()) {
                TreeNode current = root;
                
                Stack<TreeNode> nextLevel = new Stack<TreeNode>();
                List<Integer> tmp = new ArrayList<Integer>();
                while(!thisLevel.isEmpty()) {
                    current = thisLevel.pop();
                    tmp.add(Integer.valueOf(current.val));
                    
                    if(left_to_right) {
                        if(current.left != null) {
                            nextLevel.push(current.left);
                        }
                        if(current.right != null) {
                            nextLevel.push(current.right);
                        }
                    }
                    else {
                        if(current.right != null) {
                            nextLevel.push(current.right);
                        }
                        if(current.left != null) {
                            nextLevel.push(current.left);
                        }
                    }
                }
                
                left_to_right = !left_to_right;
                list.add(tmp);
                thisLevel = nextLevel;
            }
        }
        
        return list;
    }
}