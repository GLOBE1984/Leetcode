Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Constraints:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].





class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1 != null && s1.length() > 0 && s2 != null && s2.length() > 0) {        
            int[] counts = new int[26];
            int count = 0;
            for(int i = 0; i < s1.length(); ++i) {
                counts[s1.charAt(i)-'a']++;
                if(counts[s1.charAt(i)-'a'] == 1) {
                    count++;
                }
            }
            
            int l = 0;
            int r = 0;
            while(r < s2.length()) {
                counts[s2.charAt(r)-'a']--;
                if(counts[s2.charAt(r)-'a'] == 0) {
                    count--;
                    if(count == 0) {
                        return true;
                    }
                } else if(counts[s2.charAt(r)-'a'] < 0) {
                    while(l <= r && counts[s2.charAt(r)-'a'] < 0) {
                        counts[s2.charAt(l)-'a']++;
                        if(counts[s2.charAt(l)-'a'] == 1) {
                            count++;
                        }
                        l++;
                    }
                }
                r++;
            }            
            
            return false;
        } else {
            return false;
        }
    }
}