There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5





对于一个长度为n的已排序数列a，若n为奇数，中位数为a[n / 2 + 1], 若n为偶数，则中位数(a[n / 2] + a[n / 2 + 1]) / 2; 如果我们可以在两个数列中求出第K小的元素，便可以解决该问题; 不妨设数列A元素个数为n，数列B元素个数为m，各自升序排序，求第k小元素; 取A[k / 2] B[k / 2] 比较; 如果 A[k / 2] > B[k / 2] 那么，所求的元素必然不在B的前k / 2个元素中(证明反证法); 反之，必然不在A的前k / 2个元素中，于是我们可以将A或B数列的前k / 2元素删去，求剩下两个数列的; k - k / 2小元素，于是得到了数据规模变小的同类问题，递归解决; 如果 k / 2 大于某数列个数，所求元素必然不在另一数列的前k / 2个元素中，同上操作就好。
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length = nums1.length + nums2.length;
        
        if(length%2 == 1) {
            return findKthElement(nums1, 0, nums2, 0, length/2+1);
        }
        
        return (findKthElement(nums1, 0, nums2, 0, length/2) + findKthElement(nums1, 0, nums2, 0, length/2+1))/2.0;
    }
    
    private int findKthElement(int[] nums1, int start1, int[] nums2, int start2, int k) {
        if(start1 >= nums1.length) {
            return nums2[start2+k-1];
        }
        if(start2 >= nums2.length) {
            return nums1[start1+k-1];
        }
        if(k == 1) {
            return Math.min(nums1[start1], nums2[start2]);
        }        
        
        int n1 = start1 + k/2 - 1 < nums1.length? nums1[start1+k/2-1] : Integer.MAX_VALUE;
        int n2 = start2 + k/2 - 1 < nums2.length? nums2[start2+k/2-1] : Integer.MAX_VALUE;
        
        if (n1 < n2) {
			return findKthElement(nums1, start1+k/2, nums2, start2, k-k/2);
		} else {
			return findKthElement(nums1, start1, nums2, start2+k/2, k-k/2);
		}
        
    }
}