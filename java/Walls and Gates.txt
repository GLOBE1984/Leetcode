You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4




class Solution {
    public void wallsAndGates(int[][] rooms) {
        if(rooms != null && rooms.length > 0 && rooms[0].length > 0) {
            Queue<int[]> queue = new LinkedList<>();
            for(int i = 0; i < rooms.length; ++i) {
                for(int j = 0; j < rooms[i].length; ++j) {
                    if(rooms[i][j] == 0) {
                        queue.offer(new int[]{i, j});
                    }
                }
            }
            while(!queue.isEmpty()) {
                int[] point = queue.poll();
                if(point[0] > 0) {
                    int tmp = rooms[point[0]-1][point[1]];
                    if(tmp == Integer.MAX_VALUE) {
                        rooms[point[0]-1][point[1]] = rooms[point[0]][point[1]] + 1;
                        queue.offer(new int[]{point[0]-1, point[1]});
                    }
                }
                if(point[0] < rooms.length - 1) {
                    int tmp = rooms[point[0]+1][point[1]];
                    if(tmp == Integer.MAX_VALUE) {
                        rooms[point[0]+1][point[1]] = rooms[point[0]][point[1]] + 1;
                        queue.offer(new int[]{point[0]+1, point[1]});
                    }
                }
                if(point[1] > 0) {
                    int tmp = rooms[point[0]][point[1]-1];
                    if(tmp == Integer.MAX_VALUE) {
                        rooms[point[0]][point[1]-1] = rooms[point[0]][point[1]] + 1;
                        queue.offer(new int[]{point[0], point[1]-1});
                    }
                }
                if(point[1] < rooms[point[0]].length - 1) {
                    int tmp = rooms[point[0]][point[1]+1];
                    if(tmp == Integer.MAX_VALUE) {
                        rooms[point[0]][point[1]+1] = rooms[point[0]][point[1]] + 1;
                        queue.offer(new int[]{point[0], point[1]+1});
                    }
                }
            }
        }
    }
}
