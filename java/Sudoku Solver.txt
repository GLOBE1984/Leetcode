Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

 

Example 1:
Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below:


 

Constraints:
board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
It is guaranteed that the input board has only one solution.





class Solution {
    public void solveSudoku(char[][] board) {
        if(board != null && board.length > 0 && board[0].length > 0) {
            List<Set<Integer>> rows = this.initialize();
            List<Set<Integer>> cols = this.initialize();
            List<Set<Integer>> cells = this.initialize();
            
            Stack<int[]> stack = new Stack<>();
            for(int i = 0; i < board.length; ++i) {
                for(int j = 0; j < board[i].length; ++j) {
                    if(board[i][j] != '.') {
                        int num = this.getCellNumber(i, j);
                        rows.get(i).add(board[i][j]-'0');
                        cols.get(j).add(board[i][j]-'0');
                        cells.get(num).add(board[i][j]-'0');
                    } else {
                        stack.push(new int[]{i, j});
                    }
                }
            }
            
            solveSudoku(board, stack, rows, cols, cells);
        }
    }
    
    private boolean solveSudoku(char[][] board, Stack<int[]> stack, List<Set<Integer>> rows, List<Set<Integer>> cols, List<Set<Integer>> cells) {
        if(stack.empty()) {
            return true;
        }
        
        int[] coordinates = stack.pop();
        int row = coordinates[0];
        int col = coordinates[1];
        
        for(int i = 1; i <= 9; ++i) {
            int num = this.getCellNumber(row, col);
            if(!rows.get(row).contains(i) && !cols.get(col).contains(i) && !cells.get(num).contains(i)) {
                rows.get(row).add(i);
                cols.get(col).add(i);
                cells.get(num).add(i);
                board[row][col] = Character.forDigit(i, 10);
                boolean found = solveSudoku(board, stack, rows, cols, cells);
                if(found) {
                    return true;
                } else {
                    rows.get(row).remove(i);
                    cols.get(col).remove(i);
                    cells.get(num).remove(i);
                    board[row][col] = '.';
                }
            }
        }
        
        stack.push(coordinates);
        return false;
    }
    
    private List<Set<Integer>> initialize() {
        List<Set<Integer>> list = new ArrayList<>();
        
        for(int i = 0; i < 9; ++i) {
            list.add(new HashSet<>());
        }
        
        return list;
    }
    
    private int getCellNumber(int row, int col) {
        int div1 = row / 3;
        int div2 = col / 3;
        
        return 3 * div1 + div2;
    }
}