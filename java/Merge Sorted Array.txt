Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
 

Constraints:

-10^9 <= nums1[i], nums2[i] <= 10^9
nums1.length == m + n
nums2.length == n





class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if(nums1 != null && m > 0 && nums2 != null && n > 0) {
            for(int i = m-1; i >= 0; --i) {
                nums1[nums1.length-m+i] = nums1[i];
                nums1[i] = 0;
            }
            
            int index = 0;
            int index1 = n; 
            int index2 = 0;
            while(index1 < m+n && index2 < n) {
                if(nums1[index1] <= nums2[index2]) {
                    nums1[index] = nums1[index1];
                    nums1[index1] = 0;
                    index1++;
                } else {
                    nums1[index] = nums2[index2];
                    index2++;
                }
                index++;
            }
            
            if(index1 == m+n) {
                System.arraycopy(nums2, index2, nums1, index, m+n-index);
            }
        } else if(nums2 != null && n > 0) {
            System.arraycopy(nums2, 0, nums1, 0, n);
        }
    }
}