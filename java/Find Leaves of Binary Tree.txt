Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

Example:
Given binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Returns [4, 5, 3], [2], [1].

Explanation:
1. Removing the leaves [4, 5, 3] would result in this tree:

          1
         / 
        2          
2. Now removing the leaf [2] would result in this tree:

          1          
3. Now removing the leaf [1] would result in the empty tree:

          []         
Returns [4, 5, 3], [2], [1].





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        
        if(root != null) {
            postOrder(root, results);
        }
        
        return results;
    }
    
    private int postOrder(TreeNode node, List<List<Integer>> results) {
        if(node.left == null && node.right == null) {
            List<Integer> tmp = null;
            if(results.size() > 0) {
                results.get(0).add(node.val);
            }
            else {
                tmp = new ArrayList<Integer>();
                tmp.add(node.val);
                results.add(tmp);
            }
            return 0;
        }
        
        int level = 0;
        if(node.left != null) {
            level = Math.max(level, postOrder(node.left, results));
        }
        if(node.right != null) {
            level = Math.max(level, postOrder(node.right, results));
        }
        
        level++;
        List<Integer> tmp = null;
        if(results.size() > level) {
            results.get(level).add(node.val);
        }
        else {
            tmp = new ArrayList<Integer>();
            tmp.add(node.val);
            results.add(tmp);
        }
        
        return level;
    }
}