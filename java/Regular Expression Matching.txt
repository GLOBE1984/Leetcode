Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ¡ú false
isMatch("aa","aa") ¡ú true
isMatch("aaa","aa") ¡ú false
isMatch("aa", "a*") ¡ú true
isMatch("aa", ".*") ¡ú true
isMatch("ab", ".*") ¡ú true
isMatch("aab", "c*a*b") ¡ú true





class Solution {
    public boolean isMatch(String s, String p) {
        if(s != null && p != null) {
            return isMatched(s, p);
        } else if(s == null && p == null) {
            return true;
        } else {
            return false;
        }
    }
    
    private boolean isMatched(String str, String regex) {
        // base case
        if(regex.length() == 0) {
            return str.length() == 0;
        }
        
        // special case
        if(regex.length() == 1) {
            if(str.length() < 1) {
                return false;
            }
            
            if(str.charAt(0) != regex.charAt(0) && regex.charAt(0) != '.') {
                return false;
            }
            
            return isMatched(str.substring(1), regex.substring(1));
        }
        
        // case 1: when the second char of regex is not '*', easy case
        if(regex.charAt(1) != '*') {
            if(str.length() < 1) {
                return false;
            }
            
            if((str.charAt(0) != regex.charAt(0)) && (regex.charAt(0) != '.')) {
                return false;
            }
            
            return isMatched(str.substring(1), regex.substring(1));
        } else {
            // case 2: when the second char of regex is '*'
            if(isMatched(str, regex.substring(2))) {
                return true;
            }
            
            int index = 0;
            while(index < str.length() && (str.charAt(index) == regex.charAt(0) || regex.charAt(0) == '.')) {
                if(isMatched(str.substring(index+1), regex.substring(2))) {
                    return true;
                }
                index++;
            }
            return false;
        }
        
    }
}