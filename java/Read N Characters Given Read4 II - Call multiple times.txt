The API: int read4(char *buf) reads 4 characters at a time from a file.

The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.

By using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file.

Note:
The read function may be called multiple times.





/* The read4 API is defined in the parent class Reader4.
      int read4(char[] buf); */

// 尝试了好几次才弄明白意思。给定read4，跟上一题一样，求可以call multiple times的read()。假如文件字符串是"abc"，我们调用read(1)，应该返回"a"，再调用read(2)，应该返回bc"。这里要注意的是，之前我们再第一次调用的时候，read4就已经读取了"abc"，所以这道题其实就是要在上一题的基础上处理这种情况。解决方法不难，我们可以用一个queue来存储多读取的部分，然后在下次调用read的时候，根据情况判断，先读queue里面上次读剩下的数据，再进行下面的读取。也可以把read4的buffer放在global，然后用一个int型的offset来记录上次读了read4的多少。由于这个global buffer不会超过4，所以space complexity算是O(1)的。 LeetCode有些题真的很难读懂题意。

/**
 * The read4 API is defined in the parent class Reader4.
 *     int read4(char[] buf4); 
 */

// https://www.cnblogs.com/lightwindy/p/8481800.html
public class Solution extends Reader4 {
    Queue<Character> remain = new LinkedList<Character>();
     
    public int read(char[] buf, int n) {
        int i = 0;
        // 队列不为空时，先读取队列中的暂存字符
        while(i < n && !remain.isEmpty()){
            buf[i] = remain.poll();
            i++;
        }
        for(; i < n; i += 4){
            char[] tmp = new char[4];
            int len = read4(tmp);
            // 如果读到字符多于我们需要的字符，需要暂存这些多余字符
            if(len > n - i){
                System.arraycopy(tmp, 0, buf, i, n-i);
                // 把多余的字符存入队列中
                for(int j = n - i; j < len; j++){
                    remain.offer(tmp[j]);
                }
            // 如果读到的字符少于我们需要的字符，直接拷贝
            } else {
                System.arraycopy(tmp, 0, buf, i, len);
            }
            // 同样的，如果读不满4个，说明数据已经读完，返回总所需长度和目前已经读到的长度的较小的
            if(len < 4) {
                return Math.min(i+len, n);
            }
        }
        // 如果到这里，说明都是完美读取，直接返回n
        return n;
    }
}