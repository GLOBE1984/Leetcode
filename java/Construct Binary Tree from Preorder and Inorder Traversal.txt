Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder != null && preorder.length > 0 && inorder != null && inorder.length > 0) {
            Map<Integer, Integer> map = new HashMap<>();
            for(int i = 0; i < inorder.length; ++i) {
                map.put(inorder[i], i);
            }
            
            return buildTree(preorder, 0, preorder.length-1, map, 0, inorder.length-1);
        } else {
            return null;
        }
    }
    
    private TreeNode buildTree(int[] preorder, int preorderLeft, int preorderRight, Map<Integer, Integer> map, int inorderLeft, int inorderRight) {
        if(preorderLeft > preorderRight) {
            return null;
        }
        
        if(preorderLeft == preorderRight) {
            return new TreeNode(preorder[preorderLeft]);
        }
        
        TreeNode root = new TreeNode(preorder[preorderLeft]);
        int rootInorderIndex = map.get(preorder[preorderLeft]).intValue();
        int leftLength = rootInorderIndex - inorderLeft;
        
        TreeNode left = buildTree(preorder, preorderLeft+1, preorderLeft+leftLength, map, inorderLeft, rootInorderIndex-1);
        TreeNode right = buildTree(preorder, preorderLeft+leftLength+1, preorderRight, map, rootInorderIndex+1, inorderRight);
        
        root.left = left;
        root.right = right;
        
        return root;
    }
}
