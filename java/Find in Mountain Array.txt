(This problem is an interactive problem.)

You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.

You cannot access the mountain array directly. You may only access the array using a MountainArray interface:

MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example 1:
Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.

Example 2:
Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in the array, so we return -1.
 

Constraints:
3 <= mountain_arr.length() <= 104
0 <= target <= 109
0 <= mountain_arr.get(index) <= 109





// Find the peak
/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int length = mountainArr.length();
        int topIndex = findIndexOfMaximum(mountainArr, 0, length-1);
        
        if(mountainArr.get(topIndex) == target) {
            return topIndex;
        }
        
        int index1 = findInMountainArray(target, mountainArr, 0, topIndex-1, true);
        int index2 = findInMountainArray(target, mountainArr, topIndex+1, length-1, false);
        
        return index1 == -1 && index2 == -1 ? -1 : (index1 == -1 || index2 == -1 ? Math.max(index1, index2) : Math.min(index1, index2));
    }
    
    private int findIndexOfMaximum(MountainArray mountainArr, int left, int right) {        
        if(left == right) {
            return left;
        }
        
        int mid = (left + right) / 2;
        int midElement = mountainArr.get(mid);
        int midNeighborElement = mountainArr.get(mid+1);
        
        return midElement < midNeighborElement ? findIndexOfMaximum(mountainArr, mid+1, right) : findIndexOfMaximum(mountainArr, left, mid);
    }
    
    private int findInMountainArray(int target, MountainArray mountainArr, int left, int right, boolean isAscending) {
        if(left == right) {
            int leftElement = mountainArr.get(left);
            return leftElement == target ? left : -1;
        }
        
        int mid = (left + right) / 2;
        int midElement = mountainArr.get(mid);
        
        if(isAscending) {
            if(midElement < target) {
                return findInMountainArray(target, mountainArr, mid+1, right, isAscending);
            } else if(midElement > target) {
                return findInMountainArray(target, mountainArr, left, mid, isAscending);
            } else {
                return mid;
            }
        } else {
            if(midElement > target) {
                return findInMountainArray(target, mountainArr, mid+1, right, isAscending);
            } else if(midElement < target) {
                return findInMountainArray(target, mountainArr, left, mid, isAscending);
            } else {
                return mid;
            }
        }
    }
}