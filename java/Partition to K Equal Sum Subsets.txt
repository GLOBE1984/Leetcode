Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.

Note:

1 <= k <= len(nums) <= 16.
0 < nums[i] < 10000.





class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        if(nums != null && nums.length > 0 && k > 1) {
            int sum = 0;
            int max = Integer.MIN_VALUE;
            for(int num : nums) {
                sum += num;
                max = Math.max(max, num);
            }
            
            if(sum%k == 0) {
                int target = sum / k;
                if(max <= target) {
                    Arrays.sort(nums);
                    char[] usedIndexes = new char[nums.length];
                    Arrays.fill(usedIndexes, '0');
                    Map<String, Boolean> records = new HashMap<>();
                    
                    return canPartitionKSubsets(nums, target, 0, 0, usedIndexes, records);
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return true;
        }
    }
    
    private boolean canPartitionKSubsets(int[] nums, int target, int sum, int count, char[] usedIndexes, Map<String, Boolean> records) {
        if(sum == target) {
            if(count == nums.length) {
                return true;
            } else {
                String key = new String(usedIndexes);
                if(records.containsKey(key)) {
                    return records.get(key);
                } else {
                    return canPartitionKSubsets(nums, target, 0, count, usedIndexes, records);
                }
            }
        } else {
            String key = new String(usedIndexes);
            if(records.containsKey(key)) {
                return records.get(key);
            } else {
                for(int i = 0; i < nums.length && sum+nums[i] <= target; ++i) {
                    if(usedIndexes[i] == '0') {
                        usedIndexes[i] = '1';
                        count++;
                        boolean result = canPartitionKSubsets(nums, target, sum+nums[i], count, usedIndexes, records);
                        if(result) {
                            records.put(key, true);
                            return true;
                        } else {
                            usedIndexes[i] = '0';
                            count--;
                        }
                    }
                }
                records.put(key, false);
                return false;
            }
        }
    }
}