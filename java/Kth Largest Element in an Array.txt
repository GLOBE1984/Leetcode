Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ? k ? array's length.




// Solution 1: bottom to top merge sort
class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums != null && nums.length > 0 && k > 0) {
            int sortedLength = 1;
            
            for(int i = 0; i < nums.length; ++i) {
                nums[i] = nums[i] + 10000;
            }
            
            while(sortedLength < nums.length) {
                int index = 0;
                while(index < nums.length) {
                    int left1 = index;
                    int right1 = index + sortedLength - 1;
                    int left2 = right1 + 1;
                    int right2 = left2 + sortedLength - 1;
                    if(right1 < nums.length && right2 < nums.length) {
                        sort(nums, left1, right1, left2, right2);
                    } else if(left2 < nums.length && right2 >= nums.length) {
                        sort(nums, left1, right1, left2, nums.length-1);
                    }
                    index = right2 + 1;
                }
                sortedLength = sortedLength * 2;
            }
            
            for(int i = 0; i < nums.length; ++i) {
                nums[i] = nums[i] - 10000;
            }
            
            return nums[k-1];
        } else {
            return 0;
        }
    }
    
    // Refer to https://www.geeksforgeeks.org/merge-sort-with-o1-extra-space-merge-and-on-lg-n-time/
    private void sort(int[] nums, int left1, int right1, int left2, int right2) {
        // since the max is 20000
        int max = 20001;
        int current1 = left1;
        int current2 = left2;
        int current = left1;
        
        while(current1 <= right1 && current2 <= right2) {
            if(nums[current1] % max >= nums[current2] % max) {
                nums[current] = nums[current] + (nums[current1] % max) * max;
                current1++;
                current++;
            } else {
                nums[current] = nums[current] + (nums[current2] % max) * max;
                current2++;
                current++;
            }
        }
        
        while(current1 <= right1) {
            nums[current] = nums[current] + (nums[current1] % max) * max;
            current1++;
            current++;
        }
        
        while(current2 <= right2) {
            nums[current] = nums[current] + (nums[current2] % max) * max;
            current2++;
            current++;
        }
        
        for(int i = left1; i <= right2; ++i) {
            nums[i] = nums[i] / max;
        }
    }
}


// Solution 2: queue
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> p = new PriorityQueue<Integer>();
        for(int i = 0 ; i < nums.length; i++){
            p.add(nums[i]);
            if(p.size() > k) {
                p.poll();
            }
        }
        return p.poll();
    }
}


// Solution 3: Quickselect(textbook algorithm)
import java.util.Random;
class Solution {
  int [] nums;

  public void swap(int a, int b) {
    int tmp = this.nums[a];
    this.nums[a] = this.nums[b];
    this.nums[b] = tmp;
  }


  public int partition(int left, int right, int pivot_index) {
    int pivot = this.nums[pivot_index];
    // 1. move pivot to end
    swap(pivot_index, right);
    int store_index = left;

    // 2. move all smaller elements to the left
    for (int i = left; i <= right; i++) {
      if (this.nums[i] < pivot) {
        swap(store_index, i);
        store_index++;
      }
    }

    // 3. move pivot to its final place
    swap(store_index, right);

    return store_index;
  }

  public int quickselect(int left, int right, int k_smallest) {
    /*
    Returns the k-th smallest element of list within left..right.
    */

    if (left == right) // If the list contains only one element,
      return this.nums[left];  // return that element

    // select a random pivot_index
    Random random_num = new Random();
    int pivot_index = left + random_num.nextInt(right - left); 
    
    pivot_index = partition(left, right, pivot_index);

    // the pivot is on (N - k)th smallest position
    if (k_smallest == pivot_index)
      return this.nums[k_smallest];
    // go left side
    else if (k_smallest < pivot_index)
      return quickselect(left, pivot_index - 1, k_smallest);
    // go right side
    return quickselect(pivot_index + 1, right, k_smallest);
  }

  public int findKthLargest(int[] nums, int k) {
    this.nums = nums;
    int size = nums.length;
    // kth largest is (N - k)th smallest
    return quickselect(0, size - 1, size - k);
  }
}