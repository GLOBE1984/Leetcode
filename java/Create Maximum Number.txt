Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example 1:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
return [9, 8, 6, 5, 3]

Example 2:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
return [6, 7, 6, 0, 4]

Example 3:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
return [9, 8, 9]




class Solution {
    public int[] maxNumber(int[] nums1, int[] nums2, int k) {
        if(nums1 != null && nums2 != null && k > 0) {
            int[] shorter = nums1.length <= nums2.length ? nums1 : nums2;
            int[] longer = nums1.length > nums2.length ? nums1 : nums2;
            
            int[] max = null;
            for(int i = 0; i <= Math.min(shorter.length, k); ++i) {
                if(k - i <= longer.length) {
                    int[] tmp1 = this.getMaximum(i, shorter);
                    int[] tmp2 = this.getMaximum(k-i, longer);

                    int[] merged = this.merge(tmp1, tmp2);

                    if(max != null) {
                        max = this.max(max, merged);
                    } else {
                        max = merged;
                    }    
                }
                
            }
            
            return max;
        } else {
            return new int[0];
        }
    }
    
    private int[] getMaximum(int count, int[] nums) {
        int countCanBeRemoved = nums.length - count;
        
        LinkedList<Integer> list = new LinkedList<>();
        for(int num : nums) {
            while(countCanBeRemoved > 0 && !list.isEmpty() && list.getLast().intValue() < num) {
                list.removeLast();
                countCanBeRemoved--;
            }
            list.addLast(num);
        }
        
        while(list.size() > count) {
            list.removeLast();
        }
        
        int[] max = new int[count];
        int index = 0;
        for(Integer num : list) {
            max[index] = num.intValue();
            index++;
        }
        
        return max;
    }
    
    private int[] merge(int[] nums1, int[] nums2) {
        int[] merged = new int[nums1.length+nums2.length];
        
        int index = 0;
        int index1 = 0;
        int index2 = 0;
        while(index1 < nums1.length && index2 < nums2.length) {
            int start1 = index1;
            int start2 = index2;
            // need to compare all the following number instead of doing merge ans merge sort
            while(start1 < nums1.length && start2 < nums2.length) {
                if(nums1[start1] > nums2[start2]) {
                    merged[index] = nums1[index1];
                    index1++;
                    break;
                } else if(nums1[start1] < nums2[start2]) {
                    merged[index] = nums2[index2];
                    index2++;
                    break;
                }
                start1++;
                start2++;
            }
            if(start2 == nums2.length) {
                merged[index] = nums1[index1];
                index1++;
            } else if(start1 == nums1.length) {
                merged[index] = nums2[index2];
                index2++;
            }
            index++;
        }
        
        while(index1 < nums1.length) {
            merged[index] = nums1[index1];
            index++;
            index1++;
        }
        
        while(index2 < nums2.length) {
            merged[index] = nums2[index2];
            index++;
            index2++;
        }
        
        return merged;
    }
    
    private int[] max(int[] max, int[] nums) {
        for(int i = 0; i < max.length; ++i) {
            if(max[i] > nums[i]) {
                return max;
            } else if (max[i] < nums[i]) {
                return nums;
            }
        }
        
        return max;
    }
}