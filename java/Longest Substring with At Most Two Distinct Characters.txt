Given a string, find the length of the longest substring T that contains at most 2 distinct characters.

For example, Given s = ¡°eceba¡±,

T is "ece" which its length is 3.





class Solution {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        if(s != null && s.length() > 0) {
            int start = 0;
            int end = 0;
            
            int max = 0;
            Map<Character, Integer> map = new HashMap<>();
            while(end < s.length()) {
                if(!map.containsKey(s.charAt(end))) {
                    if(map.size() == 2) {
                        while(start < end && map.size() == 2) {
                            int count = map.get(s.charAt(start)).intValue() - 1;
                            if(count > 0) {
                                map.put(s.charAt(start), count);
                            } else {
                                map.remove(s.charAt(start));
                            }
                            start++;
                        }
                        map.put(s.charAt(end), 1);
                    } else {
                        max = Math.max(max, end-start+1);
                        map.put(s.charAt(end), 1);
                    }
                } else {
                    int count = map.get(s.charAt(end)).intValue() + 1;
                    map.put(s.charAt(end), count);
                    max = Math.max(max, end-start+1);
                }
                end++;
            }
            
            return max;
        } else {
            return 0;
        }
    }
}