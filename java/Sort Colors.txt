Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?



// Solution 1:
// Now this approach is basically based on the concept of The Dutch National Flag Problem. This is basically an approach // where we divide our array into partitions which are :
// 1. array[0 to low-1] = 0 is present
// 2. array[low to mid-1] = 1 is present
// 3. array[mid to high-1] = unknown
// 4. array[high to n(size of array)] = 2 is present 
class Solution {
    public void sortColors(int[] nums) {
        if(nums != null && nums.length > 0) {
            int low = 0, mid = 0, high = nums.length - 1;
            while(mid <= high) {
                if(nums[mid] == 0) {
                    int tmp = nums[mid];
                    nums[mid] = nums[low];
                    nums[low] = tmp;
                    low++;
                    mid++;
                } else if(nums[mid] == 1) {
                    mid++;
                } else {
                    int tmp = nums[mid];
                    nums[mid] = nums[high];
                    nums[high] = tmp;
                    high--;
                }
            }
        }
    }
}

// Solution 2: Bucket sorting
class Solution {
    public void sortColors(int[] nums) {
        if(nums != null && nums.length > 0) {
            int[] count = new int[3];
            for(int num : nums) {
                count[num]++;
            }
            
            for(int i = 0; i < nums.length; ++i) {
                if(count[0] != 0) {
                    nums[i] = 0;
                    count[0]--;
                } else if(count[1] != 0) {
                    nums[i] = 1;
                    count[1]--;
                } else {
                    nums[i] = 2;
                }
            }
        }
    }
}