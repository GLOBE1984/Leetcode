Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ¡Ü k ¡Ü BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?





# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if not root: 
            return -1
        
        list = []
        self.inorder(root, list)
        
        return list[k-1].val
        
    def inorder(self, root, list): 
        if root.left == None and root.right == None:
            list.append(root)
            return
        
        if root.left: 
            self.inorder(root.left, list)
        list.append(root)
        if root.right:
            self.inorder(root.right, list)
        