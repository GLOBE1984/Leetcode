Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:
The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?





// Solution 1: 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root != null) {
            Map<TreeNode, Integer> map = new HashMap<>();
            
            int total = count(root, map, 0);
            
            TreeNode current = root;
            int count = map.get(current);
            
            while(count != k-1) {
                if(count < k-1) {
                    current = current.right;
                } else {
                    current = current.left;
                }
                count = map.get(current);
            }
            
            return current.val;
        } else {
            return -1;
        }
    }
    
    private int count(TreeNode node, Map<TreeNode, Integer> map, int leftSibling) {
        if(node == null) {
            return 0;
        }
        
        int leftCount = count(node.left, map, leftSibling);
        int rightCount = count(node.right, map, leftSibling+leftCount+1);
        
        map.put(node, leftSibling+leftCount);
        
        return leftCount + rightCount + 1;
    }
}


// Solution 2:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root != null) {            
            Stack<TreeNode> stack = new Stack<>();
            TreeNode current = root;
            while(current != null) {
                stack.push(current);
                current = current.left;
            }
            
            int count = 0;
            while(count < k) {
                current = stack.pop();
                TreeNode tmp = current.right;
                while(tmp != null) {
                    stack.push(tmp);
                    tmp = tmp.left;
                }
                count++;
            }
            
            return current.val;
        } else {
            return -1;
        }
    }
}