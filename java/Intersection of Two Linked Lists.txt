Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 ¡ú a2
                   ¨K
                     c1 ¡ú c2 ¡ú c3
                   ¨J            
B:     b1 ¡ú b2 ¡ú b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
Credits:
Special thanks to @stellari for adding this problem and creating all test cases.




// Solution 1: 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA != null && headB != null) {
            int lengthA = getLength(headA);
            int lengthB = getLength(headB);
            
            int length = Math.min(lengthA, lengthB);
            ListNode currentA = headA;
            ListNode currentB = headB;
            if(length < lengthA) {
                currentA = skipNodes(currentA, lengthA-length);
            } else if(length < lengthB) {
                currentB = skipNodes(currentB, lengthB-length);
            }
            
            while(currentA != currentB) {
                currentA = currentA.next;
                currentB = currentB.next;
            }
            
            return currentA;
        } else {
            return null;
        }
    }
    
    private int getLength(ListNode head) {
        int length = 0;
        ListNode current = head;
        
        while(current != null) {
            current = current.next;
            length++;
        }
        
        return length;
    }
    
    private ListNode skipNodes(ListNode head, int num) {
        ListNode current = head;
        for(int i = 0; i < num; ++i) {
            current = current.next;
        }
        return current;
    }
}


// Solution 2: 

Two Pointers
Intuition

Interview Tip: Approach 3 is essentially a "medium" solution to an "easy" problem. Note that approach 2 is probably sufficient for an interview if you are fairly new to programming (for example, you're applying for an internship during your early years of college). If you're more experienced, it might also be sufficient, but your safest bet would be to also know Approach 3, and to be able to apply the intuition behind it to similar problems. While it might initially look scary, you'll be fine with it once you have a think about it and try and draw a few examples.

We know that we've now fully optimized the time complexity: it's impossible to do better than O(N + M)O(N+M) as, in the worst case, we'll need to look at every node at least once. But, is there a way we can get the space complexity down to O(1)O(1) while maintaining that awesome O(N + M)O(N+M) time complexity that we just achieved? It turns out that there is!

Observe that while list A and list B could be different lengths, that the shared "tail" following the intersection has to be the same length.

Imagine that we have two linked lists, A and B, and we know that their lengths are NN and MM respectively (these can be calculated with O(1)O(1) space and in time proportional to the length of the list). We'll imagine that N = 5N=5 and M = 8M=8.

Two linked lists with question marks on their nodes. The first is 5 nodes long, and the second is 8 nodes long.

Because the "tails" must be the same length, we can conclude that if there is an intersection, then the intersection node will be one of these 5 possibilities.

The two linked lists from above with arrows showing how the last 5 nodes of each list could be a match.

So, to check for each of these pairs, we would start by setting a pointer at the start of the shorter list, and a pointer at the first possible matching node of the longer list. The position of this node is simply the difference between the two lengths, that is, |M - N|¨OM?N¨O.

The two linked lists from above with a p1 pointer at the head of the first, and a p2 pointer at the 4th node of the second.

Then, we just need to step the two pointers through the list, each time checking whether or not the nodes are the same.

In code, we could write this algorithm with 4 loops, one after the other, each doing the following:

Calculate NN; the length of list A.
Calculate MM; the length of list B.
Set the start pointer for the longer list.
Step the pointers through the list together.
While this would have a time complexity of O(N + M)O(N+M) and a space complexity of O(1)O(1) and would be fine for an interview, we can still simplify the code a bit! As some quick reassurance, most people will struggle to come up with this next part by themselves. It takes practice and seeing lots of linked list and other math problems.

If we say that cc is the shared part, aa is exclusive part of list A and bb is exclusive part of list B, then we can have one pointer that goes over a + c + b and the other that goes over b + c + a. Have a look at the diagram below, and this should be fairly intuitive.

Diagram showing that one pointer could go over a + c + b while the other goes over b + c + a, and then both will end up on the intersection node.

This is the above algorithm in disguise - one pointer is essentially measuring the length of the longer list, and the other is measuring the length of the shorter list, and then placing the start pointer for the longer list. Then both are stepping through the list together. By seeing the solution in this way though, we can now implement it as a single loop.

Algorithm

Set pointer pA to point at headA.
Set pointer pB to point at headB.
While pA and pB are not pointing at the same node:
If pA is pointing to a null, set pA to point to headB.
Else, set pA to point at pA.next.
If pB is pointing to a null, set pB to point to headA.
Else, set pB to point at pB.next.
return the value pointed to by pA (or by pB; they're the same now).
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode pA = headA;
        ListNode pB = headB;
        while (pA != pB) {
            pA = pA == null ? headB : pA.next;
            pB = pB == null ? headA : pB.next;
        }
        return pA;
        // Note: In the case lists do not intersect, the pointers for A and B
        // will still line up in the 2nd iteration, just that here won't be
        // a common node down the list and both will reach their respective ends
        // at the same time. So pA will be NULL in that case.
    }
}

