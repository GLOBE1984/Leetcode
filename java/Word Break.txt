Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".

UPDATE (2017/1/4):
The wordDict parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to get the latest changes.





class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s != null && !s.isEmpty() && wordDict != null && !wordDict.isEmpty()) {
            int[] records = new int[s.length()];
            Arrays.fill(records, -1);
            
            return wordBreak(s, wordDict, records, 0);
        } else {
            return false;
        }
    }
    
    private boolean wordBreak(String s, List<String> wordDict, int[] records, int index) {
        if(index == s.length()) {
            return true;
        }
        
        if(records[index] == 0) {
            return false;
        } else if(records[index] == 1) {
            return true;
        }
        
        for(String word : wordDict) {
            if(s.startsWith(word, index)) {
                if(wordBreak(s, wordDict, records, index+word.length())) {
                    records[index] = 1;
                    return true;
                }
            }
        }
        
        records[index] = 0;
        return false;        
    }
}