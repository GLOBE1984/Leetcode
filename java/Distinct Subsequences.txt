Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.




class Solution {
    public int numDistinct(String s, String t) {
        if(s != null && s.length() > 0 && t != null && t.length() > 0) {
            if(s.length() < t.length()) {
                return 0;
            } else if(s.length() == t.length()) {
                return s.equals(t) ? 1 : 0;
            }
            
            Map<Integer, Integer> records = new HashMap<>();
            
            return existTransformation(s, 0, t, 0, records);
        } else {
            return 0;
        }
    }
    
    private int existTransformation(String s, int index1, String t, int index2, Map<Integer, Integer> records) {
        if(index2 == t.length()) {
            return 1;
        }
        
        int key = 10000 * index1 + index2;
        if(records.containsKey(key)) {
            return records.get(key).intValue();
        }
        
        int count = 0;
        char c2 = t.charAt(index2);
        for(int i = index1; i <= s.length()-t.length()+index2; ++i) {
            char c1 = s.charAt(i);
            if(c1 == c2) {
                count += existTransformation(s, i+1, t, index2+1, records);
            }
        }
        
        records.put(key, count);
        
        return count;
    }
}