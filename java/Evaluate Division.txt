Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.





class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        if(equations != null && equations.size() > 0 && values != null && values.length > 0 && queries != null && queries.size() > 0) {
            Map<String, Node> map = new HashMap<>();
            for(int i = 0; i < equations.size(); ++i) {
                List<String> equation = equations.get(i);
                Node first = map.getOrDefault(equation.get(0), new Node());
                map.put(equation.get(0), first);
                Node second = map.getOrDefault(equation.get(1), new Node());
                map.put(equation.get(1), second);
                first.edges.put(second, values[i]);
                second.edges.put(first, 1/values[i]);
            }
            
            double[] results = new double[queries.size()];
            for(int i = 0; i < queries.size(); ++i) {
                Node source = map.get(queries.get(i).get(0));
                Node target = map.get(queries.get(i).get(1));
                if(source != null && target != null) {
                    Set<Node> visited = new HashSet<>();
                    results[i] = calculate(source, target, visited);
                } else {
                    results[i] = -1;
                }
            }
            return results;
        } else {
            return new double[0];
        }
    }
    
    private double calculate(Node source, Node target, Set<Node> visited) {
        if(source == target) {
            return 1;
        }
        
        visited.add(source);
        Iterator<Map.Entry<Node, Double>> iterator = source.edges.entrySet().iterator();
        while(iterator.hasNext()) {
            Map.Entry<Node, Double> entry = iterator.next();
            if(!visited.contains(entry.getKey())) {
                double val = calculate(entry.getKey(), target, visited);
                if(val != -1) {
                    return entry.getValue() * val;
                }
            }
        }
        
        return -1;
    }
    
    private class Node {
        private Map<Node, Double> edges;
        
        private Node() {
            this.edges = new HashMap<>();
        }
    }
}