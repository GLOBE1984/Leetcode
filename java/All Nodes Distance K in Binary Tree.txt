Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.

Example 2:
Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:
The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000




// Solution 1: 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> list = new ArrayList<>();
        
        if(root != null && target != null) {
            Map<TreeNode, TreeNode> map = new HashMap<>();
            traverseTree(root, map);
            Set<TreeNode> visited = new HashSet<>();
            findNodes(target, k, visited, map, list);
        }
        
        return list;
    }
    
    private void traverseTree(TreeNode node, Map<TreeNode, TreeNode> map) {
        if(node.left != null) {
            map.put(node.left, node);
            traverseTree(node.left, map);
        }
        if(node.right != null) {
            map.put(node.right, node);
            traverseTree(node.right, map);
        }
    }
    
    private void findNodes(TreeNode node, int distance, Set<TreeNode> visited, Map<TreeNode, TreeNode> map, List<Integer> list) {
        if(distance > 0) {
            visited.add(node);
            if(node.left != null && !visited.contains(node.left)) {
                findNodes(node.left, distance-1, visited, map, list);
            }
            if(node.right != null && !visited.contains(node.right)) {
                findNodes(node.right, distance-1, visited, map, list);
            }
            TreeNode parent = map.get(node);
            if(parent != null && !visited.contains(parent)) {
                findNodes(parent, distance-1, visited, map, list);
            }
        } else {
            list.add(node.val);
        }
    }
}


// Solution 2: 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> list = new ArrayList<>();
        
        if(root != null && target != null) {
            if(k > 0) {
                Map<TreeNode, Branch> map = new HashMap<>();
            
                // Find nodes in the target sub tree
                traverseTargetSubTree(target, k, list);
                
                // Find nodes outside of the target sub tree
                int distance = findTarget(root, target, map);
                traverseNonTargetSubTree(root, target, distance, k, map, list);        
            } else {
                list.add(target.val);
            }
        }
        
        return list;
    }
    
    private void traverseTargetSubTree(TreeNode root, int k, List<Integer> list) {
        if(root != null) {
            if(k == 0) {
                list.add(root.val);
            } else {
                traverseTargetSubTree(root.left, k-1, list);
                traverseTargetSubTree(root.right, k-1, list);
            }
        }
    }
    
    private int findTarget(TreeNode root, TreeNode target, Map<TreeNode, Branch> map) {
        if(root == null) {
            return -1;
        }
        
        if(root == target) {
            return 0;
        }
        
        int distance = findTarget(root.left, target, map);
        if(distance >= 0) {
            map.put(root, Branch.Left);
            return distance + 1;
        } else {
            distance = findTarget(root.right, target, map);
            if(distance >= 0) {
                map.put(root, Branch.Right);
                return distance + 1;
            }
        }
        
        return -1;
    }
    
    private void traverseNonTargetSubTree(TreeNode root, TreeNode target, int distance, int k, Map<TreeNode, Branch> map, List<Integer> list) {
        if(root != null && root != target) {
            if(distance != k) {
                if(map.get(root) == Branch.Left) {
                    if(distance > k) {
                        traverseNonTargetSubTree(root.left, target, distance-1, k, map, list);
                    } else {
                        traverseNonTargetSubTree(root.left, target, distance-1, k, map, list);
                        traverseNonTargetSubTree(root.right, target, distance+1, k, map, list);
                    }
                } else if(map.get(root) == Branch.Right) {
                    if(distance > k) {
                        traverseNonTargetSubTree(root.right, target, distance-1, k, map, list);
                    } else {
                        traverseNonTargetSubTree(root.right, target, distance-1, k, map, list);
                        traverseNonTargetSubTree(root.left, target, distance+1, k, map, list);
                    }
                } else {
                    if(distance < k) {
                        traverseNonTargetSubTree(root.left, target, distance+1, k, map, list);
                        traverseNonTargetSubTree(root.right, target, distance+1, k, map, list);
                    }
                }
            } else {
                list.add(root.val);
                if(map.get(root) == Branch.Left) {
                    traverseNonTargetSubTree(root.left, target, distance-1, k, map, list);
                } else if(map.get(root) == Branch.Right) {
                    traverseNonTargetSubTree(root.right, target, distance-1, k, map, list);
                }
            }
        }
    }
    
    private enum Branch {
        Left, Right;
    }
}