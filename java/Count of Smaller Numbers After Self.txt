You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].





public class Solution {
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> res = new ArrayList<Integer>(nums.length);
        List<Integer> index = new ArrayList<Integer>(nums.length);

        for (int i = nums.length-1; i >= 0; i--) {
            res.add(0);
            index.add(i);
        }

        countSmallerSub(nums, index, 1 << 31, res);

        return res;
    }

    private void countSmallerSub(int[] nums, List<Integer> index, int mask, List<Integer> res) {
        if (mask != 0 && index.size() > 1) {
            List<Integer> highGroup = new ArrayList<Integer>(index.size());
            List<Integer> lowGroup = new ArrayList<Integer>(index.size());

            int highBit = (mask < 0 ? 0 : mask);

            for (int i = 0; i < index.size(); i++) {
                if ((nums[index.get(i)] & mask) == highBit) {
                    res.set(index.get(i), res.get(index.get(i)) + lowGroup.size());
                    highGroup.add(index.get(i));
                } 
                else {
                    lowGroup.add(index.get(i));
                }
            }

            countSmallerSub(nums, lowGroup, mask >>> 1, res);
            countSmallerSub(nums, highGroup, mask >>> 1, res);
        }
    }
}