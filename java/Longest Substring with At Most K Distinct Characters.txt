Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.





class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if(s != null && s.length() > 0 && k > 0) {
            int left = 0;
            int right = 0;
            int longest = 0;
            
            Map<Character, Integer> map = new HashMap<>();
            while(right < s.length()) {
                char c = s.charAt(right);
                
                if(!map.containsKey(c)) {
                    map.put(c, 1);
                    if(map.size() > k) {
                        while(left < right && map.size() > k) {
                            char tmp = s.charAt(left);
                            int count = map.get(tmp).intValue() - 1;
                            if(count == 0) {
                                map.remove(tmp);
                            } else {
                                map.put(tmp, count);
                            }
                            left++;
                        }
                    } else {
                        longest = Math.max(longest, right-left+1);
                    }
                } else {
                    map.put(c, map.get(c).intValue()+1);
                    longest = Math.max(longest, right-left+1);
                }
                
                right++;
            }
            
            return longest;
        } else {
            return 0;
        }
    }
}