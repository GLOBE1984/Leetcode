Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.





class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if(s != null && s.length() > 0 && k > 0) {
            int left = 0;
            int right = 0;
            
            Window window = new Window();
            int max = 0;
            
            while(right < s.length()) {
                window.add(s.charAt(right));
                
                while(window.getDiffCharCount() > k) {
                    window.remove(s.charAt(left));
                    left++;
                }
                
                if(window.getDiffCharCount() <= k) {
                    max = Math.max(max, right-left+1);
                }
                
                right++;
            }
            
            return max;
        } else {
            return 0;
        }
    }
    
    private class Window {
        private Map<Character, Integer> map = new HashMap<>();
                
        private void add(char c) {
            int tmp = map.getOrDefault(c, 0) + 1;
            map.put(c, map.getOrDefault(c, 0)+1);
        }
        
        private void remove(char c) {
            int tmp = map.getOrDefault(c, 0) - 1;
            if(tmp > 0) {
                map.put(c, tmp);
            } else {
                map.remove(c);
            }
        }
        
        private int getDiffCharCount() {
            return map.size();
        }
    }
}