(This problem is an interactive problem.)

Each ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.

You have a function Sea.hasShips(topRight, bottomLeft) which takes two points as arguments and returns true If there is at least one ship in the rectangle represented by the two points, including on the boundary.

Given two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are at most 10 ships in that rectangle.

Submissions making more than 400 calls to hasShips will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example :
Input: 
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
Output: 3
Explanation: From [0,0] to [4,4] we can count 3 ships within the range.

Example 2:
Input: ans = [[1,1],[2,2],[3,3]], topRight = [1000,1000], bottomLeft = [0,0]
Output: 3
 

Constraints:

On the input ships is only given to initialize the map internally. You must solve this problem "blindfolded". In other words, you must find the answer using the given hasShips API, without knowing the ships position.
0 <= bottomLeft[0] <= topRight[0] <= 1000
0 <= bottomLeft[1] <= topRight[1] <= 1000
topRight != bottomLeft





/**
 * // This is Sea's API interface.
 * // You should not implement it, or speculate about its implementation
 * class Sea {
 *     public boolean hasShips(int[] topRight, int[] bottomLeft);
 * }
 */

class Solution {
    public int countShips(Sea sea, int[] topRight, int[] bottomLeft) {
        Rectangle rectangle = new Rectangle(topRight, bottomLeft);
        
        return countShips(sea, rectangle);
    }
    
    private int countShips(Sea sea, Rectangle rectangle) {
        if(this.hasShips(sea, rectangle)) {
            if(!rectangle.isPoint()) {
                int[] topRight1 = new int[2];
                int[] bottomLeft1 = new int[2];
                topRight1[0] = (rectangle.topRight[0] + rectangle.bottomLeft[0]) / 2;
                topRight1[1] = (rectangle.topRight[1] + rectangle.bottomLeft[1]) / 2;
                bottomLeft1[0] = rectangle.bottomLeft[0];
                bottomLeft1[1] = rectangle.bottomLeft[1];
                Rectangle rectangle1 = new Rectangle(topRight1, bottomLeft1);
                
                int[] topRight2 = new int[2];
                int[] bottomLeft2 = new int[2];
                topRight2[0] = rectangle.topRight[0];
                topRight2[1] = (rectangle.topRight[1] + rectangle.bottomLeft[1]) / 2;
                bottomLeft2[0] = (rectangle.topRight[0] + rectangle.bottomLeft[0]) / 2 + 1;
                bottomLeft2[1] = rectangle.bottomLeft[1];
                Rectangle rectangle2 = new Rectangle(topRight2, bottomLeft2);
                
                int[] topRight3 = new int[2];
                int[] bottomLeft3 = new int[2];
                topRight3[0] = (rectangle.topRight[0] + rectangle.bottomLeft[0]) / 2;
                topRight3[1] = rectangle.topRight[1];
                bottomLeft3[0] = rectangle.bottomLeft[0];
                bottomLeft3[1] = (rectangle.topRight[1] + rectangle.bottomLeft[1]) / 2 + 1;
                Rectangle rectangle3 = new Rectangle(topRight3, bottomLeft3);
                
                int[] topRight4 = new int[2];
                int[] bottomLeft4 = new int[2];
                topRight4[0] = rectangle.topRight[0];
                topRight4[1] = rectangle.topRight[1];
                bottomLeft4[0] = (rectangle.topRight[0] + rectangle.bottomLeft[0]) / 2 + 1;
                bottomLeft4[1] = (rectangle.topRight[1] + rectangle.bottomLeft[1]) / 2 + 1;
                Rectangle rectangle4 = new Rectangle(topRight4, bottomLeft4);
                
                return countShips(sea, rectangle1) + countShips(sea, rectangle2) 
                    + countShips(sea, rectangle3) + countShips(sea, rectangle4);
            } else {
                return 1;
            }
        } else {
            return 0;
        }
    }
    
    private boolean hasShips(Sea sea, Rectangle rectangle) {
        return sea.hasShips(rectangle.topRight, rectangle.bottomLeft);
    }
    
    private class Rectangle {
        private int[] topRight;
        private int[] bottomLeft;
        
        private Rectangle(int[] topRight, int[] bottomLeft) {
            this.topRight = topRight;
            this.bottomLeft = bottomLeft;
        }
        
        private boolean isPoint() {
            return this.topRight[0] == this.bottomLeft[0] && this.topRight[1] == this.bottomLeft[1];
        }
    }
}