Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, ¡­ , ak) must be in non-descending order. (ie, a1 ¡Ü a2 ¡Ü ¡­ ¡Ü ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 




public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        
        if(candidates != null && candidates.length != 0) {
            Arrays.sort(candidates);
            
            Stack<Integer> path = new Stack<Integer>();
            generate(results, path, candidates, 0, target);
        }
        
        return results;
    }
    
    private void generate(List<List<Integer>> results, Stack<Integer> path, int[] candidates, int index, int target) {
        if(target > 0) {
            int i = index;
            while(i < candidates.length) {
                path.push(Integer.valueOf(candidates[i]));
                generate(results, path, candidates, i+1, target-candidates[i]);
                path.pop();
                i++;
                while(i < candidates.length && candidates[i]==candidates[i-1]) {
                    i++;
                }
            }
        }
        else {
            if(target == 0) {
                List<Integer> tmp = new ArrayList<Integer>();
                tmp.addAll(path);
                results.add(tmp);
            }
        }
    }
}
