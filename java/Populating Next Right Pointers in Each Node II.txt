Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL





/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) {
            return;
        }
        
        if(root.left != null) {
            if(root.right != null) {
                root.left.next = root.right;
            }
            else {
                TreeLinkNode node = root.next;
                while(node != null && node.left == null && node.right == null) {
                    node = node.next;
                }
                if(node != null) {
                    if(node.left != null) {
                        root.left.next = node.left;
                    }
                    else {
                        root.left.next = node.right;
                    }
                }
            }
        }
            
        if(root.right != null){
            TreeLinkNode node = root.next;
            while(node != null && node.left == null && node.right == null) {
                node = node.next;
            }
            if(node != null) {
                if(node.left != null) {
                    root.right.next = node.left;
                }
                else {
                    root.right.next = node.right;
                }
            }
        }
        
        connect(root.right);
        connect(root.left);
    }
}