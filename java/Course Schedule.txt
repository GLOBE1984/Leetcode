There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.

click to show more hints.

Hints:
This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.
Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.
Topological sort could also be done via BFS.



// Solution 1: 
/**
 * 典型的Topological Sorting。原理也很简单，在一个有向图中，每次找到一个没有前驱节点的节点（也就是入度为0的节点），然后把它指向其他节点的边都去掉，重复这个过程（BFS），直到所有节点已被找到，或者没有符合条件的节点（如果图中有环存在）。

回顾一下图的三种表示方式：边表示法（即题目中表示方法），邻接表法，邻接矩阵。用邻接表存储图比较方便寻找入度为0的节点。
 */
L = Empty list that will contain the sorted elements
S = Set of all nodes with no incoming edge

while S is non-empty do
    remove a node n from S
    add n to tail of L
    for each node m with an edge e from n to m do
        remove edge e from the graph
        if m has no other incoming edges then
            insert m into S

if graph has edges then
    return error   (graph has at least one cycle)
else 
    return L   (a topologically sorted order)
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(numCourses > 0 && prerequisites != null && prerequisites.length > 0) {
            List<Set<Integer>> dependencies = new ArrayList<>();
            for(int i = 0; i < numCourses; ++i) {
                dependencies.add(new HashSet<>());
            }
            
            for(int[] prerequisite : prerequisites) {
                dependencies.get(prerequisite[1]).add(prerequisite[0]);  
            }
            
            int[] ingresses = new int[numCourses];
            for(int i = 0; i < numCourses; i++) {  
                Set set = dependencies.get(i);  
                Iterator<Integer> iterator = set.iterator();  
                while (iterator.hasNext()) {  
                    ingresses[iterator.next()]++;  
                }  
            }
            
            for(int i = 0; i < numCourses; ++i) {
                // find a non-pre course  
                int j = 0;
                while(j < numCourses) {
                    if (ingresses[j] == 0) {
                        break;
                    }
                    j++;
                }

                // if not find a non-pre course  
                if (j == numCourses) {
                    return false;
                }

                ingresses[j] = -1;  

                // decrease courses that post the course  
                Set<Integer> set = dependencies.get(j);  
                Iterator<Integer> iterator = set.iterator();  
                while (iterator.hasNext()) {  
                    ingresses[iterator.next()]--;  
                }
            }
            
            return true;
        } else {
            return true;
        }
    }
}


// Solution 2: DFS with memorization
class Solution {
  public boolean canFinish(int numCourses, int[][] prerequisites) {
      
      // course -> list of next courses
      Map<Integer, List<Integer>> courseDict = new HashMap<>();
      
      // build the graph first
      for(int[] relation : prerequisites) {
          // relation[0] depends on relation[1]
          if(courseDict.containsKey(relation[1])) {
              courseDict.get(relation[1]).add(relation[0]);
          } else {
              List<Integer> nextCourses = new LinkedList<>();
              nextCourses.add(relation[0]);
              courseDict.put(relation[1], nextCourses);
          }
      }
      
      boolean[] checked = new boolean[numCourses];
      boolean[] path = new boolean[numCourses];
      
      for(int currCourse = 0; currCourse < numCourses; ++currCourse) {
          if(this.isCyclic(currCourse, courseDict, checked, path)) {
              return false;
          }
      }
      
      return true;
  }


  /*
   * backtracking method to check that no cycle would be formed starting from currCourse
   */
  private boolean isCyclic(Integer currCourse,
      Map<Integer, List<Integer>> courseDict,
      boolean[] checked, boolean[] path) {
      
      // bottom cases
      if(checked[currCourse]) {
          // this node has been checked, no cycle would be formed with this node.
          return false;
      }
      
      if(path[currCourse]) {
          // come across a previously visited node, i.e. detect the cycle
          return true;
      }
      
      // no following courses, no loop.
      if(!courseDict.containsKey(currCourse)) {
          return false;
      }
      
      // before backtracking, mark the node in the path
      path[currCourse] = true;
      
      // backtracking
      boolean ret = false;
      for(Integer nextCourse : courseDict.get(currCourse)) {
          ret = this.isCyclic(nextCourse, courseDict, checked, path);
          if(ret) {
              break;
          }
      }
      // after the visits of children, we come back to process the node itself
      // after backtracking, remove the node from the path
      path[currCourse] = false;
      
      // Now that we've visited the nodes in the downstream,
      // we complete the check of this node.
      checked[currCourse] = true;
      
      return ret;
  }
}