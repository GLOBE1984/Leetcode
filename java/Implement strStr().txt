Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

 

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Example 3:

Input: haystack = "", needle = ""
Output: 0
 

Constraints:

0 <= haystack.length, needle.length <= 5 * 104
haystack and needle consist of only lower-case English characters.





class Solution {
   /**
   * Base on KMP algorithm, refer to http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
   * and https://leetcode-cn.com/problems/implement-strstr/solution/bang-ni-ba-kmpsuan-fa-xue-ge-tong-tou-ming-ming-ba/
   *
   * @param haystack the source string
   * @param needle the pattern
   * @return the index of the first time needle appears in haystack
   */
  public int strStr(String haystack, String needle) {
    if(haystack != null && haystack.length() != 0 && needle != null && needle.length() != 0) {
      int[] table = this.createPartialMatchTable(needle);
      int index = 0;
      int matchedLength = 0;

      while(index < haystack.length()) {
        while(matchedLength >= 1 && haystack.charAt(index) != needle.charAt(matchedLength)) {
          matchedLength = table[matchedLength-1];
        }
        if(haystack.charAt(index) == needle.charAt(matchedLength)) {
          matchedLength++;
          if(matchedLength == needle.length()) {
            return index - matchedLength + 1;
          }
        }
        index++;
      }

      return -1;
    } else if(needle == null || needle.length() == 0) {
      return 0;
    } else {
      return -1;
    }
  }

  /**
   * Create partial match table from a pattern
   *
   * @param pattern
   * @return int array to represent the partial match table
   */
  private int[] createPartialMatchTable(String pattern) {
    int matchedLength = 0;
    int[] table = new int[pattern.length()];

    for(int i = 1; i < pattern.length(); ++i) {
      while(matchedLength >= 1 && pattern.charAt(matchedLength) != pattern.charAt(i)) {
        matchedLength = table[matchedLength-1];
      }

      if(pattern.charAt(matchedLength) == pattern.charAt(i)) {
        matchedLength++;
      }

      table[i] = matchedLength;
    }

    return table;
  }
}