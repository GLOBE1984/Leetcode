Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:
Input: n = 1
Output: ["()"]
 

Constraints:
1 <= n <= 8




class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> results = new ArrayList<String>();
        
        if(n > 0) {
            generateParenthesis(n, 0, 0, "", results);
        }
        
        return results;
    }
    
    private void generateParenthesis(int n, int left, int right, String current, List<String> results) {
        if(left == n && right == n) {
            results.add(current);
        } else {
            if(left == right) {
                generateParenthesis(n, left+1, right, current.concat("("), results);
            } else {
                if(left < n) {
                generateParenthesis(n, left+1, right, current.concat("("), results);
                }
                generateParenthesis(n, left, right+1, current.concat(")"), results);
            }
        }
    }
}