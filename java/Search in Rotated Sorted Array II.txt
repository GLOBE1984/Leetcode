Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.





class Solution {
    public boolean search(int[] nums, int target) {
       if(nums != null && nums.length > 0) {
            return search(nums, target, 0, nums.length-1);
        }
        else {
            return false;
        } 
    }
    
    private boolean search(int[] nums, int target, int start, int end) {
        if(start == end) {
            if(nums[start] == target) {
                return true;
            }
            else {
                return false;
            }
        }
        
        int mid = (start + end)/2;
        if(nums[mid] > target) {
            boolean result = search(nums, target, start, mid);
            if(!result && (nums[mid] <= nums[start] || nums[mid] >= nums[end])) {
                result = search(nums, target, mid+1, end);
            }
            return result;
        }
        else if(nums[mid] < target) {
            boolean result = search(nums, target, mid+1, end);
            if(!result && (nums[mid] <= nums[start] || nums[mid] >= nums[end])) {
                result = search(nums, target, start, mid);
            }
            return result;
        }
        else {
            return true;
        }
    }
}