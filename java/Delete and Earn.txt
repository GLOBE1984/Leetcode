You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:

Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.

 

Example 1:
Input: nums = [3,4,2]
Output: 6
Explanation: You can perform the following operations:
- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].
- Delete 2 to earn 2 points. nums = [].
You earn a total of 6 points.

Example 2:
Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: You can perform the following operations:
- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].
- Delete a 3 again to earn 3 points. nums = [3].
- Delete a 3 once more to earn 3 points. nums = [].
You earn a total of 9 points.
 

Constraints:
1 <= nums.length <= 2 * 10^4
1 <= nums[i] <= 10^4



Analysis: 
This problem is an excellent example of why it is important to read the problem description carefully. We can make a substantial optimization by noticing that the order of the elements in nums is irrelevant. At any operation, we pick a number, let's say x, and delete all occurrences of x - 1 and x + 1. That means if x occurs multiple times in nums and we take one, we may as well take all of them because after deleting all x - 1 and x + 1, we can only stand to gain more points by taking additional x.
This forms our recurrence relation: for an arbitrary x, maxPoints(x) = max(maxPoints(x - 1), maxPoints(x - 2) + gain), where gain is the number of points we can gain from taking x.






// Solution 1: top to bottom dp
class Solution {
    public int deleteAndEarn(int[] nums) {
        if(nums != null && nums.length > 0) {
            Map<Integer, Integer> points = new HashMap<>();
            int max = 0;
            
            for(int num : nums) {
                points.put(num, points.getOrDefault(num, 0)+num);
                max = Math.max(max, num);
            }
            
            Map<Integer, Integer> records = new HashMap<>();
            
            return deleteAndEarn(max, points, records);
        } else {
            return 0;
        }
    }
    
    private int deleteAndEarn(int num, Map<Integer, Integer> points, Map<Integer, Integer> records) {
        if(num == 0) {
            return 0;
        }
        
        if(num == 1) {
            return points.getOrDefault(1, 0);
        }
        
        if(records.containsKey(num)) {
            return records.get(num).intValue();
        }
        
        int gain = points.getOrDefault(num, 0);
        int max = Math.max(deleteAndEarn(num-1, points, records), gain+deleteAndEarn(num-2, points, records));
        records.put(num, max);
        
        return max;
    }
}


// Solution 2: bottom to top dp
class Solution {
    public int deleteAndEarn(int[] nums) {
        if(nums != null && nums.length > 0) {
            Map<Integer, Integer> points = new HashMap<>();
            int max = 0;
            
            for(int num : nums) {
                points.put(num, points.getOrDefault(num, 0)+num);
                max = Math.max(max, num);
            }
            
            int minus2 = 0;
            int minus1 = points.getOrDefault(1, 0);
            
            for(int i = 2; i <= max; ++i) {
                int tmp = minus1;
                minus1 = Math.max(minus1, minus2+points.getOrDefault(i, 0));
                minus2 = tmp;
            }
            
            return minus1;
        } else {
            return 0;
        }
    }
}