Given a list of non negative integers, arrange them such that they form the largest number.

For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.

Note: The result may be very large, so you need to return a string instead of an integer.




// Solution 1: concat and compare
class Solution {
    public String largestNumber(int[] nums) {
        if(nums != null && nums.length > 0) {
            Integer[] newNums = Arrays.stream( nums ).boxed().toArray( Integer[]::new );
            Arrays.sort(newNums, new Comparator<Integer>(){
                public int compare(Integer i1, Integer i2) {
                    String s1 = i1 + "" + i2;
                    String s2 = i2 + "" + i1;
                    
                    int length = s1.length();
                    int index = 0;
                    while(index < length) {
                        if(s1.charAt(index) != s2.charAt(index)) {
                            return s2.charAt(index) - s1.charAt(index);
                        }
                        index++;
                    }
                    return 0;
                }
            });
            
            StringBuilder builder = new StringBuilder();
            for(Integer newNum : newNums) {
                builder.append(newNum);
            }
            while(builder.length() > 1 && builder.charAt(0) == '0') {
                builder = new StringBuilder(builder.substring(1));
            }
            return builder.toString();
        }
        else {
            return "";
        }
    }
}


// Solution 2: sort in the array
class Solution {
    public String largestNumber(int[] nums) {
        if(nums != null && nums.length > 0) {
            Integer[] numbers = new Integer[nums.length];
            int zeroCount = 0;
            for(int i = 0; i < nums.length; ++i) {
                numbers[i] = Integer.valueOf(nums[i]);
                if(nums[i] == 0) {
                    zeroCount++;
                }
            }
            
            // Dealing with the case ["0", "0"]
            if(zeroCount == nums.length) {
                return "0";
            }
            
            Arrays.sort(numbers, new LC179Comparator());
            
            StringBuffer buffer = new StringBuffer();
            for(int number : numbers) {
                buffer.append(number);
            }
            
            return buffer.toString();
        } else {
            return "";
        }
    }
    
    private class LC179Comparator implements Comparator<Integer> {
        
        public int compare(Integer i1, Integer i2) {
            String str1 = i1.toString();
            String str2 = i2.toString();
            
            return compare(str1, 0, str2, 0);
        }
        
        private int compare(String str1, int index1, String str2, int index2) {
            char c1 = str1.charAt(index1);
            char c2 = str2.charAt(index2);
            if((c1 - '0') != (c2 - '0')) {
                return (c1 - '0') > (c2 - '0') ? -1 : 1;
            } else {
                if(index1 < str1.length()-1 && index2 < str2.length()-1) {
                    return compare(str1, index1+1, str2, index2+1);
                } else if(index1 < str1.length()-1) {
                    return compare(str1, index1+1, str2, 0);
                } else if(index2 < str2.length()-1) {
                    return compare(str1, 0, str2, index2+1);
                } else {
                    return 0;
                }
            }
        }
        
    }
}