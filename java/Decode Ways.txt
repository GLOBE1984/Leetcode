A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.





public class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0 || s.charAt(0) == '0') {
            return 0;
        }
        
        
        int length = s.length();
        int[] results = new int[length];
        for(int i = 0; i < length; ++i) {
            results[i] = 0;
        }
        
        for(int i = length-1; i >= 0; --i) {
            boolean result = numDecodings(s, i, length, results);
            if(!result) {
                break;
            }
        }
        
        return results[0];
    }
    
    private boolean numDecodings(String s, int start, int length, int[] results) {
        if(start == length - 1) {
            if(s.charAt(start) != '0') {
                results[start] = 1;
            }
            return true;
        }
        
        if(start == length - 2) {
            if(s.charAt(start) != '0') {
                String sub = s.substring(start, length);
                int num = Integer.valueOf(sub).intValue();
                if(num <= 26) {
                    results[start] = results[length-1] + 1;
                }
                else {
                    if(num % 10 == 0) {
                        results[start] = 0;
                    }
                    else {
                        results[start] = results[length-1];
                    }
                }
                if(results[start] == 0) {
                    return false;
                }
                else {
                   return true; 
                }
            }
            else {
                results[start] = results[length-1];
                if(results[start] == 0) {
                    return false;
                }
                else {
                    return true;
                }
            }
        }
        
        if(s.charAt(start) != '0') {
            String sub = s.substring(start, start+2);
            int num = Integer.valueOf(sub).intValue();
            if(num <= 26) {
                if(num % 10 == 0) {
                    results[start] = results[start + 2];
                }
                else {
                    results[start] = results[start + 1] + results[start + 2];
                }
            }
            else {
                if(num % 10 == 0) {
                    results[start] = 0;
                }
                else {
                    results[start] = results[start + 1];
                }
            }
            if(results[start] == 0) {
                return false;
            }
            else {
                return true; 
            }
        }
        else {
            if(s.charAt(start + 1) != '0') {
                results[start] = results[start + 1];
            }
            else {
                results[start] = 0;
            }
            if(results[start] == 0) {
                return false;
            }
            else {
                return true;
            }
        }
    }
}
