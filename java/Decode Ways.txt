A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.





class Solution {
    public int numDecodings(String s) {
        if(s != null && s.length() > 0) {
            
            int[] counts = new int[s.length()];
            for(int i = 0; i < s.length(); ++i) {
                counts[i] = -1;
            }
            
            return numDecodings(s, 0, counts);
            
        } else {
            return 0;
        }
    }
    
    private int numDecodings(String s, int index, int[] counts) {
        if(index == s.length()) {
            return 1;
        }
        
        if(s.charAt(index) == '0') {
            return 0;
        }
        
        if(index == s.length()-1) {
            return 1;
        }
        
        if(counts[index] > -1) {
            return counts[index];
        }
        
        if(s.charAt(index) >= '3') {
            int count = numDecodings(s, index+1, counts);
            counts[index] = count;
            return count;
        } else if(s.charAt(index) == '1') {
            int count = numDecodings(s, index+1, counts) + numDecodings(s, index+2, counts);
            counts[index] = count;
            return count;
        } else {
            int count = numDecodings(s, index+1, counts);
            if(s.charAt(index+1) >= '0' && s.charAt(index+1) <= '6') {
                count += numDecodings(s, index+2, counts);
            }
            counts[index] = count;
            return count;
        }
    }
}
