public class SnakeGame {
    private Queue<Point> snake;
    private int[][] food;
    private int food_current;
    private Point head;
    private final int width;
    private final int height;
    
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        this.food_current = 0;
        
        this.snake = new LinkedList<Point>();
        this.head = new Point(0, 0);
        this.snake.offer(this.head);
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        boolean eat = false;
        if("U".equals(direction)) {
            if((this.head.getX()-1) < 0) {
                return -1;
            }
            else {
                this.head = new Point(this.head.getX()-1, this.head.getY());
            }
        }
        else if("L".equals(direction)) {
            if((this.head.getY()-1) < 0) {
                return -1;
            }
            else {
                this.head = new Point(this.head.getX(), this.head.getY()-1);
            }
        }
        else if("R".equals(direction)) {
            if((this.head.getY()+1) == this.width) {
                return -1;
            }
            else {
                this.head = new Point(this.head.getX(), this.head.getY()+1);
            }
        }
        else {
            if((this.head.getX()+1) == this.height) {
                return -1;
            }
            else {
                this.head = new Point(this.head.getX()+1, this.head.getY());
            }
        }
        
        if(this.food_current < this.food.length) {
            if(this.head.getX() == this.food[this.food_current][0] && this.head.getY() == this.food[this.food_current][1]) {
                eat = true;
            }
        }
        
        if(eat) {
            this.food_current = this.food_current + 1;
            this.snake.offer(this.head);
            return this.food_current;
        }
        else {
            if(this.snake.contains(this.head)) {
                return -1;
            }
            else {
                int size = this.snake.size();
                int index = 0;
                while(index < size - 1) {
                    Point point = this.snake.poll();
                    point = this.snake.peek();
                    this.snake.offer(point);
                    index++;
                }
                this.snake.poll();
                this.snake.offer(this.head);
                return this.food_current;
            }
        }
    }
    
    private class Point {
        private int x;
        private int y;
        
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
        
        public int getX() {
            return this.x;
        }
        
        public void setX(int x) {
            this.x = x;
        }
        
        public int getY() {
            return this.y;
        }
        
        public void setY(int y) {
            this.y = y;
        }
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */