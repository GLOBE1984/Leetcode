Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:

Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
Example 2:

Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]

Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
 

Note:

The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.





// Solution 1
class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if(matrix != null && matrix.length > 0 && matrix[0].length > 0) {
            int[][] results = new int[matrix.length][matrix[0].length];
            Queue<Point> queue = new LinkedList<>();
            Set<Point> visited = new HashSet<>();
            
            for(int i = 0; i < matrix.length; ++i) {
                for(int j = 0; j <matrix[0].length; ++j) {
                    results[i][j] = Integer.MAX_VALUE;
                    if(matrix[i][j] == 0) {
                        Point point = new Point(i, j);
                        queue.offer(point);
                        visited.add(point);
                    }
                }
            }
            
            int steps = 0;
            while(!queue.isEmpty()) {
                Queue<Point> newQueue = new LinkedList<>();
                while(!queue.isEmpty()) {
                    Point point = queue.poll();
                    results[point.row][point.col] = steps;
                    
                    if(point.row > 0 && matrix[point.row-1][point.col] == 1) {
                        Point newPoint = new Point(point.row - 1, point.col);
                        if(!visited.contains(newPoint)) {
                            newQueue.offer(newPoint);
                            visited.add(newPoint);
                        }
                    }
                    
                    if(point.row < matrix.length-1 && matrix[point.row+1][point.col] == 1) {
                        Point newPoint = new Point(point.row + 1, point.col);
                        if(!visited.contains(newPoint)) {
                            newQueue.offer(newPoint);
                            visited.add(newPoint);
                        }
                    }
                    
                    if(point.col > 0 && matrix[point.row][point.col-1] == 1) {
                        Point newPoint = new Point(point.row, point.col - 1);
                        if(!visited.contains(newPoint)) {
                            newQueue.offer(newPoint);
                            visited.add(newPoint);
                        }
                    }
                    
                    if(point.col < matrix[0].length - 1 && matrix[point.row][point.col+1] == 1) {
                        Point newPoint = new Point(point.row, point.col + 1);
                        if(!visited.contains(newPoint)) {
                            newQueue.offer(newPoint);
                            visited.add(newPoint);
                        }
                    }
                }
                queue = newQueue;
                steps++;
            }
            
            return results;
        } else {
            return new int[0][0];
        }
    }
    
    class Point {
        private int row;
        private int col;
        
        Point(int row, int col) {
            this.row = row;
            this.col = col;
        }
        
        public int hashCode() {
            return this.row * 10000 + this.col;
        }
        
        public boolean equals(Object object) {
            if(!(object instanceof Point)) {
                return false;
            }
            
            Point point = (Point)object;
            return this.row == point.row && this.col == point.col;
        }
    }
}


// Solution 2
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        if(mat != null && mat.length > 0 && mat[0].length > 0) {            
            Queue<int[]> queue = new LinkedList<>();
            for(int i = 0; i < mat.length; ++i) {
                for(int j = 0; j < mat[0].length; ++j) {
                    if(mat[i][j] == 0) {
                        queue.offer(new int[]{i, j});
                    }
                }
            }
            
            int distance = 1;
            while(!queue.isEmpty()) {
                int size = queue.size();
                int index = 0;
                
                while(index < size) {
                    int[] point = queue.poll();
                    
                    if(point[0] > 0 && mat[point[0]-1][point[1]] == 1) {
                        queue.offer(new int[]{point[0]-1, point[1]});
                        mat[point[0]-1][point[1]] = 10000 + distance;
                    }
                    
                    if(point[0] < mat.length-1 && mat[point[0]+1][point[1]] == 1) {
                        queue.offer(new int[]{point[0]+1, point[1]});
                        mat[point[0]+1][point[1]] = 10000 + distance;
                    }
                    
                    if(point[1] > 0 && mat[point[0]][point[1]-1] == 1) {
                        queue.offer(new int[]{point[0], point[1]-1});
                        mat[point[0]][point[1]-1] = 10000 + distance;
                    }
                    
                    if(point[1] < mat[0].length-1 && mat[point[0]][point[1]+1] == 1) {
                        queue.offer(new int[]{point[0], point[1]+1});
                        mat[point[0]][point[1]+1] = 10000 + distance;
                    }
                    
                    index++;
                }
                
                distance++;
            }
            
            for(int i = 0; i < mat.length; ++i) {
                for(int j = 0; j < mat[0].length; ++j) {
                    if(mat[i][j] > 10000) {
                        mat[i][j] -= 10000;
                    }
                }
            }
        }
        
        return mat;
    }
}