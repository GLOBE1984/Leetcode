Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || inorder.length == 0 || postorder == null || postorder.length == 0) {
            return null;
        }
        
        Map<TreeNode, Integer> map = new HashMap<TreeNode, Integer>();
    
        TreeNode root = new TreeNode(postorder[postorder.length-1]);
        map.put(root, Integer.valueOf(indexAt(inorder, postorder[postorder.length-1])));
        for(int i = postorder.length-2; i >= 0; --i) {
            TreeNode node = new TreeNode(postorder[i]);
            int index = indexAt(inorder, postorder[i]);
            map.put(node, Integer.valueOf(index));
            
            TreeNode current = root;
            while(current != null) {
                int tmp = map.get(current).intValue();
                if(index < tmp) {
                    if(current.left == null) {
                        current.left = node;
                        break;
                    }
                    else {
                        current = current.left;
                    }
                }
                else {
                    if(current.right == null) {
                        current.right = node;
                        break;
                    }
                    else {
                        current = current.right;
                    }
                }
            }
        }

        return root;
    }
    
    private int indexAt(int[] inorder, int val) {
        for(int i = 0; i < inorder.length; ++i) {
            if(inorder[i] == val) {
                return i;
            }
        }
        return -1;
    }
}
