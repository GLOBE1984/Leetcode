Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder != null && inorder.length > 0 && postorder != null && postorder.length > 0) {
            Map<Integer, Integer> map = new HashMap<>();
            for(int i = 0; i < inorder.length; ++i) {
                map.put(inorder[i], i);
            }
            
            return buildTree(map, 0, inorder.length-1, postorder, 0, postorder.length-1);
        } else {
            return null;
        }
    }
    
    private TreeNode buildTree(Map<Integer, Integer> map, int inorderLeft, int inorderRight, int[] postorder, int postorderLeft, int postorderRight) {
        if(postorderLeft > postorderRight) {
            return null;
        }
        
        if(postorderLeft == postorderRight) {
            return new TreeNode(postorder[postorderLeft]);
        }
        
        TreeNode root = new TreeNode(postorder[postorderRight]);
        int rootInorderIndex = map.get(root.val).intValue();
        int leftLength = rootInorderIndex - inorderLeft;
        
        TreeNode left = buildTree(map, inorderLeft, rootInorderIndex-1, postorder, postorderLeft, postorderLeft+leftLength-1);
        TreeNode right = buildTree(map, rootInorderIndex+1, inorderRight, postorder, postorderLeft+leftLength, postorderRight-1);
        root.left = left;
        root.right = right;
        
        return root;
    }
}
