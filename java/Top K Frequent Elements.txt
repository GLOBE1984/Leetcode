Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.



class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if(nums != null && nums.length > 0) {
            Map<Integer, IntegerCount> map = new HashMap<>();
            
            for(int num : nums) {
                IntegerCount integerCount = map.getOrDefault(num, new IntegerCount());
                integerCount.num = num;
                integerCount.count++;
                map.put(num, integerCount);
            }
            
            PriorityQueue<IntegerCount> priorityQueue = new PriorityQueue<>(k, new Comparator<IntegerCount>(){
                
                public int compare(IntegerCount ic1, IntegerCount ic2) {
                    return ic1.count - ic2.count;
                }
                
            });
            
            Iterator<IntegerCount> iterator = map.values().iterator();
            while(iterator.hasNext()) {
                priorityQueue.offer(iterator.next());
                if(priorityQueue.size() > k) {
                    priorityQueue.poll();
                }
            }
            
            int[] results = new int[k];
            for(int i = 0; i < k; ++i) {
                results[i] = priorityQueue.poll().num;
            }
            
            return results;
        } else {
            return new int[0];
        }
    }
    
    private class IntegerCount {
        private int num;
        private int count;
    }
}
