Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]
 

Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10





class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(nums != null && nums.length > 0) {
            Arrays.sort(nums);
            
            Node node = new Node();
            dfs(nums, node, results);
        }
        
        return results;
    }
    
    private void dfs(int[] nums, Node node, List<List<Integer>> results) {
        results.add(node.list);
        for(int i = node.index+1; i < nums.length; ++i) {
            if(i != node.index+1 && nums[i] == nums[i-1]) {
                continue;
            }
            Node copy = new Node(node);
            copy.list.add(nums[i]);
            copy.index = i;
            dfs(nums, copy, results);
        }
    }
    
    private class Node {
        private List<Integer> list;
        private int index;
        
        private Node() {
            this.list = new ArrayList<>();
            this.index = -1;
        }
        
        private Node(Node node) {
            this.list = new ArrayList<>(node.list);
            this.index = node.index;
        }
    }
}