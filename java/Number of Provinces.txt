There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]





class Solution {
    public int findCircleNum(int[][] M) {
        if(M != null && M.length > 0 && M[0].length > 0) {
            int[] cities = new int[M.length];
            for(int i = 0; i < cities.length; ++i) {
                cities[i] = i;
            }
            
            int[] sizes = new int[M.length];
            Arrays.fill(sizes, 1);
            
            for(int i = 0; i < M.length; ++i) {
                for(int j = i+1; j < M[i].length; ++j) {
                    if(M[i][j] == 1) {
                        union(i, j, cities, sizes);
                    }
                }
            }
            
            Set<Integer> roots = new HashSet<>();
            for(int i = 0; i < cities.length; ++i) {
                int root = find(i, cities);
                if(!roots.contains(root)) {
                    roots.add(root);
                }
            }
            return roots.size();
        } else {
            return 0;
        }
    }
    
    private void union(int city1, int city2, int[] cities, int[] sizes) {
        int root1 = find(city1, cities);
        int root2 = find(city2, cities);
        if(root1 != root2) {
            if(sizes[root1] <= sizes[root2]) {
                cities[root1] = root2;
                sizes[root2] += sizes[root1];
            } else {
                cities[root2] = root1;
                sizes[root1] += sizes[root2];
            }
        }
    }
    
    private int find(int city, int[] cities) {
        int current = city;
        int parent = cities[current];
        while(parent != current) {
            current = parent;
            parent = cities[current];
        }
        return parent;
    }
}