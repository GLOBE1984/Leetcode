Design a max stack that supports push, pop, top, peekMax and popMax.

push(x) -- Push element x onto stack.
pop() -- Remove the element on top of the stack and return it.
top() -- Get the element on the top.
peekMax() -- Retrieve the maximum element in the stack.
popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.

Example 1:
MaxStack stack = new MaxStack();
stack.push(5); 
stack.push(1);
stack.push(5);
stack.top(); -> 5
stack.popMax(); -> 5
stack.top(); -> 1
stack.peekMax(); -> 5
stack.pop(); -> 1
stack.top(); -> 5

Note:
-1e7 <= x <= 1e7
Number of operations won't exceed 10000.
The last four operations won't be called when stack is empty.





class MaxStack {
    private final Stack<Integer> stack;
    private final PriorityQueue<Integer> queue;
    
    /** initialize your data structure here. */
    public MaxStack() {
        this.stack = new Stack<Integer>();
        this.queue = new PriorityQueue<Integer>(new Comparator<Integer>() {
            public int compare(Integer i1, Integer i2) {
                return i2.compareTo(i1);
            }
        });
    }
    
    public void push(int x) {
        this.stack.push(x);
        this.queue.offer(x);
    }
    
    public int pop() {
        Integer tmp = this.stack.pop();
        this.queue.remove(tmp);
        return tmp.intValue();
    }
    
    public int top() {
        return this.stack.peek();
    }
    
    public int peekMax() {
        return this.queue.peek();
    }
    
    public int popMax() {
        Integer tmp = this.queue.poll();
        Stack<Integer> backup = new Stack<Integer>();
        while(!this.stack.empty() && this.stack.peek().intValue() != tmp.intValue()) {
            backup.push(this.stack.pop());
        }
        this.stack.pop();
        while(!backup.empty()) {
            this.stack.push(backup.pop());
        }
        return tmp.intValue();
    }
}

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.peekMax();
 * int param_5 = obj.popMax();
 */