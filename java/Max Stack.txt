Design a max stack that supports push, pop, top, peekMax and popMax.

push(x) -- Push element x onto stack.
pop() -- Remove the element on top of the stack and return it.
top() -- Get the element on the top.
peekMax() -- Retrieve the maximum element in the stack.
popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.

Example 1:
MaxStack stack = new MaxStack();
stack.push(5); 
stack.push(1);
stack.push(5);
stack.top(); -> 5
stack.popMax(); -> 5
stack.top(); -> 1
stack.peekMax(); -> 5
stack.pop(); -> 1
stack.top(); -> 5

Note:
-1e7 <= x <= 1e7
Number of operations won't exceed 10000.
The last four operations won't be called when stack is empty.




// Solution 1:
class MaxStack {
    private final Stack<Integer> stack;
    private final PriorityQueue<Integer> queue;
    
    /** initialize your data structure here. */
    public MaxStack() {
        this.stack = new Stack<Integer>();
        this.queue = new PriorityQueue<Integer>(new Comparator<Integer>() {
            public int compare(Integer i1, Integer i2) {
                return i2.compareTo(i1);
            }
        });
    }
    
    public void push(int x) {
        this.stack.push(x);
        this.queue.offer(x);
    }
    
    public int pop() {
        Integer tmp = this.stack.pop();
        this.queue.remove(tmp);
        return tmp.intValue();
    }
    
    public int top() {
        return this.stack.peek();
    }
    
    public int peekMax() {
        return this.queue.peek();
    }
    
    public int popMax() {
        Integer tmp = this.queue.poll();
        Stack<Integer> backup = new Stack<Integer>();
        while(!this.stack.empty() && this.stack.peek().intValue() != tmp.intValue()) {
            backup.push(this.stack.pop());
        }
        this.stack.pop();
        while(!backup.empty()) {
            this.stack.push(backup.pop());
        }
        return tmp.intValue();
    }
}

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.peekMax();
 * int param_5 = obj.popMax();
 */


// Solution 2: 
class MaxStack {

    private long timestamp;
    private TreeMap<Long, Integer> timeMapping;
    private TreeMap<Integer, Stack<Long>> valMapping;
    
    public MaxStack() {
        this.timestamp = 0;
        this.timeMapping = new TreeMap<>();
        this.valMapping = new TreeMap<>();
    }
    
    public void push(int x) {
        this.timestamp++;
        this.timeMapping.put(this.timestamp, x);
        Stack<Long> stack = this.valMapping.getOrDefault(x, new Stack<Long>());
        stack.push(this.timestamp);
        this.valMapping.put(x, stack);
    }
    
    public int pop() {
        Map.Entry<Long, Integer> entry = this.timeMapping.lastEntry();
        this.timeMapping.remove(entry.getKey());
        Stack<Long> stack = this.valMapping.get(entry.getValue());
        stack.pop();
        if(stack.isEmpty()) {
            this.valMapping.remove(entry.getValue());
        }
        return entry.getValue();
    }
    
    public int top() {
        Map.Entry<Long, Integer> entry = this.timeMapping.lastEntry();
        return entry.getValue();
    }
    
    public int peekMax() {
        Map.Entry<Integer, Stack<Long>> entry = this.valMapping.lastEntry();
        return entry.getKey();
    }
    
    public int popMax() {
        Map.Entry<Integer, Stack<Long>> entry = this.valMapping.lastEntry();
        Stack<Long> stack = entry.getValue();       
        
        long t = stack.pop().longValue();
        if(stack.isEmpty()) {
            this.valMapping.remove(entry.getKey());
        }
        
        this.timeMapping.remove(t);
        
        return entry.getKey();
    }
}

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.peekMax();
 * int param_5 = obj.popMax();
 */


// Solution 3: 
class MaxStack {
    TreeMap<Integer, List<Node>> map;
    DoubleLinkedList dll;

    public MaxStack() {
        map = new TreeMap();
        dll = new DoubleLinkedList();
    }

    public void push(int x) {
        Node node = dll.add(x);
        if(!map.containsKey(x))
            map.put(x, new ArrayList<Node>());
        map.get(x).add(node);
    }

    public int pop() {
        int val = dll.pop();
        List<Node> L = map.get(val);
        L.remove(L.size() - 1);
        if (L.isEmpty()) map.remove(val);
        return val;
    }

    public int top() {
        return dll.peek();
    }

    public int peekMax() {
        return map.lastKey();
    }

    public int popMax() {
        int max = peekMax();
        List<Node> L = map.get(max);
        Node node = L.remove(L.size() - 1);
        dll.unlink(node);
        if (L.isEmpty()) map.remove(max);
        return max;
    }
}

class DoubleLinkedList {
    Node head, tail;

    public DoubleLinkedList() {
        head = new Node(0);
        tail = new Node(0);
        head.next = tail;
        tail.prev = head;
    }

    public Node add(int val) {
        Node x = new Node(val);
        x.next = tail;
        x.prev = tail.prev;
        tail.prev = tail.prev.next = x;
        return x;
    }

    public int pop() {
        return unlink(tail.prev).val;
    }

    public int peek() {
        return tail.prev.val;
    }

    public Node unlink(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
        return node;
    }
}

class Node {
    int val;
    Node prev, next;
    public Node(int v) {val = v;}
}