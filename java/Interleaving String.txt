Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m non-empty substrings respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.

Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.

Example 3:
Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:
0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.





class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1 != null && s2 != null && s3 != null) {
            if(s1.length() == 0 && s2.length() == 0 && s3.length() == 0) {
                return true;
            }
            
            int[][] dp = new int[s1.length()][s2.length()];
            
            for(int i = 0; i < s1.length(); ++i) {
                for(int j = 0; j < s2.length(); ++j) {
                    dp[i][j] = -1;
                }
            }
            
            return isInterleave(s1, 0, s2, 0, s3, 0, dp);
        } else {
            return false;
        }
    }
    
    private boolean isInterleave(String s1, int index1, String s2, int index2, String s3, int index3, int[][] dp) {
        if(index1 == s1.length()) {
            if(index3 < s3.length()) {
                return s2.substring(index2).equals(s3.substring(index3));
            } else {
                return false;
            }
        }
        
        if(index2 == s2.length()) {
            if(index3 < s3.length()) {
                return s1.substring(index1).equals(s3.substring(index3));
            } else {
                return false;
            }
        }
        
        if(dp[index1][index2] != -1) {
            return dp[index1][index2] == 1 ? true : false;
        }
        
        boolean result = false;
        for(int i = index1; i < s1.length(); ++i) {
            if(index3+i-index1 < s3.length() && s1.charAt(i) == s3.charAt(index3+i-index1)) {
                result |= isInterleave(s1, i+1, s2, index2, s3, index3+i-index1+1, dp);
            } else {
                break;
            }
            
            if(result) {
                break;
            }
        }
        
        if(result) {
            dp[index1][index2] = 1;
            return true;
        } else {
            for(int i = index2; i < s2.length(); ++i) {
                if(index3+i-index2 < s3.length() && s2.charAt(i) == s3.charAt(index3+i-index2)) {
                    result |= isInterleave(s1, index1, s2, i+1, s3, index3+i-index2+1, dp);
                } else {
                    break;
                }

                if(result) {
                    break;
                }
            }
            
            dp[index1][index2] = result ? 1 : 0;
            return result;
        }
    }
}