We can represent a sentence as an array of words, for example, the sentence "I am happy with leetcode" can be represented as arr = ["I","am",happy","with","leetcode"].

Given two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.

Return true if sentence1 and sentence2 are similar, or false if they are not similar.

Two sentences are similar if:

They have the same length (i.e., the same number of words)
sentence1[i] and sentence2[i] are similar.
Notice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words a and b are similar, and the words b and c are similar, then a and c are similar.

 

Example 1:
Input: sentence1 = ["great","acting","skills"], sentence2 = ["fine","drama","talent"], similarPairs = [["great","good"],["fine","good"],["drama","acting"],["skills","talent"]]
Output: true
Explanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.

Example 2:
Input: sentence1 = ["I","love","leetcode"], sentence2 = ["I","love","onepiece"], similarPairs = [["manga","onepiece"],["platform","anime"],["leetcode","platform"],["anime","manga"]]
Output: true
Explanation: "leetcode" --> "platform" --> "anime" --> "manga" --> "onepiece".
Since "leetcode is similar to "onepiece" and the first two words are the same, the two sentences are similar.

Example 3:
Input: sentence1 = ["I","love","leetcode"], sentence2 = ["I","love","onepiece"], similarPairs = [["manga","hunterXhunter"],["platform","anime"],["leetcode","platform"],["anime","manga"]]
Output: false
Explanation: "leetcode" is not similar to "onepiece".
 

Constraints:

1 <= sentence1.length, sentence2.length <= 1000
1 <= sentence1[i].length, sentence2[i].length <= 20
sentence1[i] and sentence2[i] consist of lower-case and upper-case English letters.
0 <= similarPairs.length <= 2000
similarPairs[i].length == 2
1 <= xi.length, yi.length <= 20
xi and yi consist of English letters.





class Solution {
    public boolean areSentencesSimilarTwo(String[] sentence1, String[] sentence2, List<List<String>> similarPairs) {
        if(sentence1 != null && sentence2 != null) {
            if(sentence1.length != sentence2.length) {
                return false;
            }
            
            Map<String, String> similarWords = new HashMap<>();
            Map<String, Integer> sizes = new HashMap<>();
            for(int i = 0; i < similarPairs.size(); ++i) {
                if(!similarWords.containsKey(similarPairs.get(i).get(0))) {
                    similarWords.put(similarPairs.get(i).get(0), similarPairs.get(i).get(0));
                    sizes.put(similarPairs.get(i).get(0), 1);
                }
                if(!similarWords.containsKey(similarPairs.get(i).get(1))) {
                    similarWords.put(similarPairs.get(i).get(1), similarPairs.get(i).get(1));
                    sizes.put(similarPairs.get(i).get(1), 1);
                }
                union(similarPairs.get(i).get(0), similarPairs.get(i).get(1), similarWords, sizes);
            }
            
            int length = sentence1.length;
            for(int i = 0; i < length; ++i) {
                if(sentence1[i].equals(sentence2[i])) {
                    continue;
                } else {
                    if(similarWords.containsKey(sentence1[i]) && similarWords.containsKey(sentence2[i])) {
                        if(!find(sentence1[i], similarWords).equals(find(sentence2[i], similarWords))) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            }
            return true;
        } else if(sentence1 != null) {
            return false;
        } else if(sentence2 != null) {
            return false;
        } else {
            return true;
        }
    }
    
    private void union(String word1, String word2, Map<String, String> similarWords, Map<String, Integer> sizes) {
        String root1 = find(word1, similarWords);
        String root2 = find(word2, similarWords);
        if(!root1.equals(root2)) {
            if(sizes.get(root1).intValue() <= sizes.get(root2).intValue()) {
                similarWords.put(root1, root2);
                sizes.put(root2, sizes.get(root1).intValue()+sizes.get(root2).intValue());
            } else {
                similarWords.put(root2, root1);
                sizes.put(root1, sizes.get(root1).intValue()+sizes.get(root2).intValue());
            }
        }
    }
    
    private String find(String word, Map<String, String> similarWords) {
        String current = word;
        String parent = similarWords.get(current);
        while(!parent.equals(current)) {
            current = parent;
            parent = similarWords.get(current);
        }
        return parent;
    }
}