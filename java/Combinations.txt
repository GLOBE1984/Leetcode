Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]




// Solution 1:
public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        
        if(k <= n) {
            Stack<Integer> path = new Stack<Integer>();
            combine(results, path, 1, n, 0, k);
        }
        
        return results;
    }
    
    private void combine(List<List<Integer>> results, Stack<Integer> path, int least, int nums, int current_depth, int depth) {
        if(current_depth < depth) {
            for(int i = least; i <= nums; ++i) {
                path.push(Integer.valueOf(i));
                combine(results, path, i+1, nums, current_depth+1, depth);
                path.pop();
            }
        }
        else {
            if(current_depth == depth) {
                List<Integer> tmp = new ArrayList<Integer>();
                tmp.addAll(path);
                results.add(tmp);
            }
        }
    }
}


// Solution 2: 
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(n >= 1 && k > 0) {
            Node node = new Node();
            dfs(n, k, node, results);
        }
        
        return results;
    }
    
    private void dfs(int n, int k, Node node, List<List<Integer>> results) {
        if(node.list.size() == k) {
            results.add(node.list);
        } else {
            for(int i = node.num+1; i <= n; ++i) {
                Node copy = new Node(node);
                copy.list.add(i);
                copy.num = i;
                dfs(n, k, copy, results);
            }
        }
    }
    
    private class Node {
        private List<Integer> list;
        private int num;
        
        private Node() {
            this.list = new ArrayList<>();
            this.num = 0;
        }
        
        private Node(Node node) {
            this.list = new ArrayList<>(node.list);
            this.num = node.num;
        }
    }
}