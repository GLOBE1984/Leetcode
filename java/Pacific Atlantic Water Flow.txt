Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:
The order of returned grid coordinates does not matter.
Both m and n are less than 150.
Example:

Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).





// Solution 1: 
class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(heights != null && heights.length > 0 && heights[0].length > 0) {
            Set<Point> pacificPoints = new HashSet<>();
            Set<Point> atlanticPoints = new HashSet<>();
                      
            TreeMap<Integer, Set<Point>> union = new TreeMap<>();
            for(int i = 0; i < heights.length; ++i) {
                for(int j = 0; j < heights[0].length; ++j) {
                    Point point = new Point();
                    point.x = i;
                    point.y = j;
                    Set<Point> points = union.getOrDefault(heights[i][j], new HashSet<>());
                    points.add(point);
                    union.put(heights[i][j], points);
                }
            }
            
            while(!union.isEmpty()) {
                Map.Entry<Integer, Set<Point>> entry = union.firstEntry();
                
                while(!entry.getValue().isEmpty()) {
                    Point point = entry.getValue().iterator().next();
                    
                    Set<Point> connectedPoints = new HashSet<>();
                    connectedPoints.add(point);
                    Queue<Point> queue = new LinkedList<>();
                    queue.offer(point);
                    
                    boolean isConnectPacific = false;
                    boolean isConnectAtlantic = false;
                    while(!queue.isEmpty()) {
                        point = queue.poll();
                        
                        if(point.x == 0 || point.y == 0) {
                            isConnectPacific = true;
                        }
                        if(point.x == heights.length-1 || point.y == heights[0].length-1) {
                            isConnectAtlantic = true;
                        }
                        
                        if(point.x > 0) {
                            Point newPoint = new Point();
                            newPoint.x = point.x - 1;
                            newPoint.y = point.y;
                            
                            if(entry.getValue().contains(newPoint) && !connectedPoints.contains(newPoint)) {
                                connectedPoints.add(newPoint);
                                queue.offer(newPoint);
                            } else if(heights[point.x][point.y] > heights[newPoint.x][newPoint.y]) {
                                if(pacificPoints.contains(newPoint)) {
                                    isConnectPacific = true;
                                }
                                if(atlanticPoints.contains(newPoint)) {
                                    isConnectAtlantic = true;
                                }
                            }
                        }
                        
                        if(point.x < heights.length-1) {
                            Point newPoint = new Point();
                            newPoint.x = point.x + 1;
                            newPoint.y = point.y;
                            
                            if(entry.getValue().contains(newPoint) && !connectedPoints.contains(newPoint)) {
                                connectedPoints.add(newPoint);
                                queue.offer(newPoint);
                            } else if(heights[point.x][point.y] > heights[newPoint.x][newPoint.y]) {
                                if(pacificPoints.contains(newPoint)) {
                                    isConnectPacific = true;
                                }
                                if(atlanticPoints.contains(newPoint)) {
                                    isConnectAtlantic = true;
                                }
                            }
                        }
                        
                        if(point.y > 0) {
                            Point newPoint = new Point();
                            newPoint.x = point.x;
                            newPoint.y = point.y - 1;
                            
                            if(entry.getValue().contains(newPoint) && !connectedPoints.contains(newPoint)) {
                                connectedPoints.add(newPoint);
                                queue.offer(newPoint);
                            } else if(heights[point.x][point.y] > heights[newPoint.x][newPoint.y]) {
                                if(pacificPoints.contains(newPoint)) {
                                    isConnectPacific = true;
                                }
                                if(atlanticPoints.contains(newPoint)) {
                                    isConnectAtlantic = true;
                                }
                            }
                        }
                        
                        if(point.y < heights[0].length-1) {
                            Point newPoint = new Point();
                            newPoint.x = point.x;
                            newPoint.y = point.y + 1;
                            
                            if(entry.getValue().contains(newPoint) && !connectedPoints.contains(newPoint)) {
                                connectedPoints.add(newPoint);
                                queue.offer(newPoint);
                            } else if(heights[point.x][point.y] > heights[newPoint.x][newPoint.y]) {
                                if(pacificPoints.contains(newPoint)) {
                                    isConnectPacific = true;
                                }
                                if(atlanticPoints.contains(newPoint)) {
                                    isConnectAtlantic = true;
                                }
                            }
                        }
                    }
                    
                    if(isConnectPacific) {
                        pacificPoints.addAll(connectedPoints);
                    }
                    if(isConnectAtlantic) {
                        atlanticPoints.addAll(connectedPoints);
                    }
                    
                    entry.getValue().removeAll(connectedPoints);
                }
                
                union.remove(entry.getKey());
            }
            
            pacificPoints.retainAll(atlanticPoints);
            Iterator<Point> iterator = pacificPoints.iterator();
            while(iterator.hasNext()) {
                Point point = iterator.next();
                List<Integer> result = new ArrayList<>();
                result.add(point.x);
                result.add(point.y);
                results.add(result);
            }
        }
        
        return results;
    }
    
    private class Point {
        private int x;
        private int y;
        
        public boolean equals(Object object) {
            if(!(object instanceof Point)) {
                return false;
            }
            
            Point point = (Point) object;
            return this.x == point.x && this.y == point.y;
        }
        
        public int hashCode() {
            return this.x * 1000 + this.y;
        }
    }
}


// Solution 2:
class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> results = new ArrayList<>();
        
        if(heights != null && heights.length > 0 && heights[0].length > 0) {            
            Set<Point> pacificPoints = new HashSet<>();
            Queue<Point> queue = new LinkedList<>();
            for(int i = 0; i < heights.length; ++i) {
                Point point = new Point();
                point.x = i;
                point.y = 0;
                pacificPoints.add(point);
                queue.offer(point);
            }
            for(int i = 0; i < heights[0].length; ++i) {
                Point point = new Point();
                point.x = 0;
                point.y = i;
                pacificPoints.add(point);
                queue.offer(point);
            }
            bfs(queue, pacificPoints, heights);
            
            Set<Point> atlanticPoints = new HashSet<>();
            for(int i = 0; i < heights.length; ++i) {
                Point point = new Point();
                point.x = i;
                point.y = heights[0].length - 1;
                atlanticPoints.add(point);
                queue.offer(point);
            }
            for(int i = 0; i < heights[0].length; ++i) {
                Point point = new Point();
                point.x = heights.length - 1;
                point.y = i;
                atlanticPoints.add(point);
                queue.offer(point);
            }
            bfs(queue, atlanticPoints, heights);
            
            pacificPoints.retainAll(atlanticPoints);
            Iterator<Point> iterator = pacificPoints.iterator();
            while(iterator.hasNext()) {
                Point point = iterator.next();
                List<Integer> result = new ArrayList<>();
                result.add(point.x);
                result.add(point.y);
                results.add(result);
            }
        }
        
        return results;
    }
    
    private void bfs(Queue<Point> queue, Set<Point> set, int[][] heights) {
        while(!queue.isEmpty()) {
            Point point = queue.poll();
            
            if(point.x > 0) {
                Point newPoint = new Point();
                newPoint.x = point.x - 1;
                newPoint.y = point.y;
                if(!set.contains(newPoint) && heights[point.x][point.y] <= heights[newPoint.x][newPoint.y]) {
                    set.add(newPoint);
                    queue.offer(newPoint);
                }
            }
            
            if(point.x < heights.length-1) {
                Point newPoint = new Point();
                newPoint.x = point.x + 1;
                newPoint.y = point.y;
                if(!set.contains(newPoint) && heights[point.x][point.y] <= heights[newPoint.x][newPoint.y]) {
                    set.add(newPoint);
                    queue.offer(newPoint);
                }
            }
            
            if(point.y > 0) {
                Point newPoint = new Point();
                newPoint.x = point.x;
                newPoint.y = point.y - 1;
                if(!set.contains(newPoint) && heights[point.x][point.y] <= heights[newPoint.x][newPoint.y]) {
                    set.add(newPoint);
                    queue.offer(newPoint);
                }
            }
            
            if(point.y < heights[0].length-1) {
                Point newPoint = new Point();
                newPoint.x = point.x;
                newPoint.y = point.y + 1;
                if(!set.contains(newPoint) && heights[point.x][point.y] <= heights[newPoint.x][newPoint.y]) {
                    set.add(newPoint);
                    queue.offer(newPoint);
                }
            }
        }
    }
    
    private class Point {
        private int x;
        private int y;
        
        public boolean equals(Object object) {
            if(!(object instanceof Point)) {
                return false;
            }
            
            Point point = (Point) object;
            return this.x == point.x && this.y == point.y;
        }
        
        public int hashCode() {
            return this.x * 1000 + this.y;
        }
    }
}