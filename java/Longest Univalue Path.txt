Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:

Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:

2
Example 2:

Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:

2
Note: The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int longestUnivaluePath(TreeNode root) {
        int length = 0;
        
        if(root != null) {
            Recorder recorder = find(root);
            length = recorder.getMax();
        }
        
        return length;
    }
    
    private Recorder find(TreeNode root) {
        if(root == null) {
            return new Recorder();
        }
        
        Recorder recorder1 = find(root.left);
        Recorder recorder2 = find(root.right);
        
        Recorder recorder = new Recorder();
        int rootMax = 0;
        int max = Math.max(recorder1.getMax(), recorder2.getMax());
        if(root.left != null && root.val == root.left.val && root.right != null && root.val == root.right.val) {
            // for the path passes the root
            max = Math.max(max, recorder1.getRootMax()+recorder2.getRootMax()+2);
            // only the longer one can be extended to the parent
            rootMax = Math.max(recorder1.getRootMax(), recorder2.getRootMax()) + 1;
        }
        else if(root.left != null && root.val == root.left.val) {
            max = Math.max(max, recorder1.getRootMax()+1);
            rootMax = recorder1.getRootMax() + 1;
        }
        else if(root.right != null && root.val == root.right.val) {
            max = Math.max(max, recorder2.getRootMax()+1);
            rootMax = recorder2.getRootMax() + 1;
        }
        recorder.setMax(max);
        recorder.setRootMax(rootMax);
        
        return recorder;
    }
    
    class Recorder {
        private int max;
        private int rootMax;
        
        public int getMax() {
            return this.max;
        }
        
        public void setMax(int max) {
            this.max = max;
        }
        
        public int getRootMax() {
            return this.rootMax;
        }
        
        public void setRootMax(int rootMax) {
            this.rootMax = rootMax;
        }
    }
}