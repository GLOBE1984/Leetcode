Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X

After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X






class Solution {
    public void solve(char[][] board) {
        if(board != null && board.length > 0 && board[0].length > 0) {
            int rowLen = board.length;
            if(rowLen <= 0)
                return;
            int colLen = board[0].length;
            if(colLen <= 0)
                return;


            int[][] visited = new int[rowLen][colLen];
            Queue<Node> queue = new LinkedList<>();

            for(int row = 0; row < rowLen; row++) {
                if(board[row][0] == 'O') {
                    queue.offer(new Node(row, 0));
                    visited[row][0] = 1;
                }
                if(board[row][colLen-1] == 'O') {
                    queue.offer(new Node(row, colLen-1));
                    visited[row][colLen-1] = 1;
                }
            }
            for(int col = 0; col < colLen; col++) {
                if(board[0][col]=='O') {
                    queue.offer(new Node(0, col));
                    visited[0][col] = 1;
                }
                if(board[rowLen-1][col]=='O') {
                    queue.offer(new Node(rowLen-1, col));
                    visited[rowLen-1][col] = 1;
                }
            }
            while(!queue.isEmpty()) {
                Node top = queue.poll();
                int rowrow = top.row;
                int colcol = top.col;
                
                if(rowrow+1 < rowLen && board[rowrow+1][colcol] == 'O' && visited[rowrow+1][colcol] == 0) {
                    queue.offer(new Node(rowrow+1, colcol));
                    visited[rowrow+1][colcol] = 1;
                }
                    
                if(rowrow-1 >= 0 && board[rowrow-1][colcol] == 'O' && visited[rowrow-1][colcol] == 0) {
                    queue.offer(new Node(rowrow-1, colcol));
                    visited[rowrow-1][colcol] = 1;
                }
                    
                if(colcol+1 < colLen && board[rowrow][colcol+1] == 'O' && visited[rowrow][colcol+1] == 0) {
                    queue.offer(new Node(rowrow, colcol+1));
                    visited[rowrow][colcol+1] = 1;
                }
                    
                if(colcol-1 >= 0 && board[rowrow][colcol-1] == 'O' && visited[rowrow][colcol-1] == 0) {
                    queue.offer(new Node(rowrow, colcol-1));
                    visited[rowrow][colcol-1] = 1;
                }
            }
            for(int row = 0; row < rowLen; row++) {
                for(int col = 0; col < colLen; col++){
                    if(board[row][col] == 'O' && visited[row][col] == 0) {
                        board[row][col] = 'X';
                    }
                }
            }
        }
    }
    
    private class Node {
        private int row;
        private int col;
        private Node(int x,int y) {
            row = x;
            col = y;
        }
    }
}