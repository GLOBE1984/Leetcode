Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode convertBST(TreeNode root) {
        if(root == null) {
            return null;
        }
        
        Node[] nodes = convert(root);
        Node head = nodes[0];
        Node current = head;
        Node prev = null;
        while(current != null) {
            if(prev != null) {
                current.node.val = current.node.val + prev.node.val; 
            }
            prev = current;
            current = current.next;
        }
        
        return root;
    }
    
    private Node[] convert(TreeNode root) {
        Node node = new Node(root);
        Node[] nodes = new Node[2];
        nodes[0] = node;
        nodes[1] = node;
        
        if(root.right != null) {
            Node[] tmps = convert(root.right);
            tmps[1].next = node;
            nodes[0] = tmps[0];
        }
        
        if(root.left != null) {
            Node[] tmps = convert(root.left);
            node.next = tmps[0];
            nodes[1] = tmps[1];
        }
        
        return nodes;
    }
    
    private class Node {
        protected TreeNode node;
        protected Node next;
        
        public Node(TreeNode node) {
            this.node = node;
            this.next = null;
        }
    }
}