You are given two string arrays username and website and an integer array timestamp. All the given arrays are of the same length and the tuple [username[i], website[i], timestamp[i]] indicates that the user username[i] visited the website website[i] at time timestamp[i].

A pattern is a list of three websites (not necessarily distinct).

For example, ["home", "away", "love"], ["leetcode", "love", "leetcode"], and ["luffy", "luffy", "luffy"] are all patterns.
The score of a pattern is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.

For example, if the pattern is ["home", "away", "love"], the score is the number of users x such that x visited "home" then visited "away" and visited "love" after that.
Similarly, if the pattern is ["leetcode", "love", "leetcode"], the score is the number of users x such that x visited "leetcode" then visited "love" and visited "leetcode" one more time after that.
Also, if the pattern is ["luffy", "luffy", "luffy"], the score is the number of users x such that x visited "luffy" three different times at different timestamps.
Return the pattern with the largest score. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.

 

Example 1:
Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = ["home","about","career","home","cart","maps","home","home","about","career"]
Output: ["home","about","career"]
Explanation: The tuples in this example are:
["joe","home",1],["joe","about",2],["joe","career",3],["james","home",4],["james","cart",5],["james","maps",6],["james","home",7],["mary","home",8],["mary","about",9], and ["mary","career",10].
The pattern ("home", "about", "career") has score 2 (joe and mary).
The pattern ("home", "cart", "maps") has score 1 (james).
The pattern ("home", "cart", "home") has score 1 (james).
The pattern ("home", "maps", "home") has score 1 (james).
The pattern ("cart", "maps", "home") has score 1 (james).
The pattern ("home", "home", "home") has score 0 (no user visited home 3 times).

Example 2:
Input: username = ["ua","ua","ua","ub","ub","ub"], timestamp = [1,2,3,4,5,6], website = ["a","b","a","a","b","c"]
Output: ["a","b","a"]
 

Constraints:
3 <= username.length <= 50
1 <= username[i].length <= 10
timestamp.length == username.length
1 <= timestamp[i] <= 10^9
website.length == username.length
1 <= website[i].length <= 10
username[i] and website[i] consist of lowercase English letters.
It is guaranteed that there is at least one user who visited at least three websites.
All the tuples [username[i], timestamp[i], website[i]] are unique.





class Solution {
    public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {        
        PriorityQueue<Tuple> queue = new PriorityQueue<>((t1, t2) -> t1.timestamp - t2.timestamp);
        for(int i = 0; i < username.length; ++i) {
            Tuple tuple = new Tuple();
            tuple.username = username[i];
            tuple.website = website[i];
            tuple.timestamp = timestamp[i];
            queue.offer(tuple);
        }
        
        Map<String, List<String>> map = new HashMap<>();
        while(!queue.isEmpty()) {
            Tuple tuple = queue.poll();
            List<String> websites = map.getOrDefault(tuple.username, new ArrayList<>());
            websites.add(tuple.website);
            map.put(tuple.username, websites);
        }
        
        Map<Pattern, Integer> counts = new HashMap<>();
        Map<Integer, Set<Pattern>> accumulates = new HashMap<>();
        int max = 0;
        Iterator<Map.Entry<String, List<String>>> iterator = map.entrySet().iterator();
        while(iterator.hasNext()) {
            Map.Entry<String, List<String>> entry = iterator.next();
            max = getPatterns(entry.getValue(), max, counts, accumulates);
        }
        
        Set<Pattern> set = accumulates.get(max);
        List<Pattern> patterns = new ArrayList<>(set);
        Collections.sort(patterns, new Comparator<>(){
            
            public int compare(Pattern p1, Pattern p2) {
                if(!p1.websites[0].equals(p2.websites[0])) {
                    return p1.websites[0].compareTo(p2.websites[0]);
                } else if(!p1.websites[1].equals(p2.websites[1])) {
                    return p1.websites[1].compareTo(p2.websites[1]);
                } else {
                    return p1.websites[2].compareTo(p2.websites[2]);
                }
            }
            
        });
        
        return Arrays.asList(patterns.get(0).websites);
    }
    
    private int getPatterns(List<String> websites, int max, Map<Pattern, Integer> counts, Map<Integer, Set<Pattern>> accumulates) {
        int tmp = max;
        
        Set<Pattern> visited = new HashSet<>();
        
        for(int i = 0; i < websites.size(); ++i) {
            for(int j = i+1; j < websites.size(); ++j) {
                for(int k = j+1; k < websites.size(); ++k) {
                    Pattern pattern = new Pattern();
                    pattern.websites[0] = websites.get(i);
                    pattern.websites[1] = websites.get(j);
                    pattern.websites[2] = websites.get(k);
                    
                    if(!visited.contains(pattern)) {
                        int count = counts.getOrDefault(pattern, 0);
                        if(count > 0) {
                            Set<Pattern> patterns = accumulates.get(count);
                            patterns.remove(pattern);
                        }
                        count++;
                        counts.put(pattern, count);
                        Set<Pattern> patterns = accumulates.getOrDefault(count, new HashSet<>());
                        patterns.add(pattern);
                        accumulates.put(count, patterns);
                        tmp = Math.max(tmp, count);
                        
                        visited.add(pattern);
                    }
                }
            }
        }
        
        return tmp;
    }
    
    private class Tuple {
        private String username;
        private String website;
        private int timestamp;
    }
    
    private class Pattern {
        private String[] websites;
        
        private Pattern() {
            this.websites = new String[3];
        }
        
        public boolean equals(Object object) {
            if(!(object instanceof Pattern)) {
                return false;
            }
            
            Pattern pattern = (Pattern)object;
            
            return this.websites[0].equals(pattern.websites[0]) && this.websites[1].equals(pattern.websites[1]) && this.websites[2].equals(pattern.websites[2]);
        }
        
        public int hashCode() {
            return Arrays.deepHashCode(this.websites);
        }
    }
}