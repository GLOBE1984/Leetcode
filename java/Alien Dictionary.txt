There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

For example,
Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Note:
You may assume all letters are in lowercase.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.





class Solution {
    public String alienOrder(String[] words) {
        if(words != null && words.length > 0) {
            int[] ingress = new int[26];
            Arrays.fill(ingress, -1);
            
            for(String word : words) {
                for(int i = 0; i < word.length(); ++i) {
                    char c = word.charAt(i);
                    if(ingress[c-'a'] == -1) {
                        ingress[c-'a'] = 0;
                    }
                }
            }
            
            int[][] outgress = new int[26][26];
            
            // Analyze the lexicographically order from the order of strings
            // Only keep list with size > 1 for the analysis on the next index
            // [["wrt","wrf","er","ett","rftt"]] (index = 0: w < e < r)-> [["wrt", "wrf"], ["er", "ett"]] (index = 1: r < t)-> [["wrt", "wrf"]] (index = 2: t < f)-> []
            List<List<String>> groups = new ArrayList<>();
            groups.add(Arrays.asList(words));
            int index = 0;
            while(!groups.isEmpty()) {
                List<List<String>> tmps = new ArrayList<>();
                for(int i = 0; i < groups.size(); ++i) {
                    List<String> group = groups.get(i);
                    String str = group.get(0);
                    int prevLength = str.length();
                    char prev = str.charAt(index);
                    List<String> tmp = new ArrayList<>();
                    if(index < str.length()-1) {
                        tmp.add(str);
                    }
                    for(int j = 1; j < group.size(); ++j) {
                        str = group.get(j);
                        int currentLength = str.length();
                        char current = str.charAt(index);
                        if(prev != current) {
                            // Establish order in the graph
                            if(outgress[current-'a'][prev-'a'] == 1) {
                                // There is cycle between character prev and current
                                return "";
                            }
                            // Avoid duplicated count
                            if(outgress[prev-'a'][current-'a'] == 0) {
                                outgress[prev-'a'][current-'a'] = 1;
                                ingress[current-'a']++;
                            }
                            // Add previous group to the next round if the size > 1
                            if(tmp.size() > 1) {
                                tmps.add(tmp);
                            }
                            tmp = new ArrayList<>();
                        } else {
                            // if previous length < current length, the rule is violated
                            if(index == currentLength-1 && index < prevLength-1) {
                                return "";
                            }
                        }
                        prev = current;
                        prevLength = currentLength;
                        if(index < str.length()-1) {
                            tmp.add(str);
                        }
                    }
                    if(tmp.size() > 1) {
                        tmps.add(tmp);
                    }
                }
                index++;
                groups = tmps;
            }
            
            
            int length = 0;            
            Queue<Character> queue = new LinkedList<>();
            for(int i = 0; i < 26; ++i) {
                if(ingress[i] > -1) {
                    if(ingress[i] == 0) {
                        queue.offer((char)('a'+i));
                    }
                    length++;
                }
            }
            
            // if queue is empty, it means the graph is cycled.
            if(queue.isEmpty()) {
                return "";
            }
            
            StringBuilder builder = new StringBuilder();
            while(!queue.isEmpty()) {
                int size = queue.size();
                int i = 0;
                while(i < size) {
                    char c = queue.poll().charValue();
                    builder.append(c);
                    for(int j = 0; j < 26; ++j) {
                        if(outgress[c-'a'][j] == 1) {
                            ingress[j]--;
                            if(ingress[j] == 0) {
                                queue.offer((char)('a'+j));
                            }
                        }
                    }
                    
                    i++;
                }
            }
            
            return length == builder.length() ? builder.toString() : "";
        } else {
            return "";
        }
    }
}