Given a binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to go through the root.

For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        if(root != null) {
            int[] result = dfs(root);
            
            return Math.max(result[0], result[1]);
        } else {
            return 0;
        }
    }
    
    // return: array[0] represents max value which can go up to parent, array[1] represents not pass the parent
    private int[] dfs(TreeNode node) {
        if(node.left == null && node.right == null) {
            return new int[]{node.val, node.val};
        }
        
        int largestPass = Integer.MIN_VALUE;
        int largestNonPass = Integer.MIN_VALUE;
        if(node.left != null && node.right != null) {
            int[] leftLargest = dfs(node.left);
            int[] rightLargest = dfs(node.right);
            
            largestPass = Math.max(leftLargest[0]+node.val, rightLargest[0]+node.val);
            largestPass = Math.max(largestPass, node.val);
            
            largestNonPass = Math.max(leftLargest[1], rightLargest[1]);
            largestNonPass = Math.max(largestNonPass, leftLargest[0]+node.val+rightLargest[0]);
            largestNonPass = Math.max(Math.max(leftLargest[0], rightLargest[0]), largestNonPass);
        } else if(node.left != null) {
            int[] leftLargest = dfs(node.left);
            
            largestPass = Math.max(leftLargest[0]+node.val, node.val);
            
            largestNonPass = Math.max(leftLargest[1], leftLargest[0]+node.val);
            largestNonPass = Math.max(leftLargest[0], largestNonPass);
        } else {
            int[] rightLargest = dfs(node.right);
            
            largestPass = Math.max(rightLargest[0]+node.val, node.val);
            
            largestNonPass = Math.max(rightLargest[1], rightLargest[0]+node.val);
            largestNonPass = Math.max(rightLargest[0], largestNonPass);
        }
        
        return new int[]{largestPass, largestNonPass};
    }
}