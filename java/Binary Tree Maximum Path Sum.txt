Given a binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to go through the root.

For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        if(root != null) {
            int[] result = dfs(root);
            
            return result[1];
        } else {
            return 0;
        }
    }
    
    // return: array[0] represents max value which can go up to parent, array[1] represents max value in all case
    private int[] dfs(TreeNode root) {
        if(root.left == null && root.right == null) {
            return new int[]{root.val, root.val};
        }
        
        int[] leftMax = null;
        if(root.left != null) {
            leftMax = dfs(root.left);
        }
        int[] rightMax = null;
        if(root.right != null) {
            rightMax = dfs(root.right);
        }
        
        int[] result = new int[2];
        if(leftMax != null && rightMax != null) {
            result[0] = Math.max(root.val, Math.max(leftMax[0]+root.val, rightMax[0]+root.val));
            int max = Math.max(leftMax[1], rightMax[1]);
            max = Math.max(max, result[0]);
            max = Math.max(max, leftMax[0]+root.val+rightMax[0]);
            result[1] = max;
        } else if(leftMax != null) {
            result[0] = Math.max(root.val, leftMax[0]+root.val);
            int max = leftMax[1];
            max = Math.max(max, result[0]);
            result[1] = max;
        } else {
            result[0] = Math.max(root.val, rightMax[0]+root.val);
            int max = rightMax[1];
            max = Math.max(max, result[0]);
            result[1] = max;
        }
        
        return result;
    }
}