Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false





class Solution {
    public boolean isMatch(String s, String p) {
        if(p.length() == 0) {
            return s.length() == 0;
        }
        
        // res[i],代表s的前i个字符和p的前j个字符是否匹配(这里因为每次i的结果只依赖于j-1的结果，
        // 所以不需要二维数组，只需要一个一维数组来保存上一行结果即可）
        boolean[] res = new boolean[s.length()+1];
        res[0] = true;
        for(int j = 0; j < p.length(); ++j) {
            if(p.charAt(j) != '*') {
                for(int i = s.length() - 1; i >= 0; --i) {
                    res[i+1] = res[i] && (p.charAt(j) == '?' || s.charAt(i) == p.charAt(j));
                }
            }
            else {
                int i = 0;
                while(i <= s.length() && !res[i]) {
                    i++;
                }
                while(i <= s.length()) {
                    res[i] = true;
                    i++;
                }
            }
            res[0] = res[0] && p.charAt(j) == '*';
        }
        return res[s.length()];
    }
}