Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false





class Solution {
    public boolean isMatch(String s, String p) {
        if(p.length() == 0) {
            return s.length() == 0;
        }
        
        // res[i],代表s的前i个字符和p的前j个字符是否匹配(这里因为每次i的结果只依赖于j-1的结果，
        // 所以不需要二维数组，只需要一个一维数组来保存上一行结果即可）
        boolean[] res = new boolean[s.length()+1];
        res[0] = true;
        for(int j = 0; j < p.length(); ++j) {
            if(p.charAt(j) != '*') {
                for(int i = s.length() - 1; i >= 0; --i) {
                    res[i+1] = res[i] && (p.charAt(j) == '?' || s.charAt(i) == p.charAt(j));
                }
            }
            else {
                int i = 0;
                while(i <= s.length() && !res[i]) {
                    i++;
                }
                while(i <= s.length()) {
                    res[i] = true;
                    i++;
                }
            }
            res[0] = res[0] && p.charAt(j) == '*';
        }
        return res[s.length()];
    }
}


class Solution {
    public boolean isMatch(String s, String p) {
        if(s != null && p != null) {
            int[][] records = new int[s.length()+1][p.length()+1];
            for(int i = 0; i <= s.length(); ++i) {
                for(int j = 0; j <= p.length(); ++j) {
                    records[i][j] = -1;
                }
            }
            return isMatch(s, 0, p, 0, records);
        } else {
            return false;
        }
    }
    
    private boolean isMatch(String s, int index1, String p, int index2, int[][] records) {
        if(index1 == s.length() && index2 == p.length()) {
            return true;
        }
        
        if(records[index1][index2] != -1) {
            return records[index1][index2] == 1 ? true : false;
        }
        
        if(index1 == s.length()) {
            if(p.charAt(index2) != '*') {
                records[index1][index2] = 0;
                return false;
            } else {
                boolean result = isMatch(s, index1, p, index2+1, records);
                records[index1][index2] = result ? 1 : 0;
                return result;
            }
        }
        
        if(index2 == p.length()) {
            records[index1][index2] = 0;
            return false;
        }
        
        if(p.charAt(index2) >= 'a' && p.charAt(index2) <= 'z') {
            if(s.charAt(index1) == p.charAt(index2)) {
                boolean result = isMatch(s, index1+1, p, index2+1, records);
                records[index1][index2] = result ? 1 : 0;
                return result;
            } else {
                records[index1][index2] = 0;
                return false;
            }
        } else if(p.charAt(index2) == '?') {
            boolean result = isMatch(s, index1+1, p, index2+1, records);
            records[index1][index2] = result ? 1 : 0;
            return result;
        } else {
            int index = index2;
            while(index < p.length() && p.charAt(index) == '*') {
                index++;
            }
            if(index == p.length()) {
                records[index1][index2] = 1;
                return true;
            }
            char c= p.charAt(index);
            if(c >= 'a' && c <= 'z') {
                boolean isMatched = false;
                int tmp = index1;
                while(tmp < s.length()) {
                    if(s.charAt(tmp) == c) {
                        isMatched |= isMatch(s, tmp, p, index, records);
                    }
                    tmp++;
                }
                records[index1][index2] = isMatched ? 1 : 0;
                return isMatched;
            } else {
                boolean isMatched = false;
                int tmp = index1;
                while(tmp < s.length()) {
                    isMatched |= isMatch(s, tmp, p, index, records);
                    tmp++;
                }
                records[index1][index2] = isMatched ? 1 : 0;
                return isMatched;
            }
        }
    }
}