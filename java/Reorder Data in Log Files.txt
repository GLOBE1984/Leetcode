You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
 

Constraints:

0 <= logs.length <= 100
3 <= logs[i].length <= 100
logs[i] is guaranteed to have an identifier, and a word after the identifier.





class Solution {
    public String[] reorderLogFiles(String[] logs) {
        if(logs != null && logs.length > 0) {
            String[] logs_ordered = Arrays.copyOf(logs, logs.length);
            Arrays.sort(logs_ordered, new Comparator<String>(){
                public int compare(String s1, String s2) {
                    int index1 = s1.indexOf(" ");
                    int index2 = s2.indexOf(" ");
                    String tmp1 = s1.substring(index1 + 1);
                    String tmp2 = s2.substring(index2 + 1);
                    char c1 = tmp1.charAt(0);
                    char c2 = tmp2.charAt(0);
                    if(c1 >= 'a' && c1 <= 'z') {
                        if(c2 >= 'a' && c2 <= 'z') {
                            if(tmp1.compareTo(tmp2) != 0) {
                                return tmp1.compareTo(tmp2);
                            } else {
                                String identifier1 = s1.substring(0, index1);
                                String identifier2 = s2.substring(0, index2);
                                return identifier1.compareTo(identifier2);
                            }
                        } else {
                            return -1;
                        }
                    } else {
                        if(c2 >= 'a' && c2 <= 'z') {
                            return 1;
                        } else {
                            return 0;
                        }
                    }
                }
            });
            return logs_ordered;
        } else {
            return new String[0];
        }
    }
    
}