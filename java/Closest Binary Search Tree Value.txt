Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target.

 

Example 1:
Input: root = [4,2,5,1,3], target = 3.714286
Output: 4

Example 2:
Input: root = [1], target = 4.428571
Output: 1
 

Constraints:
The number of nodes in the tree is in the range [1, 104].
0 <= Node.val <= 109
-109 <= target <= 109





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int closestValue(TreeNode root, double target) {
        if(root != null) {
            double diff = Double.MAX_VALUE;
            TreeNode mark = null;
            
            TreeNode current = root;
            while(current != null) {
                if(current.val == target) {
                    mark = current;
                    break;
                } else {
                    if(Math.abs(current.val-target) < diff) {
                        mark = current;
                        diff = Math.abs(current.val-target);
                    }
                    
                    if(current.val > target) {
                        if(current.left != null) {
                            current = current.left;
                        } else {
                            break;
                        }
                    } else {
                        if(current.right != null) {
                            current = current.right;
                        } else {
                            break;
                        }
                    }
                }
            }
            
            return mark.val;
        } else {
            return -1;
        }
    }
}