Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.





class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> results = new ArrayList<>();
        
        if(board != null && board.length > 0 && board[0].length > 0 && words != null && words.length > 0) {
            Trie root = createTrie(words);
            
            for(int i = 0; i < board.length; ++i) {
                for(int j = 0; j < board[i].length; ++j) {
                    if(root.children[board[i][j]-'a'] != null) {
                        lookup(board, i, j, root, results);
                    }
                }
            }
        }
        
        return results;
    }
    
    private Trie createTrie(String[] words) {
        Trie root = new Trie();
        
        for(String word : words) {
            Trie current = root;
            for(int i = 0; i < word.length(); ++i) {
                char c = word.charAt(i);
                Trie tmp = current.children[c-'a'];
                if(tmp == null) {
                    tmp = new Trie();
                }
                current.children[c-'a'] = tmp;
                current = tmp;
            }
            current.word = word;
        }
        
        return root;
    }
    
    private void lookup(char[][] board, int row, int col, Trie parent, List<String> results) {
        Trie trie = parent.children[board[row][col]-'a'];
        
        if(trie.word != null) {
            results.add(trie.word);
            trie.word = null;
        }
        
        int[][] diffs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        char c = board[row][col];
        board[row][col] = '#';
        for(int[] diff : diffs) {
            int nextRow = row + diff[0];
            int nextCol = col + diff[1];
            if(nextRow >= 0 && nextRow < board.length && nextCol >= 0 && nextCol < board[nextRow].length) {
                if(board[nextRow][nextCol] >= 'a' && board[nextRow][nextCol] <= 'z' && trie.children[board[nextRow][nextCol]-'a'] != null) {
                    lookup(board, nextRow, nextCol, trie, results);
                }
            }
        }
        board[row][col] = c;
    }
    
    private class Trie {
        private Trie[] children;
        
        private String word;
        
        private Trie() {
            this.children = new Trie[26];
            this.word = null;
        }
    }
}