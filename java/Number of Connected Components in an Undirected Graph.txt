You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.

Return the number of connected components in the graph.

 

Example 1:
Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1


Constraints:
1 <= n <= 2000
1 <= edges.length <= 5000
edges[i].length == 2
0 <= ai <= bi < n
ai != bi
There are no repeated edges.





class Solution {
    public int countComponents(int n, int[][] edges) {
        int count = 0;
        
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for(int[] edge : edges) {
            Set<Integer> set = map.getOrDefault(edge[0], new HashSet<>());
            set.add(edge[1]);
            map.put(edge[0], set);
            set = map.getOrDefault(edge[1], new HashSet<>());
            set.add(edge[0]);
            map.put(edge[1], set);
        }
        
        Set<Integer> visited = new HashSet<>();
        
        for(int i = 0; i < n; ++i) {
            if(!visited.contains(i)) {
                Queue<Integer> queue = new LinkedList<>();
                queue.offer(i);
                visited.add(i);
                while(!queue.isEmpty()) {
                    int current = queue.poll().intValue();
                    
                    Set<Integer> set = map.get(current);
                    if(set != null) {
                        Iterator<Integer> iterator = set.iterator();
                        while(iterator.hasNext()) {
                            int connected = iterator.next().intValue();
                            if(!visited.contains(connected)) {
                                queue.offer(connected);
                                visited.add(connected);
                            }
                        }
                    }
                }
                count++;
            }
        }
        
        return count;
    }
}