Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root != null) {
            return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
        } else {
            return false;
        }
    }
    
    private boolean isValidBST(TreeNode root, long lower, long upper) {
        if(root.val <= lower || root.val >= upper) {
            return false;
        }
        
        if(root.left != null) {
            boolean isValid = isValidBST(root.left, lower, (long)root.val);
            if(!isValid) {
                return false;
            }
        }
        
        if(root.right != null) {
            boolean isValid = isValidBST(root.right, (long)root.val, upper);
            if(!isValid) {
                return false;
            }
        }
        
        return true;
    }
}