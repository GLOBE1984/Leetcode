Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.

Implement the SummaryRanges class:

SummaryRanges() Initializes the object with an empty stream.
void addNum(int val) Adds the integer val to the stream.
int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].
 

Example 1:
Input
["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]
Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]
 

Constraints:

0 <= val <= 10^4
At most 3 * 10^4 calls will be made to addNum and getIntervals.
 

Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?






/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class SummaryRanges {
    private Map<Integer, Interval> map;
    private Set<Integer> visited;
    
    /** Initialize your data structure here. */
    public SummaryRanges() {
        map = new HashMap<Integer, Interval>();
        visited = new HashSet<Integer>();
    }
    
    public void addNum(int val) {
        if(!visited.contains(val)) {
            visited.add(val);
            
            Interval interval = map.get(val);
            Interval interval_m = map.get(val - 1);
            Interval interval_p = map.get(val + 1);
            if(interval_m != null && interval_p != null) {
                interval = new Interval(interval_m.start, interval_p.end);
                map.remove(val - 1);
                map.remove(val + 1);
                map.put(interval_m.start, interval);
                map.put(interval_p.end, interval);
            }
            else if(interval_m != null) {
                interval = new Interval(interval_m.start, val);
                map.remove(val - 1);
                map.put(interval_m.start, interval);
                map.put(val, interval);
            }
            else if(interval_p != null) {
                interval = new Interval(val, interval_p.end);
                map.remove(val + 1);
                map.put(val, interval);
                map.put(interval_p.end, interval);
            }
            else {
                interval = new Interval(val, val);
                map.put(val, interval);
            }
        }
    }
    
    public List<Interval> getIntervals() {
        List<Interval> results = new ArrayList<Interval>(new HashSet<Interval>(map.values()));
        Collections.sort(results, new Comparator<Interval>(){  
            @Override  
            public int compare(Interval i1, Interval i2) {  
                return i1.start - i2.start;  
            }  
              
        });
        return results;
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * List<Interval> param_2 = obj.getIntervals();
 */


class SummaryRanges {

    private TreeMap<Integer, Boundary> map;
    private Set<Integer> visited;
    
    public SummaryRanges() {
        this.map = new TreeMap<>();
        this.visited = new HashSet<>();
    }
    
    public void addNum(int val) {
        if(!visited.contains(val)) {
            if(!map.containsKey(val-1) && !map.containsKey(val+1)) {
                map.put(val, Boundary.BOTH);              
            } else if(map.containsKey(val-1) && map.containsKey(val+1)) {
                Boundary b1 = map.get(val-1);
                Boundary b2 = map.get(val+1);
                if(b1 != Boundary.LOW && b2 != Boundary.HIGH) {
                    if(b1 == Boundary.HIGH) {
                        map.remove(val-1);
                    } else {
                        map.put(val-1, Boundary.LOW);
                    }
                    if(b2 == Boundary.LOW) {
                        map.remove(val+1);
                    } else {
                        map.put(val+1, Boundary.HIGH);
                    }
                }
            } else if(map.containsKey(val-1)) {
                Boundary b = map.get(val-1);
                if(b != Boundary.LOW) {
                    map.put(val, Boundary.HIGH);
                    if(b == Boundary.HIGH) {
                        map.remove(val-1);
                    } else {
                        map.put(val-1, Boundary.LOW);
                    }
                }
            } else {
                Boundary b = map.get(val+1);
                if(b != Boundary.HIGH) {
                    map.put(val, Boundary.LOW);
                    if(b == Boundary.LOW) {
                        map.remove(val+1);
                    } else {
                        map.put(val+1, Boundary.HIGH);
                    }
                }
            }
        }
        visited.add(val);
    }
    
    public int[][] getIntervals() {
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        
        Iterator<Map.Entry<Integer, Boundary>> iterator = map.entrySet().iterator();
        while(iterator.hasNext()) {
            Map.Entry<Integer, Boundary> entry = iterator.next();
            int val = entry.getKey().intValue();
            Boundary b = entry.getValue();
            if(b == Boundary.LOW) {
                current.add(val);
            } else if(b == Boundary.HIGH) {
                current.add(val);
                results.add(current);
                current = new ArrayList<>();
            } else {
                current.add(val);
                current.add(val);
                results.add(current);
                current = new ArrayList<>();
            }
        }
        
        int[][] intervals = new int[results.size()][2];
        for(int i = 0; i < results.size(); ++i) {
            intervals[i][0] = results.get(i).get(0);
            intervals[i][1] = results.get(i).get(1);
        }
        
        return intervals;
    }
    
    private enum Boundary {
        LOW, HIGH, BOTH;
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * int[][] param_2 = obj.getIntervals();
 */