Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].





class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if(intervals.length > 0) {
            List<int[]> list = new ArrayList<>();
            for(int[] interval : intervals) {
                if(interval[1] < newInterval[0]) {
                    list.add(interval);
                } else if(interval[0] > newInterval[1]) {
                    list.add(newInterval);
                    newInterval = interval;
                } else {
                    newInterval = new int[]{Math.min(interval[0], newInterval[0]), Math.max(interval[1], newInterval[1])};
                }
            }
            list.add(newInterval); 
            
            int[][] results = new int[list.size()][2];
            for(int i = 0; i < list.size(); ++i) {
                results[i] = list.get(i);
            }
            
            return results;
        } else {
            int[][] results = new int[1][2];
            results[0] = newInterval;
            return results;
        }
    }
}

