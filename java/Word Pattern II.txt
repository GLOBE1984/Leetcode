Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty substring in str.

Example 1:

Input: pattern = "abab", str = "redblueredblue"
Output: true
Example 2:

Input: pattern = pattern = "aaaa", str = "asdasdasdasd"
Output: true
Example 3:

Input: pattern = "aabb", str = "xyzabcxzyabc"
Output: false
Notes:
You may assume both pattern and str contains only lowercase letters.




class Solution {
    public boolean wordPatternMatch(String pattern, String s) {
        if(pattern != null && s != null) {
            Map<Character, String> csMap = new HashMap<>();
            Map<String, Character> scMap = new HashMap<>();
            return wordPatternMatch(pattern, 0, s, 0, csMap, scMap);
        } else {
            return false;
        }
    }
    
    private boolean wordPatternMatch(String pattern, int index1, String s, int index2, Map<Character, String> csMap, Map<String, Character> scMap) {
        if(index1 == pattern.length() && index2 == s.length()) {
            return true;
        } else if(index1 == pattern.length() || index2 == s.length()) {
            return false;
        }
        
        char c = pattern.charAt(index1);
        if(csMap.containsKey(c)) {
            String str = csMap.get(c);
            if(s.startsWith(str, index2)) {
                return wordPatternMatch(pattern, index1+1, s, index2+str.length(), csMap, scMap);
            } else {
                return false;
            }
        } else {
            for(int i = index2; i < s.length(); ++i) {
                String str = s.substring(index2, i+1);
                if(scMap.containsKey(str)) {
                    continue;
                }
                csMap.put(c, str);
                scMap.put(str, c);
                boolean result = wordPatternMatch(pattern, index1+1, s, i+1, csMap, scMap);
                if(result) {
                    return true;
                } else {
                    csMap.remove(c);
                    scMap.remove(str);
                }
            }

            return false;
        }
    }
}