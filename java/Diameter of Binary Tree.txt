Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.





// use post order traverse
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root != null) {
            int[] results = findLongestPath(root);
            return Math.max(results[0], results[1]);
        } else {
            return 0;
        }
    }
    
    public int[] findLongestPath(TreeNode node) {
        int[] leftLongest = node.left != null ? findLongestPath(node.left) : new int[]{0, 0};
        int[] rightLongest = node.right != null ? findLongestPath(node.right) : new int[]{0, 0};
        
        int longestPass = 0;
        int longestNonPass = 0;
        if(node.left != null) {
            longestPass = Math.max(leftLongest[0]+1, longestPass);
            longestNonPass = longestNonPass + leftLongest[0] + 1;
        }
        if(node.right != null) {
            longestPass = Math.max(rightLongest[0]+1, longestPass);
            longestNonPass = longestNonPass + rightLongest[0] + 1;
        }
        
        return new int[]{longestPass, Math.max(Math.max(leftLongest[1], rightLongest[1]), longestNonPass)};
    }
}