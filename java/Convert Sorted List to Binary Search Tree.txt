Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if (head == null)   {
            return null;
        }

        ListNode temp = head;
        int start = 0;
        int end = 0;
        while (temp.next != null){
            temp = temp.next;
            end++;
        }
        
        // java is pass by value, so inorder to memory the move of the head
        // you have to put the head into a array or other warpper class
        
        ListNode[] headHolder = {head};
        return buildTree(headHolder, start, end);
    }
    
    private TreeNode buildTree(ListNode[] headHolder, int start, int end){
        if (start > end){
            return null;
        }
        int mid = (start + end)/2;
        
        TreeNode left = buildTree(headHolder, start, mid-1);
        
        TreeNode root = new TreeNode (headHolder[0].val);
        
        // current node in ListNode has been used, move it one step to the right
        headHolder[0] = headHolder[0].next;
        
        root.left = left;
        
        TreeNode right = buildTree (headHolder, mid+1, end);
        root.right = right;
        
        return root;
    }
}