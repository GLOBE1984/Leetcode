Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"





class Solution {
    public int longestValidParentheses(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        
        int[] matchedIndices = new int[s.length()];
        for(int i = 0; i < s.length(); ++i) {
            matchedIndices[i] = -1;
        }
        
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if(c == '(') {
                stack.push(i);
            } else {
                if(!stack.empty()) {
                    int tmp = stack.pop().intValue();
                    matchedIndices[tmp] = i;
                    matchedIndices[i] = tmp;
                }
            }
        }
        
        int longest = 0;
        int length = 0;
        int index = 0;
        while(index < matchedIndices.length) {
            if(matchedIndices[index] != -1) {
                int tmp = matchedIndices[index];
                length += tmp - index + 1;
                longest = Math.max(longest, length);
                index = tmp;
            } else {
                length = 0;
            }
            index++;
        }
        
        return longest;
    }
}