Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"





class Solution {
    public int longestValidParentheses(String s) {
        if(s != null && s.length() > 0) {
            Stack<Integer> stack = new Stack<Integer>();
            int[] record = new int[s.length()];
            for(int i = 0; i < s.length(); ++i) {
                record[i] = -1;
            }
            
            for(int i = 0; i < s.length(); ++i) {
                char c = s.charAt(i);
                if(c == '(') {
                    stack.push(i);
                } else {
                    if(!stack.empty()) {
                        int index = stack.pop().intValue();
                        record[index] = i;
                        record[i] = index;
                    }
                }
            }
            
            int max = 0;
            int index = 0;
            int prev = 0;
            int last_end = -1;
            while(index < s.length()) {
                if(record[index] != -1) {
                    int length = record[index] - index + 1;
                    if(index - last_end == 1) {
                        length = length + prev;
                    }
                    if(length > max) {
                        max = length;
                    }
                    prev = length;
                    index = record[index];
                    last_end = index;
                } else {
                    prev = 0;
                }
                index++;
            }
            
            return max;
        } else {
            return 0;
        }
    }
}