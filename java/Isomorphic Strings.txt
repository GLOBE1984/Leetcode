Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
Given "egg", "add", return true.

Given "foo", "bar", return false.

Given "paper", "title", return true.





class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        if len(s) != len(t): 
            return False
        if len(s) == 0 and len(t) == 0: 
            return True
        
        index = 0
        dist = {}
        while index < len(t): 
            if dist.has_key(s[index]): 
                if dist[s[index]] != t[index]: 
                    return False
            else: 
                if t[index] in dist.values(): 
                    return False
                dist[s[index]] = t[index]

            index = index + 1
        
        return True