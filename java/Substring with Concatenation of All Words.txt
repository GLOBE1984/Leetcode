You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.

You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []
Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]
 

Constraints:

1 <= s.length <= 104
s consists of lower-case English letters.
1 <= words.length <= 5000
1 <= words[i].length <= 30
words[i] consists of lower-case English letters.





class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        
        List<Integer> results = new ArrayList<>();
        
        if(words != null && words.length > 0) {
            
            Map<String, Integer> counts = new HashMap<>();
            for(String word : words) {
                int count = 1;
                if(counts.containsKey(word)) {
                    count = counts.get(word).intValue() + 1;
                }
                counts.put(word, count);
            }
            
            int wordLength = words[0].length();
            
            for(int i = 0; i < wordLength; ++i) {
                int anchor = i;
                Map<String, Integer> tmp = new HashMap<>();
                int matchedWord = 0;
                
                for(int j = i; j <= s.length()-wordLength; j += wordLength) {
                    String subStr = s.substring(j, j+wordLength);
                    if(counts.containsKey(subStr)) {
                        int count = 1;
                        if(tmp.containsKey(subStr)) {
                           count = tmp.get(subStr).intValue() + 1; 
                        }
                        if(count <= counts.get(subStr).intValue()) {
                            matchedWord++;
                            if(matchedWord == words.length) {
                                results.add(anchor);
                                String firstWord = s.substring(anchor, anchor+wordLength);
                                anchor += wordLength;
                                matchedWord--;
                                int tmpCount = tmp.get(firstWord).intValue();
                                tmp.put(firstWord, --tmpCount);
                            }
                            tmp.put(subStr, count);
                        } else {
                            int index = anchor;
                            while(index+wordLength <= j) {
                                String indexWord = s.substring(index, index+wordLength);
                                matchedWord--;
                                int tmpCount = tmp.get(indexWord).intValue();
                                tmp.put(indexWord, --tmpCount);
                                if(subStr.equals(indexWord)) {
                                   break; 
                                }
                                
                                index += wordLength;
                            }
                            anchor = index + wordLength;
                        }
                        
                    } else {
                        anchor = j + wordLength;
                        matchedWord = 0;
                        tmp.clear();
                    }
                }
                
            }
            
        }
        
        return results;
    }
    
}