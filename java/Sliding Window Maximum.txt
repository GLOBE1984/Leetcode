Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ¡Ü k ¡Ü input array's size for non-empty array.

Follow up:
Could you solve it in linear time?





class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums != null && nums.length > 0 && k > 0) {
            Deque<Integer> deque = new LinkedList<>();
            for(int i = 0; i < k-1; ++i) {
                while(!deque.isEmpty() && nums[deque.peekLast().intValue()] <= nums[i]) {
                    deque.pollLast();
                }
                deque.offerLast(i);
            }
            
            int[] maximums = new int[nums.length-k+1];
            for(int i = k-1; i < nums.length; ++i) {
                if(!deque.isEmpty() && (i-deque.peekFirst().intValue()+1) > k) {
                    deque.pollFirst();
                }
                while(!deque.isEmpty() && nums[deque.peekLast().intValue()] <= nums[i]) {
                    deque.pollLast();
                }
                deque.offerLast(i);
                maximums[i-k+1] = nums[deque.peekFirst().intValue()];
            }
            
            return maximums;
        } else {
            return new int[0];
        }
    }
}