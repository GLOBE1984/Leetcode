Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

Example:

Input:  [1,2,1,3,2,5]
Output: [3,5]
Note:

The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?





class Solution {
    public int[] singleNumber(int[] nums) {
        int[] res = new int[2];
        int xor=0;
        for(int i = 0; i < nums.length; ++i) {
            xor ^= nums[i];
        }

        /*
         * 这一行代码的作用是：找到数字 A 和数字 B 中不相同的一位，并将该位设置为 1，其他位设置为 0；
         * 
         * 根据 XOR 的定义，我们知道，在 xor 中，为 1 的位即 A 和 B 不相同的位，xor 
         * 中为 0 的位即 A 和 B 中相同的位
         * 所以，要找到 A 和 B 中不相同的位，只需要找到在 xor 中从右往左第一个为 1 的位，
         * 保留该位并将其他位置为 0 即可。
         * 
         * //其实这一行与下面的代码等价，但是论逼格就差远了（手动斜眼）
            public static int f(int num){
                int times = 0;
                while(num > 0){
                    if(num % 2 == 1)
                        break;
                    times++;
                    num = num >> 1;  }
                return 1 << times;  }
         */
        // (~xor + 1) is the negative of xor
        int bitflag = xor & (~xor + 1);

        for(int i = 0; i < nums.length; ++i) {
            if((nums[i] & bitflag) == 0) {
                res[0] ^= nums[i];
            } else {
                res[1] ^= nums[i];
            }
        }
        return res;
    }
}