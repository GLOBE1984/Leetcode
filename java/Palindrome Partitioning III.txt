You are given a string s containing lowercase letters and an integer k. You need to :

First, change some characters of s to other lowercase English letters.
Then divide s into k non-empty disjoint substrings such that each substring is a palindrome.
Return the minimal number of characters that you need to change to divide the string.

 

Example 1:
Input: s = "abc", k = 2
Output: 1
Explanation: You can split the string into "ab" and "c", and change 1 character in "ab" to make it palindrome.

Example 2:
Input: s = "aabbc", k = 3
Output: 0
Explanation: You can split the string into "aa", "bb" and "c", all of them are palindrome.

Example 3:
Input: s = "leetcode", k = 8
Output: 0
 

Constraints:
1 <= k <= s.length <= 100.
s only contains lowercase English letters.





class Solution {
    public int palindromePartition(String s, int k) {
        if(s != null && s.length() > 0 && k > 0) {
            Map<Integer, Map<Integer, Integer>> records = new HashMap<>();
            
            return palindromePartition(s, k, 0, records);
        } else {
            return 0;
        }
    }
    
    private int palindromePartition(String s, int k, int index, Map<Integer, Map<Integer, Integer>> records) {
        if(records.containsKey(k) && records.get(k).containsKey(index)) {
            return records.get(k).get(index).intValue();
        }
        
        if(k == 1) {
            int result = minValidate(s.substring(index));
            Map<Integer, Integer> map = records.getOrDefault(1, new HashMap<>());
            map.put(index, result);
            records.put(1, map);
            return result;
        }
        
        int count = Integer.MAX_VALUE;
        for(int i = index+1; i <= s.length()-k+1; ++i) {
            count = Math.min(count, minValidate(s.substring(index, i))+palindromePartition(s, k-1, i, records));
        }
        
        Map<Integer, Integer> map = records.getOrDefault(k, new HashMap<>());
        map.put(index, count);
        records.put(k, map);
        return count;
    }
    
    private int minValidate(String s) {
        int left = 0;
        int right = s.length() - 1;
        
        int count = 0;
        while(left < right) {
            if(s.charAt(left) != s.charAt(right)) {
                count++;
            }
            left++;
            right--;
        }
        return count;
    }
}