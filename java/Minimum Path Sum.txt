Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1¡ú3¡ú1¡ú1¡ú1 minimizes the sum.





// Solution 1:
class Solution {
    public int minPathSum(int[][] grid) {
        if(grid != null && grid.length > 0 && grid[0].length > 0) {
            int[][] sums = new int[grid.length][grid[0].length];
            sums[0][0] = grid[0][0];
            for(int i = 0; i < grid.length; ++i) {
                for(int j = 0; j < grid[0].length; ++j) {
                    if(i != 0 || j != 0) {
                        int min = Integer.MAX_VALUE;
                        if(i > 0) {
                            min = Math.min(min, sums[i-1][j]);
                        }
                        if(j > 0) {
                            min = Math.min(min, sums[i][j-1]);
                        }
                        sums[i][j] = min + grid[i][j];
                    }
                }
            }
            return sums[grid.length-1][grid[0].length-1];
        }
        else {
            return 0;
        }
    }
}


// Solution 2: 
class Solution {
    public int minPathSum(int[][] grid) {
        if(grid != null && grid.length > 0 && grid[0].length > 0) {
            int[] sums = new int[grid[0].length];
            sums[0] = grid[0][0];
            for(int i = 0; i < grid.length; ++i) {
                for(int j = 0; j < grid[0].length; ++j) {
                    if(i != 0 || j != 0) {
                        int min = Integer.MAX_VALUE;
                        if(i > 0) {
                            min = Math.min(min, sums[j]);
                        }
                        if(j > 0) {
                            min = Math.min(min, sums[j-1]);
                        }
                        sums[j] = min + grid[i][j];
                    }
                }
            }
            return sums[grid[0].length-1];
        }
        else {
            return 0;
        }
    }
}


// Solution 3: 
class Solution {
    public int minPathSum(int[][] grid) {
        if(grid != null && grid.length > 0 && grid[0].length > 0) {
            for(int i = 0; i < grid.length; ++i) {
                for(int j = 0; j < grid[0].length; ++j) {
                    if(i != 0 || j != 0) {
                        int min = Integer.MAX_VALUE;
                        if(i > 0) {
                            min = Math.min(min, grid[i-1][j]);
                        }
                        if(j > 0) {
                            min = Math.min(min, grid[i][j-1]);
                        }
                        grid[i][j] += min;
                    }
                }
            }
            return grid[grid.length-1][grid[grid.length-1].length-1];
        }
        else {
            return 0;
        }
    }
}