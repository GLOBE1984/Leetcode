Given a set of keywords words and a string S, make all appearances of all keywords in S bold. Any letters between <b> and </b> tags become bold.

The returned string should use the least number of tags possible, and of course the tags should form a valid combination.

For example, given that words = ["ab", "bc"] and S = "aabcd", we should return "a<b>abc</b>d". Note that returning "a<b>a<b>b</b>c</b>d" would use more tags, so it is incorrect.

Constraints:

words has length in range [0, 50].
words[i] has length in range [1, 10].
S has length in range [0, 500].
All characters in words[i] and S are lowercase letters.





class Solution {
    public String boldWords(String[] words, String S) {
        if(S != null && S.length() > 0 && words != null && words.length > 0) {
            List<int[]> intervals = new ArrayList<>();
            int start = -1;
            int end = -1;
            for(int i = 0; i < S.length(); ++i) {
                if(i > end && end != -1) {
                    intervals.add(new int[]{start, end});
                    start = -1;
                    end = -1;
                }
                int longest = 0;
                for(String word : words) {
                    if(S.startsWith(word, i)) {
                        longest = Math.max(longest, word.length());
                    }
                }
                if(longest > 0) {
                    if(start == -1 && end == -1) {
                        start = i;
                        end = i + longest;
                    } else {
                        end = Math.max(end, i+longest);
                    }
                }
            }
            
            if(start != -1 && end != -1) {
                intervals.add(new int[]{start, end});
            }
            
            if(!intervals.isEmpty()) {
                StringBuilder builder = new StringBuilder();
                int lastEnd = 0;
                int index = 0;
                while(index < intervals.size()) {
                    int[] interval = intervals.get(index);
                    builder.append(S.substring(lastEnd, interval[0]));
                    builder.append("<b>"); 
                    builder.append(S.substring(interval[0], interval[1]));
                    builder.append("</b>");
                    lastEnd = interval[1];
                    index++;
                }
                builder.append(S.substring(lastEnd));
                
                return builder.toString();
            } else {
                return S;
            }            
        } else if(S != null && S.length() > 0) {
            return S;
        } else {
            return "";
        }
    }
}