Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".






class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> results = new ArrayList<>();
        
        if(s != null && s.length() > 0 && p != null && p.length() > 0) {
            int[] pchars = new int[26];
            for(int i = 0; i < p.length(); ++i) {
                pchars[p.charAt(i)-'a']++;
            }
            int hash = Arrays.hashCode(pchars);
            
            int[] counts = new int[26];
            int start = 0;
            int end = 0;
            while(end < s.length()) {
                counts[s.charAt(end)-'a']++;
                if(end-start+1 == p.length()) {
                    if(hash == Arrays.hashCode(counts)) {
                        results.add(start);
                    }
                    counts[s.charAt(start)-'a']--;
                    start++;
                }
                end++;
            }
        }
        
        return results;
    }
}