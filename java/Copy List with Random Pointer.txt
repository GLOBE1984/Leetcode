A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.




/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null) {
            return null;
        }
        
        RandomListNode newHead = new RandomListNode(head.label);
        
        RandomListNode current = head.next;
        RandomListNode newCurrent = newHead;
        while(current != null) {
            RandomListNode tmp = new RandomListNode(current.label);
            current = current.next;
            newCurrent.next = tmp;
            newCurrent = tmp;
        }
        
        current = head;
        newCurrent = newHead;
        while(current != null) {
            if(current.random != null) {
                RandomListNode tmp = new RandomListNode(current.random.label);
                newCurrent.random = tmp;
            }
            current = current.next;
            newCurrent = newCurrent.next;
        }
        
        return newHead;
    }
}