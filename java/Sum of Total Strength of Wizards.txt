As the ruler of a kingdom, you have an army of wizards at your command.

You are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:

The strength of the weakest wizard in the group.
The total of all the individual strengths of the wizards in the group.
Return the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:
Input: strength = [1,3,1,2]
Output: 44
Explanation: The following are all the contiguous groups of wizards:
- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1
- [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9
- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1
- [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4
- [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4
- [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4
- [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3
- [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5
- [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6
- [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7
The sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.

Example 2:
Input: strength = [5,4,6]
Output: 213
Explanation: The following are all the contiguous groups of wizards: 
- [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25
- [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16
- [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36
- [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36
- [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40
- [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60
The sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.
 

Constraints:

1 <= strength.length <= 10^5
1 <= strength[i] <= 10^9





// Find its right bound, which is the number < to it, and find its left bound, which is the number <= to it.
// This part is easy. However, the challenge is querying the the sum of subarray sum in O(1) or O(logn).

// I wrote down each number contribution below for a given range where A[M] is the min wizard, and A[i] is the leftmost wizard included and A[j] is the rightmost wizard included. Through some arrangments, I found that for the left half of the array, the sum is what you see on the bottom of the screenshot below, with N = m-i+1. Due to the symmetric property, we can use a suffix array for the right half.

// For [ai ... am ... aj] represents L = i, R = j and M = m. 
// A[j] => 1 x (m - i + 1), A[j-1] => 2 x (m - i + 1), A[j-2] => 3 x (m - i + 1) ... A[M] => (j - m + 1) x (m - i + 1) => 1 x A[j] + 2 x A[j-1] + 3 x A[j-2] + ...
// A[i] => 1 x (m - j + 1), A[i+1] => 2 x (m - j + 1) ... A[M] => (j - m + 1) x (m - i + 1) => 1 x A[i] + 2 x A[i+1] + ... + N x A[M]
// 1 x A[i] + 2 x A[i+1] + ... + N x A[M] = (pre[M] - pre[i-1]) + (pre[M] - pre[i]) + ... = N x pre[M] - (pre[i-1] + ... + pre[M-1])

class Solution {
    public int totalStrength(int[] A) {
        int n = A.length, M = (int)1e9+7;
        Deque<Integer> rs = new LinkedList<>();
        Deque<Integer> ls = new LinkedList<>();
        int[] right= new int[n];
        int[] left = new int[n];
        // Array for the prefix sum from 0
        int[] pre  = new int[n];
        // Array for the prefix sum from n-1
        int[] suf  = new int[n];
        // nA[1] + (n-1)A[2] + ... + A[n]
        int[] ppre = new int[n];
        // A[1] + 2A[2] + ... + nA[n]
        int[] ssuf = new int[n];
        Arrays.fill(right, n-1);
        for (int i = 0, j = n-1; i < n; ++i, --j){
            while(!rs.isEmpty() && A[i] < A[rs.peek()]){
                right[rs.pop()] = i - 1;
            }
            while(!ls.isEmpty() && A[j] <= A[ls.peek()]){
                left[ls.pop()] = j + 1;
            }
            rs.push(i);
            ls.push(j);
            pre[i] = i == 0 ? A[i] : (A[i] + pre[i-1]) % M;
            suf[j] = i == 0 ? A[j] : (A[j] + suf[j+1]) % M;
            ppre[i] = i == 0 ? pre[i] : (pre[i] + ppre[i-1]) % M;
            ssuf[j] = i == 0 ? suf[j] : (suf[j] + ssuf[j+1]) % M;
        }
        long ans = 0;
        for (int i = 0; i < n; ++i){
            long lval = ((1L * (i - left[i] + 1) * pre[i] % M - (i == 0 ? 0 : (ppre[i-1] - (left[i] <= 1 ? 0 : ppre[left[i]-2]))) + M) % M) * (right[i] - i + 1) % M;
            long rval = ((1L * (right[i] - i + 1) * suf[i] % M - (i == n-1 ? 0 : (ssuf[i+1] - (right[i] >= n-2 ? 0 : ssuf[right[i] + 2]))) + M) % M) * (i - left[i] + 1) % M;
            long mid  = (1L * (i - left[i] + 1) * (right[i] - i + 1)) % M * A[i] % M;
            ans = (ans + (lval + rval - mid + M) % M * A[i] % M + M) % M;
        }

        return (int)ans;
    }
}