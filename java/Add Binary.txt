Given two binary strings, return their sum (also a binary string).

For example,
a = "11"
b = "1"
Return "100".





public class Solution {
    public String addBinary(String a, String b) {
        if(a == null || b == null) {
            return null;
        }
        
        String result = "";
        
        if(a.length() == 0 || b.length() == 0) {
            return result;
        }
        
        int index1 = a.length() - 1;
        int index2 = b.length() - 1;
        boolean carry = false;
        
        while(index1 >= 0 && index2 >= 0) {
            if(a.charAt(index1) == '1' && b.charAt(index2) == '1') {
                if(carry) {
                    result = '1' + result;
                }
                else {
                    result = '0' + result;
                    carry = true;
                }
            }
            else {
                if(a.charAt(index1) == '1' || b.charAt(index2) == '1') {
                    if(carry) {
                        result = '0' + result;
                    }
                    else {
                        result = '1' + result;
                    }
                }
                else {
                    if(carry) {
                        result = '1' + result;
                        carry = false;
                    }
                    else {
                        result = '0' + result;
                    }
                }
            }
            
            index1--;
            index2--;
        }
        
        while(index1 >= 0) {
            if(a.charAt(index1) == '1') {
                if(carry) {
                    result = '0' + result;
                }
                else {
                    result = '1' + result;
                }
            }
            else {
                if(carry) {
                    result = '1' + result;
                    carry = false;
                }
                else {
                    result = '0' + result;
                }
            }
            index1--;
        }
        
        while(index2 >= 0) {
            if(b.charAt(index2) == '1') {
                if(carry) {
                    result = '0' + result;
                }
                else {
                    result = '1' + result;
                }
            }
            else {
                if(carry) {
                    result = '1' + result;
                    carry = false;
                }
                else {
                    result = '0' + result;
                }
            }
            index2--;
        }
        
        if(carry) {
            result = '1' + result;
        }
        
        return result;
    }
}





Approach 2: Bit Manipulation
Intuition

Here the input is more adapted to push towards Approach 1, but there is popular Facebook variation of this problem when interviewer provides you two numbers and asks to sum them up without using addition operation.

No addition? OK, bit manipulation then.

How to start? There is an interview tip for bit manipulation problems: if you don't know how to start, start from computing XOR for your input data. Strangely, that helps to go out for quite a lot of problems, Single Number II, Single Number III, Maximum XOR of Two Numbers in an Array, Repeated DNA Sequences, Maximum Product of Word Lengths, etc.

Here XOR is a key as well, because it's a sum of two binaries without taking carry into account.

fig

To find current carry is quite easy as well, it's AND of two input numbers, shifted one bit to the left.

fig

Now the problem is reduced: one has to find the sum of answer without carry and carry. It's the same problem - to sum two numbers, and hence one could solve it in a loop with the condition statement "while carry is not equal to zero".

Algorithm

Convert a and b into integers x and y, x will be used to keep an answer, and y for the carry.

While carry is nonzero: y != 0:

Current answer without carry is XOR of x and y: answer = x^y.

Current carry is left-shifted AND of x and y: carry = (x & y) << 1.

Job is done, prepare the next loop: x = answer, y = carry.

Return x in the binary form.





import java.math.BigInteger;
class Solution {
  public String addBinary(String a, String b) {
    BigInteger x = new BigInteger(a, 2);
    BigInteger y = new BigInteger(b, 2);
    BigInteger zero = new BigInteger("0", 2);
    BigInteger carry, answer;
    while (y.compareTo(zero) != 0) {
      answer = x.xor(y);
      carry = x.and(y).shiftLeft(1);
      x = answer;
      y = carry;
    }
    return x.toString(2);
  }
}