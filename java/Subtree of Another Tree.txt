Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(s != null && t != null) {
            String pre_s = preorderTraverse(s);
            String pre_t = preorderTraverse(t);
            if(pre_s.contains(pre_t)) {
                String in_s = inorderTraverse(s);
                String in_t = inorderTraverse(t);
                return in_s.contains(in_t);
            }
        }
        
        return false;
        
    }
    
    private String preorderTraverse(TreeNode node) {
        if(node == null) {
            return "n";
        }
        
        StringBuilder builder = new StringBuilder();
        builder.append(node.val);
        builder.append(preorderTraverse(node.left));
        builder.append(preorderTraverse(node.right));
        
        return builder.toString();
    }
    
    private String inorderTraverse(TreeNode node) {
        if(node == null) {
            return "n";
        }
        
        StringBuilder builder = new StringBuilder();
        builder.append(inorderTraverse(node.left));
        builder.append(node.val);
        builder.append(inorderTraverse(node.right));
        
        return builder.toString();
    }
    
}
