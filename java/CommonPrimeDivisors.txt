A prime is a positive integer X that has exactly two distinct divisors 1 and X. The first few prime integers are 2, 3, 5, 7, 11 and 13.

A prime D is called a prime divisor of a positive integer P if there exists a positive integer K such that D  K = P. For example, 2 and 5 are prime divisors of 20.

You are given two positive integers N and M. The goal is to check whether the sets of prime divisors of integers N and M are exactly the same.

For example, given

N = 15 and M = 75, the prime divisors are the same {3, 5};
N = 10 and M = 30, the prime divisors aren't the same {2, 5} is not equal to {2, 3, 5};
N = 9 and M = 5, the prime divisors aren't the same {3} is not equal to {5}.
Write a function

class Solution { public int solution(int[] A, int[] B); }

that, given two non-empty zero-indexed arrays A and B of Z integers, returns the number of positions K for which the prime divisors of A[K] and B[K] are exactly the same.

For example, given

    A[0] = 15   B[0] = 75
    A[1] = 10   B[1] = 30
    A[2] = 3    B[2] = 5
the function should return 1, because only one pair (15, 75) has the same set of prime divisors.

Assume that

Z is an integer within the range [1..6,000];
each element of arrays A, B is an integer within the range [1..2,147,483,647].
Complexity

expected worst-case time complexity is O(Zlog(max(A)+max(B))2);
expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
Elements of input arrays can be modified.





// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A, int[] B) {
        // write your code in Java SE 8
        int length = A.length;
        
        int count = 0;
        for(int i = 0; i < length; ++i) {
            if(A[i] != B[i]) {
                int common = gcd(A[i], B[i]);
                int val1 = A[i]/common;
                int val2 = B[i]/common;
                
                boolean has1 = true;
                while(val1 != 1) {
                    int tmp = gcd(common, val1);
                    if(tmp == 1) {
                        has1 = false;
                        break;
                    }
                    val1 = val1/tmp;
                }
                if(!has1) {
                    continue;
                }
                
                boolean has2 = true;
                while(val2 != 1) {
                    int tmp = gcd(common, val2);
                    if(tmp == 1) {
                        has2 = false;
                        break;
                    }
                    val2 = val2/tmp;
                }
                if(!has2) {
                    continue;
                }
            }
            count++;
        }
        return count;
    }
    
    private int gcd(int N, int M) {
        if(N== 1 || M == 1) {
            return 1;
        }
        else if(N == M) {
            return N;
        }
        else if(N%M == 0) {
            return M;
        }
        else if(N%2 == 0 && M%2 == 0) {
            return 2*gcd(N/2, M/2);
        }
        else if(N%2 == 0) {
            return gcd(N/2, M);
        }
        else if(M%2 == 0) {
            return gcd(N, M/2);
        }
        else if(N > M) {
            return gcd(N - M, M);
        }
        else {
            return gcd(N, M - N);
        }
    }
}