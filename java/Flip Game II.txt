You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive "++" into "--". The game ends when a person can no longer make a move and therefore the other person will be the winner.

Write a function to determine if the starting player can guarantee a win.

For example, given s = "++++", return true. The starting player can guarantee a win by flipping the middle "++" to become "+--+".

Follow up:
Derive your algorithm's runtime complexity.





public class Solution {
    
	public boolean canWin(String s) {
        
		boolean[] state = new boolean[s.length()];
        
		for (int i = 0; i < s.length(); i++) {
            
			if (s.charAt(i) == '+') {
                
				state[i] = true;
            
			} 
			else {
                
				state[i] = false;
            
			}
        
		}
        
		return search(state);
    
	}
    
    

	private boolean search(boolean[] state) {
        
		for (int i = 0; i < state.length-1; i++) {
            
			if (state[i] && state[i + 1]) {
                
				state[i] = false;
                
				state[i+1] = false;
                
				if (!search(state)) {
                    
					state[i] = true;
                    
					state[i+1] = true;
                    
					return true;
                
				} 
				else {
                    
					state[i] = true;
                    
					state[i+1] = true;
                
				}
            	
		}

        }
        
	return false;
    
	}

}