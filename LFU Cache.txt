Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LFUCache cache = new LFUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.get(3);       // returns 3.
cache.put(4, 4);    // evicts key 1.
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4




public class LFUCache {
    private int capacity;
    private int total;
    private int least;
    private Map<Integer, Integer> counter;
    private Map<Integer, Set<Integer>> record;
    private Map<Integer, Integer> map;
    
    public LFUCache(int capacity) {
        this.capacity = capacity;
        this.total = 0;
        this.least = 0;
        this.counter = new HashMap<Integer,Integer>();
        this.record = new HashMap<Integer, Set<Integer>>();
        this.map = new HashMap<Integer, Integer>();
    }
    
    public int get(int key) {
        Integer result = this.map.get(key);
        if(result != null) {
            int num = this.counter.get(key).intValue();
            Set<Integer> set = this.record.get(num);
            set.remove(key);
            if(set.isEmpty()) {
                this.record.remove(num);
                if(this.least == num) {
                    this.least = num + 1;
                }
            }
            num++;
            this.counter.put(key, num);
            set = this.record.get(num);
            if(set == null) {
                set = new LinkedHashSet<Integer>();
            }
            set.add(key);
            this.record.put(num, set);
            
            return result.intValue();
        }
        else {
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if(this.capacity > 0) {
            Integer result = this.map.get(key);
            if(result != null) {
                int num = this.counter.get(key).intValue();
                Set<Integer> set = this.record.get(num);
                set.remove(key);
                if(set.isEmpty()) {
                    this.record.remove(num);
                    if(this.least == num) {
                        this.least = num + 1;
                    }
                }
                num++;
                set = this.record.get(num);
                if(set == null) {
                    set = new LinkedHashSet<Integer>();
                }
                set.add(key);
                this.record.put(num, set);
                this.counter.put(key, num);
            }
            else {
                if(this.total == this.capacity) {
                    Set<Integer> set = this.record.get(this.least);
                    Iterator<Integer> iterator = set.iterator();
                    Integer tmp = iterator.next();
                    iterator.remove();
                    if(!iterator.hasNext()) {
                        this.record.remove(this.least);
                    }
                    this.least = 1;
                    set = this.record.get(this.least);
                    if(set == null) {
                        set = new LinkedHashSet<Integer>();
                    }
                    set.add(key);
                    this.record.put(1, set);

                    this.counter.remove(tmp);
                    this.counter.put(key, 1);

                    this.map.remove(tmp);
                }
                else {
                    this.total++;
                    this.least = 1;
                    Set<Integer> set = this.record.get(this.least);
                    if(set == null) {
                        set = new LinkedHashSet<Integer>();
                    }
                    set.add(key);
                    this.record.put(1, set);

                    this.counter.put(key, 1);
                }
            }
            this.map.put(key, value);
        }
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */