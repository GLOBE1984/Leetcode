Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.





class Solution {
    public boolean wordPattern(String pattern, String str) {
        if(pattern != null && pattern.length() > 0 && str != null && str.length() > 0) {
            Map<Character, String> charToStr = new HashMap<>();
            Map<String, Character> strToChar = new HashMap<>();
            
            String[] words = str.trim().split(" ");
            if(pattern.length() != words.length) {
                return false;
            }
            
            for(int i = 0; i < pattern.length(); ++i) {
                char c = pattern.charAt(i);
                if(!charToStr.containsKey(c) && !strToChar.containsKey(words[i])) {
                    charToStr.put(c, words[i]);
                    strToChar.put(words[i], c);
                } else if(charToStr.containsKey(c) && strToChar.containsKey(words[i])) {
                    if(!charToStr.get(c).equals(words[i]) || (strToChar.get(words[i]).charValue() != c)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            
            return true;
        } else {
            return false;
        }
    }
}