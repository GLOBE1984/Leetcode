Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists != null && lists.length > 0) {
            ListNode head = new ListNode(-1);
            ListNode current = head;
            
            PriorityQueue<ListNode> queue = new PriorityQueue<>(lists.length, (l1, l2) -> l1.val - l2.val);
            for(ListNode listNode : lists) {
                if(listNode != null) {
                    queue.offer(listNode);
                }
            }
            
            while(!queue.isEmpty()) {
                ListNode node = queue.poll();
                current.next = node;                
                if(node.next != null) {
                    queue.offer(node.next);
                }
                current = node;
                current.next = null;
            }
            
            return head.next;
        } else {
            return null;
        }
    }
}