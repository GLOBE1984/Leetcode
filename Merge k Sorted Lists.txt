Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) {
            return null;
        }
        
        ListNode head = new ListNode(-1);
        Map<Integer, Queue<ListNode>> map = new HashMap<Integer, Queue<ListNode>>();
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
        int length = lists.length;
        for(int i = 0; i < length; ++i) {
            ListNode node = lists[i];
            if(node != null) {
                queue.offer(node.val);
                Queue<ListNode> tmp = map.get(node.val);
                if(tmp == null) {
                    tmp = new LinkedList<ListNode>();
                }
                tmp.add(node);
                map.put(node.val, tmp);
            }
        }
        
        ListNode current = head;
        while(map.size() > 0) {
            int tmp = queue.poll().intValue();
            Queue<ListNode> queue_tmp = map.get(tmp);
            ListNode node = queue_tmp.poll();
            current.next = node;
            if(node.next != null) {
                queue.offer(node.next.val);
                if(tmp != node.next.val) {
                    if(queue_tmp.isEmpty()) {
                        map.remove(tmp);
                    }
                    queue_tmp = map.get(node.next.val);
                    if(queue_tmp == null) {
                        queue_tmp = new LinkedList<ListNode>();
                    }
                }
                queue_tmp.offer(node.next);
                map.put(node.next.val, queue_tmp);
            }
            else {
                if(queue_tmp.isEmpty()) {
                    map.remove(tmp);
                }
            }
            node.next = null;
            current = node;
        }
        
        return head.next;
    }
}