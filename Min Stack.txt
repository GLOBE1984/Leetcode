Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.





class MinStack {
    private Stack<Integer> stack;
    private PriorityQueue<Integer> queue;
    
    /** initialize your data structure here. */
    public MinStack() {
        this.stack = new Stack<Integer>();
        this.queue = new PriorityQueue<Integer>();
    }
    
    public void push(int x) {
        this.stack.push(x);
        this.queue.offer(x);
    }
    
    public void pop() {
        if(!this.stack.empty()) {
            int val = this.stack.pop();
            this.queue.remove(val);
        }
    }
    
    public int top() {
        if(!this.stack.empty()) {
            return this.stack.peek();
        }
        else {
            return Integer.MIN_VALUE;
        }
    }
    
    public int getMin() {
        if(!this.queue.isEmpty()) {
            return this.queue.peek();
        }
        else {
            return Integer.MIN_VALUE;
        }
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */