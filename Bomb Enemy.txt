Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.
Note that you can only put the bomb at an empty cell.

Example:
For the given grid

0 E 0 0
E 0 W E
0 E 0 0

return 3. (Placing a bomb at (1,1) kills 3 enemies)




public class Solution {
    public int maxKilledEnemies(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        
        int length_row = grid.length;
        int length_column = grid[0].length;
        
        List<List<Segment>> rows = new ArrayList<List<Segment>>();
        List<List<Segment>> columns = new ArrayList<List<Segment>>();
        List<Segment> current_row = null;
        Segment seg_current_row = null;

        for(int i = 0; i < length_row; ++i) {
            current_row = new ArrayList<Segment>();
            seg_current_row = new Segment();
            current_row.add(seg_current_row);
            for(int j = 0; j < length_column; ++j) {
                if(columns.size() <= j) {
                    columns.add(new ArrayList<Segment>());
                }
                if(columns.get(j).size() == 0) {
                    columns.get(j).add(new Segment());
                }
                List<Segment> tmp_list = columns.get(j);
                Segment tmp_seg = tmp_list.get(tmp_list.size() - 1);
                if(grid[i][j] == 'E') {
                    seg_current_row.setNum(seg_current_row.getNum() + 1);

                    tmp_seg.setNum(tmp_seg.getNum() + 1);
                }
                else if(grid[i][j] == 'W') {
                    if(j != 0) {
                        seg_current_row = new Segment();
                        current_row.add(seg_current_row);
                    }
                    if(i != 0) {
                        tmp_seg = new Segment();
                        columns.get(j).add(tmp_seg);
                    }
                }
                seg_current_row.setIndex(j);
                tmp_seg.setIndex(i);
            }
            rows.add(current_row);
        }
        
        int max = 0;
        int current_row_index = 0;
        for(int i = 0; i < length_row; ++i) {
            current_row_index = 0;
            for(int j = 0; j < length_column; ++j) {
                if(j > rows.get(i).get(current_row_index).getIndex()) {
                    current_row_index++;
                }
                if(i > columns.get(j).get(0).getIndex()) {
                    columns.get(j).remove(0);
                }
                if(grid[i][j] == '0') {
                    if(max < (rows.get(i).get(current_row_index).getNum()+columns.get(j).get(0).getNum())) {
                        max = rows.get(i).get(current_row_index).getNum() + columns.get(j).get(0).getNum();
                    }
                }
            }
        }
        
        return max;
    }
    
    private class Segment {
        private int num;
        private int index;
        
        public Segment() {
            this.num = 0;
            this.index = 0;
        }
        
        public int getNum() {
            return this.num;
        }
        
        public void setNum(int num) {
            this.num = num;
        }
        
        public int getIndex() {
            return this.index;
        }
        
        public void setIndex(int index) {
            this.index = index;
        }
    }
}