Given two 1d vectors, implement an iterator to return their elements alternately.

 

Example:

Input:
v1 = [1,2]
v2 = [3,4,5,6] 
Output: [1,3,2,4,5,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].
 

Follow up:

What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7].




public class ZigzagIterator {

    private List<Integer> list;
    private int index;
    
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        this.list = new ArrayList<>();
        int index1 = 0;
        int index2 = 0;
        while(index1 < v1.size() && index2 < v2.size()) {
            this.list.add(v1.get(index1));
            this.list.add(v2.get(index2));
            index1++;
            index2++;
        }
        if(index1 == v1.size()) {
            while(index2 < v2.size()) {
                this.list.add(v2.get(index2));
                index2++;
            }
        }
        if(index2 == v2.size()) {
            while(index1 < v1.size()) {
                this.list.add(v1.get(index1));
                index1++;
            }
        }
        this.index = 0;
    }

    public int next() {
        int num = this.list.get(this.index);
        this.index++;
        return num;
    }

    public boolean hasNext() {
        return this.index < this.list.size();
    }
}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */
