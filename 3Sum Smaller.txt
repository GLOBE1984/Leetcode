Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?




public class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if(nums != null && nums.length >= 3) {
            Arrays.sort(nums);
            int length = nums.length;
            int result = 0;
            for(int i = 0; i < length; ++i) {
                int target_tmp = target - nums[i];
                int j = i + 1;
                int k = length - 1;
                while(j < k) {
                    int num1 = nums[j];
                    int num2 = nums[k];
                    if(num1 + num2 < target_tmp) {
                        result = result + k - j;
                        j++;
                    }
                    else {
                        k--;
                    }
                }
            }
            return result;
        }
        else {
            return 0;
        }
    }
}