Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.





Solution 1:
class Solution {
    // dp[i][j] result for num[0] - num[i] with j subarrays;
    // dp[i][1] = sum(0, i)
    // dp[i][i+1] = max(nums[0] - nums[i])
    // dp[i][j] = min(max(dp[k][j-1]), sum(k + 1, i)), j - 2 <= k < i
    // Time complexity O(mn^2), space complexity O(mn)
    public int splitArray(int[] nums, int m) {
        if(nums != null && nums.length > 1) {
            int[][] dp = new int[nums.length][m+1];
            
            int sum = 0;
            for(int i = 0; i < nums.length; ++i) {
                sum += nums[i];
                dp[i][1] = sum;
            }
            
            int max = Integer.MIN_VALUE;
            for(int i = 0; i < m; ++i) {
                max = Math.max(max, nums[i]);
                dp[i][i+1] = max;
            }
            
            for(int i = 1; i < nums.length; ++i) {
                for(int j = 2; j <= Math.min(i+1, m); ++j) {
                    int internalSum = 0;
                    int min = Integer.MAX_VALUE;
                    for(int k = i - 1; k >= j - 2; --k) {
                        internalSum += nums[k+1];
                        min = Math.min(min, Math.max(dp[k][j-1], internalSum));
                    }
                    dp[i][j] = min;
                }
            }
            
            return dp[nums.length-1][m];
        } else if(nums.length == 1) {
            return nums[0];
        } else {
            return 0;
        }
    }
}


Solution 2:
class Solution {
    // The answer must be in the range [l = max(nums), r = sum(nums)]
    // Direct search the answer
    // Given a candidate C
    // if k > m => C is too small => l = C + 1
    // else => r = C - 1
    // Time complexity O(log(sum(nums))*n), Space complexity O(1)
    public int splitArray(int[] nums, int m) {
        if(nums != null && nums.length > 1) {
            long sum = 0;
            int max = Integer.MIN_VALUE;
            
            for(int num : nums) {
                sum += num;
                max = Math.max(max, num);
            }
            
            long left = max; 
            long right = sum;
            
            while(left <= right) {
                long mid = (left + right)/2;
                if(valid(mid, nums, m)) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            
            return (int)left;
        } else if(nums.length == 1) {
            return nums[0];
        } else {
            return 0;
        }
    }
    
    private boolean valid(long target, int[] nums, int m) {
        int count = 1;
        long total = 0;
        //对数组进行分段求和，每当和大于target时，就重新求和，如果数组总数大于m，则说明target太小，需要增加，返回false
        for(int num : nums) {
            total += num;
            if (total > target) {
                total = num;
                count++;
                if (count > m) {
                    return false;
                }
            }
        }
        return true;
    }
}